{"ast":null,"code":"var _jsxFileName = \"D:\\\\Coding\\\\Quiz Generator Project\\\\Client\\\\online-quiz-system\\\\src\\\\pages\\\\quiz-main\\\\QuizMain.jsx\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect, useContext, useRef } from 'react';\nimport \"./quizmain.css\";\nimport axios from \"axios\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport { useParams } from \"react-router-dom\";\nimport { Row, Col, Container, ProgressBar, Button, Form } from \"react-bootstrap\";\nimport QuizReview from \"./../../components/quiz-review/QuizReview\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction QuizMain(props) {\n  _s();\n\n  const {\n    user\n  } = useContext(AuthContext);\n  const [questions, setQuestions] = useState([]);\n  const [quizInfo, setQuizInfo] = useState([]);\n  const [point, setPoint] = useState(0);\n  const [currentQuest, setCurrentQuest] = useState(0);\n  const [quizTime, setQuizTime] = useState(false);\n  const [time, setTime] = useState(0);\n  const timerCount = useRef(0);\n  const [currentAnswersSet, setCurrentAnswersSet] = useState([]);\n  const [timeCountDown, setTimeCountDown] = useState(\"\");\n  const [timerCountInterval, setTimerCountInterval] = useState(0);\n  const [answerFieldClass, setAnswerFieldClass] = useState(false);\n  const [answers, setAnswers] = useState([]);\n  const [answersOld, setAnswersOld] = useState([]);\n  const [currentAnswerField, setCurrentAnswerField] = useState(\"\");\n  const [answered, setAnswered] = useState(false);\n  const [answerDisplay, setAnswerDisplay] = useState(\"\");\n  const [correctQuestCount, setCorrectQuestCount] = useState(0);\n  const [answerBoxContent, setAnswerBoxContent] = useState(\"\");\n  const [markCompleted, setMarkCompleted] = useState(false);\n\n  const shuffleArray = array => {\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n\n    return array;\n  };\n\n  const toHHMMSS = secs => {\n    var sec_num = parseInt(secs, 10);\n    var hours = Math.floor(sec_num / 3600);\n    var minutes = Math.floor(sec_num / 60) % 60;\n    var seconds = sec_num % 60;\n    return [hours, minutes, seconds].map(v => v < 10 ? \"0\" + v : v).filter((v, i) => v !== \"00\" || i > 0).join(\":\");\n  };\n\n  const nextQuest = () => {\n    if (quizTime && questions[currentQuest].question_time != null) {\n      setTime(questions[currentQuest].question_time);\n    }\n\n    setCurrentQuest(currentQuest + 1);\n  };\n\n  const lastQuest = () => {\n    setCurrentQuest(currentQuest - 1);\n  };\n\n  const finish = async mode => {\n    if (mode === 1) {\n      const info = {\n        user_id: user.id,\n        quiz_id: props.location.state.id,\n        point: point,\n        time: null,\n        correct: correctQuestCount,\n        details: answersOld\n      };\n      await axios.post(\"/quiz/attempt\", info).then(res => {\n        console.log(\"Done\");\n      }).catch(err => {});\n    } else {\n      if (!answered) {\n        //Check answers\n        let point = 0;\n        let correctQuestCount = 0;\n        let getTmpOldAnswers = [];\n\n        for (let i = 0; i < answers.length; i++) {\n          if (questions[i].question_type === 0) {\n            //MCQ question\n            getTmpOldAnswers.push({\n              answer: answers[i],\n              mark: false,\n              question_id: questions[i].id,\n              point: 0\n            });\n\n            for (let j = 0; j < questions[i].answers.length; j++) {\n              let getAnswer = questions[i].answers[j];\n\n              if (getAnswer.id === answers[i]) {\n                if (getAnswer.is_correct === 1) {\n                  getTmpOldAnswers[i].mark = true;\n                  getTmpOldAnswers[i].point = questions[i].question_point;\n                  point += questions[i].question_point;\n                  correctQuestCount++;\n                  break;\n                }\n              }\n            }\n          } else {\n            getTmpOldAnswers.push({\n              answer: answers[i],\n              mark: false,\n              question_id: questions[i].id,\n              point: 0\n            });\n            let markResult = checkTextAnswer(answers[i], Buffer(questions[i].answers[0].answer_content, \"base64\").toString(\"utf-8\"));\n\n            if (markResult) {\n              getTmpOldAnswers[i].mark = true;\n              getTmpOldAnswers[i].point = questions[i].question_point;\n              point += questions[i].question_point;\n              correctQuestCount++;\n            }\n          }\n        }\n\n        setAnswersOld(getTmpOldAnswers);\n        setPoint(point);\n        setCorrectQuestCount(correctQuestCount);\n        setAnswered(true);\n        clearInterval(timerCountInterval);\n        setAnswerFieldClass(true);\n        setMarkCompleted(true);\n      }\n    }\n  };\n\n  useEffect(async () => {\n    if (!quizTime && markCompleted) {\n      const info = {\n        user_id: user.id,\n        quiz_id: props.location.state.id,\n        point: point,\n        time: quizInfo[\"quiz_time\"] - timerCount.current < 0 ? 0 : quizInfo[\"quiz_time\"] - timerCount.current,\n        correct: correctQuestCount,\n        details: answersOld\n      };\n      await axios.post(\"/quiz/attempt\", info).then(res => {\n        console.log(\"Done\");\n      }).catch(err => {});\n    }\n  }, [markCompleted]);\n  useEffect(() => {\n    console.log(questions);\n  }, [questions]);\n\n  const getQuizInfo = async () => {\n    let thisQuizInfo = await axios.get(`/quiz/info/${props.location.state.id}`);\n    console.log(thisQuizInfo);\n    thisQuizInfo = JSON.parse(thisQuizInfo.request.response);\n    setQuizInfo(thisQuizInfo[0]);\n    setQuizTime(thisQuizInfo[0][\"quiz_time\"] == null);\n\n    if (thisQuizInfo[0][\"quiz_time\"] != null) {\n      setTime(parseInt(thisQuizInfo[0][\"quiz_time\"]));\n      timerCount.current = parseInt(thisQuizInfo[0][\"quiz_time\"]);\n      setTimeCountDown(toHHMMSS(timerCount.current));\n    }\n\n    let listOfQuestions = await axios.get(`/quiz/join/${props.location.state.id}`);\n    listOfQuestions = JSON.parse(listOfQuestions.request.response);\n\n    if (thisQuizInfo[0][\"raw_order\"] == 0) {\n      listOfQuestions = await shuffleArray(listOfQuestions);\n    }\n\n    setQuestions(listOfQuestions);\n\n    if (!quizTime) {\n      for (let i = 0; i < listOfQuestions.length; i++) {\n        answers.push(\"\");\n      }\n\n      setAnswers(answers);\n    }\n  };\n\n  const checkAnswerMCQ = answer_id => {\n    if (!answered) {\n      if (quizTime) {\n        let getTmpOldAnswers = answersOld;\n        getTmpOldAnswers.push({\n          answer: answer_id,\n          mark: false,\n          question_id: questions[currentQuest - 1].id,\n          point: 0\n        });\n        setAnswered(true);\n\n        for (let i = 0; i < questions[currentQuest - 1].answers.length; i++) {\n          let getAnswer = questions[currentQuest - 1].answers[i];\n\n          if (getAnswer.id === answer_id) {\n            if (getAnswer.is_correct === 1) {\n              setPoint(point + questions[currentQuest - 1].question_point);\n              setCorrectQuestCount(correctQuestCount + 1);\n              getTmpOldAnswers[currentQuest - 1].mark = true;\n              getTmpOldAnswers[currentQuest - 1].point = questions[currentQuest - 1].question_point;\n              break;\n            }\n          }\n        }\n\n        setAnswersOld(getTmpOldAnswers);\n        console.log(timerCountInterval);\n        clearInterval(timerCountInterval);\n      }\n    }\n\n    if (!quizTime) {\n      let getTmpAnswer = answers;\n      getTmpAnswer[currentQuest - 1] = answer_id;\n      setAnswers(getTmpAnswer);\n    }\n  };\n\n  const checkAnswerText = e => {\n    if (!answered) {\n      if (quizTime) {\n        if (e.key == \"Enter\") {\n          e.preventDefault();\n          setAnswered(true);\n          let getTmpOldAnswers = answersOld;\n          getTmpOldAnswers.push({\n            answer: e.target.value,\n            mark: false,\n            question_id: questions[currentQuest - 1].id,\n            point: 0\n          });\n          let answersList = Buffer(questions[currentQuest - 1].answers[0].answer_content, \"base64\").toString(\"utf-8\");\n          answersList = answersList.split(\"~|\");\n          setAnswerDisplay(answersList[0].replace(\"~>\", \", \").replace(\"~+\", \", \"));\n          let markResult = checkTextAnswer(e.target.value, Buffer(questions[currentQuest - 1].answers[0].answer_content, \"base64\").toString(\"utf-8\"));\n\n          if (markResult) {\n            setPoint(point + questions[currentQuest - 1].question_point);\n            setCorrectQuestCount(correctQuestCount + 1);\n            getTmpOldAnswers[currentQuest - 1].mark = true;\n            getTmpOldAnswers[currentQuest - 1].point = questions[currentQuest - 1].question_point;\n          }\n\n          setAnswersOld(getTmpOldAnswers);\n          setAnswerFieldClass(true);\n          clearInterval(timerCountInterval);\n        }\n      }\n    }\n  };\n\n  const checkTextAnswer = (answer, key) => {\n    key = key.replaceAll(\"~|\", \"|\");\n    let keyArr = key.split(\"|\");\n    let mark = false;\n\n    for (let i = 0; i < keyArr.length; i++) {\n      let tmpAnswer = answer.trim().toUpperCase();\n      let tmpAnswer1 = tmpAnswer;\n      console.log(tmpAnswer1);\n      console.log(keyArr[i].toUpperCase());\n      console.log(tmpAnswer1 == keyArr[i].toUpperCase());\n\n      if (tmpAnswer1 == keyArr[i].toUpperCase()) {\n        mark = true;\n      } else if (keyArr[i].includes(\"~>\")) {\n        let tmpMark = true;\n        let tmpStr = keyArr[i].replaceAll(\"~>\", \"|\");\n        let tmpKeyArr = tmpStr.split(\"|\");\n        let tmpAnswerForModify = tmpAnswer1;\n        if (tmpAnswerForModify.includes(\" , \")) tmpAnswerForModify = tmpAnswer1.replaceAll(\" , \", \"|\");\n        if (tmpAnswerForModify.includes(\" ,\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\" ,\", \"|\");\n        if (tmpAnswerForModify.includes(\", \")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\", \", \"|\");\n        if (tmpAnswerForModify.includes(\",\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\",\", \"|\");\n        if (tmpAnswerForModify.includes(\" - \")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\" - \", \"|\");\n        if (tmpAnswerForModify.includes(\"- \")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\"- \", \"|\");\n        if (tmpAnswerForModify.includes(\" -\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\" -\", \"|\");\n        if (tmpAnswerForModify.includes(\"-\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\"-\", \"|\");\n\n        if (tmpAnswerForModify.includes(\"|\")) {\n          let tmpSubAnswerArr = tmpAnswerForModify.Split('|');\n\n          if (tmpSubAnswerArr.length != tmpKeyArr.length) {\n            tmpMark = false;\n          } else {\n            let tmp = true;\n\n            for (let a = 0; a < tmpSubAnswerArr.length; a++) {\n              if (tmpSubAnswerArr[a] != tmpKeyArr[a].toUpperCase()) {\n                tmp = false;\n                break;\n              }\n            }\n\n            if (!tmp) {\n              tmpMark = false;\n            }\n          }\n        } else {\n          if (tmpAnswerForModify.length != tmpKeyArr.length) {\n            tmpMark = false;\n          } else {\n            let tmp = true;\n\n            for (let a = 0; a < tmpAnswerForModify.length; a++) {\n              if (tmpAnswerForModify[a].toString() != tmpKeyArr[a].toUpperCase()) {\n                tmp = false;\n                break;\n              }\n            }\n\n            if (!tmp) {\n              tmpMark = false;\n            }\n          }\n        }\n\n        mark = tmpMark;\n      } else if (keyArr[i].includes(\"~+\")) {\n        let tmpMark = true;\n        let tmpStr = keyArr[i].replaceAll(\"~+\", \"|\");\n        let tmpKeyArr = tmpStr.split(\"|\");\n        let tmpAnswerForModify = tmpAnswer1;\n        if (tmpAnswerForModify.includes(\" , \")) tmpAnswerForModify = tmpAnswer1.replaceAll(\" , \", \"|\");\n        if (tmpAnswerForModify.includes(\" ,\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\" ,\", \"|\");\n        if (tmpAnswerForModify.includes(\", \")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\", \", \"|\");\n        if (tmpAnswerForModify.includes(\",\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\",\", \"|\");\n        if (tmpAnswerForModify.includes(\" - \")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\" - \", \"|\");\n        if (tmpAnswerForModify.includes(\"- \")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\"- \", \"|\");\n        if (tmpAnswerForModify.includes(\" -\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\" -\", \"|\");\n        if (tmpAnswerForModify.includes(\"-\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\"-\", \"|\");\n\n        if (tmpAnswerForModify.includes(\"|\")) {\n          let tmpSubAnswerArr = tmpAnswerForModify.Split('|');\n\n          if (tmpSubAnswerArr.length != tmpKeyArr.length) {\n            tmpMark = false;\n          } else {\n            for (let a = 0; a < tmpSubAnswerArr.length; a++) {\n              let found = false;\n\n              for (let b = 0; b < tmpKeyArr.length; b++) {\n                if (tmpSubAnswerArr[a] == tmpKeyArr[b].toUpperCase()) {\n                  found = true;\n                  break;\n                }\n              }\n\n              if (!found) {\n                tmpMark = false;\n                break;\n              }\n            }\n          }\n        } else {\n          if (tmpAnswerForModify.length != tmpKeyArr.length) {\n            tmpMark = false;\n          } else {\n            for (let a = 0; a < tmpAnswerForModify.length; a++) {\n              let found = false;\n\n              for (let b = 0; b < tmpKeyArr.length; b++) {\n                if (tmpAnswerForModify[a].toString() == tmpKeyArr[b].toUpperCase()) {\n                  found = true;\n                  break;\n                }\n              }\n\n              if (!found) {\n                tmpMark = false;\n                break;\n              }\n            }\n          }\n        }\n\n        mark = tmpMark;\n      }\n\n      if (mark) break;\n    }\n\n    return mark;\n  };\n\n  const handleBoxChange = e => {\n    if (!quizTime) {\n      let getAnswers = [...answers];\n      getAnswers[currentQuest - 1] = e.target.value;\n      setCurrentAnswerField(e.target.value);\n      setAnswers(getAnswers);\n    } else {\n      setAnswerBoxContent(e.target.value);\n    }\n  };\n\n  useEffect(() => {\n    if (quizInfo.length == 0) {\n      getQuizInfo();\n    }\n  }, []);\n  useEffect(() => {\n    if (quizTime) {\n      clearInterval(timerCountInterval);\n      setAnswered(false);\n      setAnswerDisplay(\"\");\n      setAnswerFieldClass(false);\n      setAnswerBoxContent(\"\");\n    }\n\n    if (currentQuest != 0) {\n      let getAnswers = questions[currentQuest - 1].answers;\n      getAnswers = shuffleArray(getAnswers);\n      setCurrentAnswersSet(getAnswers);\n\n      if (!quizTime) {\n        setCurrentAnswerField(answers[currentQuest - 1]);\n      }\n    }\n\n    if (currentQuest == 1) {\n      if (quizTime && questions[currentQuest - 1].question_time != null) {\n        console.log(questions[currentQuest - 1].question_time);\n        setTime(questions[currentQuest].question_time);\n        timerCount.current = questions[currentQuest].question_time;\n        setTimeCountDown(toHHMMSS(timerCount.current));\n      }\n\n      let getTime = quizTime ? questions[currentQuest - 1].question_time : time;\n\n      if (quizTime) {\n        timerCount.current = getTime;\n        setTimeCountDown(toHHMMSS(timerCount.current));\n      }\n\n      let timerCountInterval = setInterval(() => {\n        timerCount.current = timerCount.current - 1;\n        setTimeCountDown(toHHMMSS(timerCount.current));\n\n        if (timerCount.current == 0) {\n          clearInterval(timerCountInterval);\n          timerCount.current = 0;\n          setTimeCountDown(\"00:00\");\n          setAnswerFieldClass(true);\n\n          if (quizTime) {\n            let getTmpOldAnswers = answersOld;\n            getTmpOldAnswers.push({\n              answer: \"\",\n              mark: false,\n              question_id: questions[currentQuest - 1].id\n            });\n            setAnswersOld(getTmpOldAnswers);\n          }\n        }\n      }, 1000);\n      setTimerCountInterval(timerCountInterval);\n      console.log(timerCountInterval);\n    }\n\n    if (currentQuest != 0 && currentQuest != 1 && quizTime) {\n      let getTime = quizTime ? questions[currentQuest - 1].question_time : time;\n\n      if (quizTime) {\n        timerCount.current = getTime;\n        setTimeCountDown(toHHMMSS(timerCount.current));\n      }\n\n      let timerCountInterval = setInterval(() => {\n        timerCount.current = timerCount.current - 1;\n        setTimeCountDown(toHHMMSS(timerCount.current));\n\n        if (timerCount.current == 0) {\n          clearInterval(timerCountInterval);\n          timerCount.current = 0;\n          setTimeCountDown(\"00:00\");\n          setAnswerFieldClass(true);\n\n          if (quizTime) {\n            let getTmpOldAnswers = answersOld;\n            getTmpOldAnswers[currentQuest - 1] = {\n              answer: \"\",\n              mark: false,\n              question_id: questions[currentQuest - 1].id\n            };\n            setAnswersOld(getTmpOldAnswers);\n          }\n        }\n      }, 1000);\n      setTimerCountInterval(timerCountInterval);\n    }\n  }, [currentQuest]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [questions.length == 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading Questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 486,\n      columnNumber: 40\n    }, this), questions.length != 0 && /*#__PURE__*/_jsxDEV(Container, {\n      className: \"mt-3 mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-center\",\n        children: quizInfo.quiz_title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-center\",\n        children: [\"T\\u1EA1o b\\u1EDFi: \", quizInfo.creator]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          lg: 4,\n          md: 12,\n          sm: 12,\n          children: /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"text-center\",\n            children: user.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          lg: 4,\n          md: 6,\n          sm: 12,\n          children: /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"text-center\",\n            children: [\"C\\xE2u h\\u1ECFi: \", currentQuest, \"/\", questions.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 496,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          lg: 4,\n          md: 6,\n          sm: 12,\n          children: /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"text-center\",\n            children: [\"\\u0110i\\u1EC3m: \", point]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 499,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"text-center\",\n        children: [\"Th\\u1EDDi gian: \", timeCountDown]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 21\n      }, this), currentQuest == 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setCurrentQuest(1),\n          variant: \"info\",\n          className: \"text-white text-center\",\n          children: \"B\\u1EAFt \\u0111\\u1EA7u\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 25\n      }, this), currentQuest != 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-box d-flex justify-content-center align-items-center\",\n          children: /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"txt-quest\",\n            children: questions[currentQuest - 1].question_content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 525,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 25\n        }, this), questions[currentQuest - 1].media != \"\" && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center mt-2\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"img-quest\",\n            src: questions[currentQuest - 1].media\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 69\n        }, this), questions[currentQuest - 1].question_type == 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [!quizTime && /*#__PURE__*/_jsxDEV(Form.Control, {\n            value: currentAnswerField,\n            disabled: answerFieldClass,\n            type: \"text\",\n            className: \"mt-2\",\n            placeholder: \"C\\xE2u tr\\u1EA3 l\\u1EDDi\",\n            onKeyPress: e => checkAnswerText(e),\n            onChange: e => handleBoxChange(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 535,\n            columnNumber: 34\n          }, this), quizTime && /*#__PURE__*/_jsxDEV(Form.Control, {\n            value: answerBoxContent,\n            disabled: answerFieldClass,\n            type: \"text\",\n            className: \"mt-2\",\n            placeholder: \"C\\xE2u tr\\u1EA3 l\\u1EDDi\",\n            onKeyPress: e => checkAnswerText(e),\n            onChange: e => handleBoxChange(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 540,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 25\n        }, this), questions[currentQuest - 1].question_type == 0 && /*#__PURE__*/_jsxDEV(Row, {\n          className: \"mt-2\",\n          children: currentAnswersSet.map((answer, i) => {\n            let chosen = !quizTime && answers[currentQuest - 1] == answer.id ? \"answer-content text-center chosen\" : \"answer-content text-center\";\n\n            if (quizTime && answered) {\n              if (answer.is_correct == 1) chosen = \"answer-content text-center correct\";else chosen = \"answer-content text-center wrong\";\n            }\n\n            return /*#__PURE__*/_jsxDEV(Col, {\n              lg: 6,\n              md: 6,\n              sm: 12,\n              className: \"p-1 answer\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: chosen,\n                onClick: () => checkAnswerMCQ(answer.id),\n                children: [answer.media != \"\" && /*#__PURE__*/_jsxDEV(\"img\", {\n                  className: \"img-answer\",\n                  src: answer.media\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 559,\n                  columnNumber: 76\n                }, this), Buffer(answer.answer_content, \"base64\").toString(\"utf-8\")]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 558,\n                columnNumber: 49\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 557,\n              columnNumber: 45\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 29\n        }, this), quizTime && answered && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center mt-1\",\n          children: [questions[currentQuest - 1].answers.length == 1 && /*#__PURE__*/_jsxDEV(\"h5\", {\n            children: [\"\\u0110\\xE1p \\xE1n: \", answerDisplay]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 573,\n            columnNumber: 45\n          }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n            children: Buffer(questions[currentQuest - 1].explanation, \"base64\").toString(\"utf-8\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 576,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 17\n    }, this), !quizTime && currentQuest != 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [!answered && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: [currentQuest != 1 && /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => lastQuest(),\n          variant: \"info\",\n          className: \"text-white text-center\",\n          style: {\n            marginRight: \"5px\"\n          },\n          children: \"Tr\\u01B0\\u1EDBc\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 44\n        }, this), currentQuest != questions.length && /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => nextQuest(),\n          variant: \"info\",\n          className: \"text-white text-center ml-1\",\n          children: \"Ti\\u1EBFp\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 59\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 587,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center mt-2\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => finish(0),\n          variant: \"info\",\n          className: \"text-white text-center\",\n          children: \"Ho\\xE0n th\\xE0nh\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true), quizTime && currentQuest != 0 && currentQuest != answers.length && answered && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => nextQuest(),\n        variant: \"info\",\n        className: \"text-white text-center\",\n        children: \"Ti\\u1EBFp\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 600,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 599,\n      columnNumber: 21\n    }, this), quizTime && answered && currentQuest != 0 && currentQuest == answers.length && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center mt-2\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => finish(1),\n        variant: \"info\",\n        className: \"text-white text-center\",\n        children: \"Ho\\xE0n th\\xE0nh\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 607,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 606,\n      columnNumber: 21\n    }, this), questionEditGet && /*#__PURE__*/_jsxDEV(QuizReview, {\n      show: editQuestionModalShow,\n      onHide: () => setEditQuestionModalShow(false),\n      onEditQuestionSubmit: onEditQuestionSubmit,\n      useQuizTime: useQuizTime,\n      questionEditGet: questionEditGet\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 612,\n      columnNumber: 36\n    }, this)]\n  }, void 0, true);\n}\n\n_s(QuizMain, \"rZWoXkCcBXmJHOFjb6RK5PNbBYM=\");\n\n_c = QuizMain;\nexport default QuizMain;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuizMain\");","map":{"version":3,"sources":["D:/Coding/Quiz Generator Project/Client/online-quiz-system/src/pages/quiz-main/QuizMain.jsx"],"names":["React","useState","useEffect","useContext","useRef","axios","AuthContext","useParams","Row","Col","Container","ProgressBar","Button","Form","QuizReview","QuizMain","props","user","questions","setQuestions","quizInfo","setQuizInfo","point","setPoint","currentQuest","setCurrentQuest","quizTime","setQuizTime","time","setTime","timerCount","currentAnswersSet","setCurrentAnswersSet","timeCountDown","setTimeCountDown","timerCountInterval","setTimerCountInterval","answerFieldClass","setAnswerFieldClass","answers","setAnswers","answersOld","setAnswersOld","currentAnswerField","setCurrentAnswerField","answered","setAnswered","answerDisplay","setAnswerDisplay","correctQuestCount","setCorrectQuestCount","answerBoxContent","setAnswerBoxContent","markCompleted","setMarkCompleted","shuffleArray","array","i","length","j","Math","floor","random","temp","toHHMMSS","secs","sec_num","parseInt","hours","minutes","seconds","map","v","filter","join","nextQuest","question_time","lastQuest","finish","mode","info","user_id","id","quiz_id","location","state","correct","details","post","then","res","console","log","catch","err","getTmpOldAnswers","question_type","push","answer","mark","question_id","getAnswer","is_correct","question_point","markResult","checkTextAnswer","Buffer","answer_content","toString","clearInterval","current","getQuizInfo","thisQuizInfo","get","JSON","parse","request","response","listOfQuestions","checkAnswerMCQ","answer_id","getTmpAnswer","checkAnswerText","e","key","preventDefault","target","value","answersList","split","replace","replaceAll","keyArr","tmpAnswer","trim","toUpperCase","tmpAnswer1","includes","tmpMark","tmpStr","tmpKeyArr","tmpAnswerForModify","tmpSubAnswerArr","Split","tmp","a","found","b","handleBoxChange","getAnswers","getTime","setInterval","quiz_title","creator","username","question_content","media","chosen","explanation","marginRight","questionEditGet","editQuestionModalShow","setEditQuestionModalShow","onEditQuestionSubmit","useQuizTime"],"mappings":"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","sourcesContent":["import {React, useState, useEffect, useContext, useRef} from 'react'\r\nimport \"./quizmain.css\";\r\nimport axios from \"axios\";\r\nimport {AuthContext} from \"../../context/AuthContext\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport {Row, Col, Container, ProgressBar, Button, Form} from \"react-bootstrap\";\r\nimport QuizReview from \"./../../components/quiz-review/QuizReview\";\r\n\r\nfunction QuizMain(props) {\r\n    const {user} = useContext(AuthContext);\r\n    const [questions, setQuestions] = useState([]);\r\n    const [quizInfo, setQuizInfo] = useState([]);\r\n    const [point, setPoint] = useState(0);\r\n    const [currentQuest, setCurrentQuest] = useState(0);\r\n    const [quizTime, setQuizTime] = useState(false)\r\n    const [time, setTime] = useState(0);\r\n    const timerCount = useRef(0);\r\n    const [currentAnswersSet, setCurrentAnswersSet] = useState([]);\r\n    const [timeCountDown, setTimeCountDown] = useState(\"\");\r\n    const [timerCountInterval, setTimerCountInterval] = useState(0);\r\n    const [answerFieldClass, setAnswerFieldClass] = useState(false);\r\n    const [answers, setAnswers] = useState([]);\r\n    const [answersOld, setAnswersOld] = useState([]);\r\n    const [currentAnswerField, setCurrentAnswerField] = useState(\"\");\r\n    const [answered, setAnswered] = useState(false);\r\n    const [answerDisplay, setAnswerDisplay] = useState(\"\");\r\n    const [correctQuestCount, setCorrectQuestCount] = useState(0);\r\n    const [answerBoxContent, setAnswerBoxContent] = useState(\"\");\r\n    const [markCompleted, setMarkCompleted] = useState(false);\r\n\r\n    const shuffleArray = (array) => {\r\n        for (var i = array.length - 1; i > 0; i--) {\r\n            var j = Math.floor(Math.random() * (i + 1));\r\n            var temp = array[i];\r\n            array[i] = array[j];\r\n            array[j] = temp;\r\n        }\r\n        return array\r\n    }\r\n\r\n    const toHHMMSS = (secs) => {\r\n        var sec_num = parseInt(secs, 10)\r\n        var hours   = Math.floor(sec_num / 3600)\r\n        var minutes = Math.floor(sec_num / 60) % 60\r\n        var seconds = sec_num % 60\r\n    \r\n        return [hours,minutes,seconds]\r\n            .map(v => v < 10 ? \"0\" + v : v)\r\n            .filter((v,i) => v !== \"00\" || i > 0)\r\n            .join(\":\")\r\n    }\r\n\r\n    const nextQuest = () => {\r\n        if (quizTime && questions[currentQuest].question_time != null)\r\n        {\r\n            setTime(questions[currentQuest].question_time)\r\n        }\r\n        setCurrentQuest(currentQuest + 1)\r\n    }\r\n\r\n    const lastQuest = () => {\r\n        setCurrentQuest(currentQuest - 1)\r\n    }\r\n\r\n    const finish = async(mode) => {\r\n        if (mode === 1) {\r\n            const info = {\r\n                user_id: user.id,\r\n                quiz_id: props.location.state.id,\r\n                point: point, \r\n                time: null,\r\n                correct: correctQuestCount,\r\n                details: answersOld\r\n            }\r\n            await axios.post(\"/quiz/attempt\", info)\r\n            .then(res => {\r\n                console.log(\"Done\");\r\n            })\r\n            .catch(err => {\r\n\r\n            })\r\n        } else {\r\n            if (!answered) {\r\n                //Check answers\r\n                let point = 0;\r\n                let correctQuestCount = 0;\r\n                let getTmpOldAnswers = [];\r\n                for (let i = 0; i < answers.length; i++) {\r\n                    if (questions[i].question_type === 0) {\r\n                        //MCQ question\r\n                        getTmpOldAnswers.push({\r\n                            answer: answers[i],\r\n                            mark: false,\r\n                            question_id: questions[i].id,\r\n                            point: 0\r\n                        })\r\n                        for (let j = 0; j < questions[i].answers.length; j++) {\r\n                            let getAnswer = questions[i].answers[j];\r\n                            if (getAnswer.id === answers[i]) {\r\n                                if (getAnswer.is_correct === 1) {\r\n                                    getTmpOldAnswers[i].mark = true;\r\n                                    getTmpOldAnswers[i].point = questions[i].question_point;\r\n                                    point += questions[i].question_point\r\n                                    correctQuestCount++;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        getTmpOldAnswers.push({\r\n                            answer: answers[i],\r\n                            mark: false,\r\n                            question_id: questions[i].id,\r\n                            point: 0\r\n                        })\r\n                        let markResult = checkTextAnswer(answers[i], Buffer(questions[i].answers[0].answer_content, \"base64\").toString(\"utf-8\"));\r\n                        if (markResult) {\r\n                            getTmpOldAnswers[i].mark = true;\r\n                            getTmpOldAnswers[i].point = questions[i].question_point;\r\n                            point += questions[i].question_point\r\n                            correctQuestCount++;\r\n                        }\r\n                    }\r\n                }\r\n                setAnswersOld(getTmpOldAnswers);\r\n                setPoint(point);\r\n                setCorrectQuestCount(correctQuestCount);\r\n                setAnswered(true);\r\n                clearInterval(timerCountInterval);\r\n                setAnswerFieldClass(true);\r\n                setMarkCompleted(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(async() => {\r\n        if (!quizTime && markCompleted) {\r\n            const info = {\r\n                user_id: user.id,\r\n                quiz_id: props.location.state.id,\r\n                point: point, \r\n                time: quizInfo[\"quiz_time\"] - timerCount.current < 0? 0 : quizInfo[\"quiz_time\"] - timerCount.current,\r\n                correct: correctQuestCount,\r\n                details: answersOld\r\n            }\r\n            await axios.post(\"/quiz/attempt\", info)\r\n            .then(res => {\r\n                console.log(\"Done\");\r\n            })\r\n            .catch(err => {\r\n\r\n            })\r\n        }\r\n    }, [markCompleted])\r\n\r\n    useEffect(() => {\r\n        console.log(questions);\r\n    }, [questions])\r\n\r\n    const getQuizInfo = async() => {\r\n        let thisQuizInfo = await axios.get(`/quiz/info/${props.location.state.id}`);\r\n        console.log(thisQuizInfo);\r\n        thisQuizInfo = JSON.parse(thisQuizInfo.request.response);\r\n        setQuizInfo(thisQuizInfo[0]);\r\n        setQuizTime(thisQuizInfo[0][\"quiz_time\"] == null);\r\n        if (thisQuizInfo[0][\"quiz_time\"] != null) {\r\n            setTime(parseInt(thisQuizInfo[0][\"quiz_time\"]))\r\n            timerCount.current = parseInt(thisQuizInfo[0][\"quiz_time\"])\r\n            setTimeCountDown(toHHMMSS(timerCount.current));\r\n        }\r\n\r\n        let listOfQuestions = await axios.get(`/quiz/join/${props.location.state.id}`);\r\n        listOfQuestions = JSON.parse(listOfQuestions.request.response);\r\n        if (thisQuizInfo[0][\"raw_order\"] == 0) {\r\n            listOfQuestions = await shuffleArray(listOfQuestions);\r\n        }\r\n        setQuestions(listOfQuestions);\r\n\r\n        if (!quizTime) {\r\n            for (let i = 0; i < listOfQuestions.length; i++) {\r\n                answers.push(\"\");\r\n            }\r\n            setAnswers(answers);\r\n        }\r\n    }\r\n\r\n    const checkAnswerMCQ = (answer_id) => {\r\n        if (!answered) {\r\n            if (quizTime) {\r\n                let getTmpOldAnswers = answersOld;\r\n                getTmpOldAnswers.push({\r\n                    answer: answer_id,\r\n                    mark: false,\r\n                    question_id: questions[currentQuest - 1].id,\r\n                    point: 0\r\n                }) \r\n                setAnswered(true);\r\n                for (let i = 0; i < questions[currentQuest - 1].answers.length; i++) {\r\n                    let getAnswer = questions[currentQuest - 1].answers[i];\r\n                    if (getAnswer.id === answer_id) {\r\n                        if (getAnswer.is_correct === 1) {\r\n                            setPoint(point + questions[currentQuest - 1].question_point);\r\n                            setCorrectQuestCount(correctQuestCount + 1);\r\n                            getTmpOldAnswers[currentQuest - 1].mark = true;\r\n                            getTmpOldAnswers[currentQuest - 1].point = questions[currentQuest - 1].question_point;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                setAnswersOld(getTmpOldAnswers);\r\n                console.log(timerCountInterval);\r\n                clearInterval(timerCountInterval);\r\n            }\r\n        }\r\n        if (!quizTime) {\r\n            let getTmpAnswer = answers;\r\n            getTmpAnswer[currentQuest - 1] = answer_id;\r\n            setAnswers(getTmpAnswer);\r\n        }\r\n    }\r\n\r\n    const checkAnswerText = (e) => {\r\n        if (!answered) {\r\n            if (quizTime) {\r\n                if (e.key == \"Enter\") {\r\n                    e.preventDefault();\r\n                    setAnswered(true);\r\n                    let getTmpOldAnswers = answersOld;\r\n                    getTmpOldAnswers.push({\r\n                        answer: e.target.value,\r\n                        mark: false,\r\n                        question_id: questions[currentQuest - 1].id,\r\n                        point: 0\r\n                    })\r\n                    let answersList = Buffer(questions[currentQuest - 1].answers[0].answer_content, \"base64\").toString(\"utf-8\");\r\n                    answersList = answersList.split(\"~|\")\r\n                    setAnswerDisplay(answersList[0].replace(\"~>\", \", \").replace(\"~+\", \", \"));\r\n                    let markResult = checkTextAnswer(e.target.value, Buffer(questions[currentQuest - 1].answers[0].answer_content, \"base64\").toString(\"utf-8\"));\r\n                    if (markResult) {\r\n                        setPoint(point + questions[currentQuest - 1].question_point);\r\n                        setCorrectQuestCount(correctQuestCount + 1);\r\n                        getTmpOldAnswers[currentQuest - 1].mark = true;\r\n                        getTmpOldAnswers[currentQuest - 1].point = questions[currentQuest - 1].question_point;\r\n                    }\r\n                    setAnswersOld(getTmpOldAnswers);\r\n                    setAnswerFieldClass(true);\r\n                    clearInterval(timerCountInterval);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const checkTextAnswer = (answer, key) => {\r\n        key = key.replaceAll(\"~|\", \"|\");\r\n        let keyArr = key.split(\"|\");\r\n        let mark = false;\r\n        for (let i = 0; i < keyArr.length; i++) {\r\n            let tmpAnswer = answer.trim().toUpperCase();\r\n            let tmpAnswer1 = tmpAnswer;\r\n            console.log(tmpAnswer1);\r\n            console.log(keyArr[i].toUpperCase());\r\n            console.log(tmpAnswer1 == keyArr[i].toUpperCase())\r\n            if (tmpAnswer1 == keyArr[i].toUpperCase()) {\r\n                mark = true;\r\n            } else if (keyArr[i].includes(\"~>\")) {\r\n                let tmpMark = true;\r\n                let tmpStr = keyArr[i].replaceAll(\"~>\", \"|\");\r\n                let tmpKeyArr = tmpStr.split(\"|\");\r\n                let tmpAnswerForModify = tmpAnswer1;\r\n                if (tmpAnswerForModify.includes(\" , \")) tmpAnswerForModify = tmpAnswer1.replaceAll(\" , \", \"|\");\r\n                if (tmpAnswerForModify.includes(\" ,\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\" ,\", \"|\");\r\n                if (tmpAnswerForModify.includes(\", \")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\", \", \"|\");\r\n                if (tmpAnswerForModify.includes(\",\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\",\", \"|\");\r\n                if (tmpAnswerForModify.includes(\" - \")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\" - \", \"|\");\r\n                if (tmpAnswerForModify.includes(\"- \")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\"- \", \"|\");\r\n                if (tmpAnswerForModify.includes(\" -\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\" -\", \"|\");\r\n                if (tmpAnswerForModify.includes(\"-\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\"-\", \"|\");\r\n                if (tmpAnswerForModify.includes(\"|\")) {\r\n                    let tmpSubAnswerArr = tmpAnswerForModify.Split('|');\r\n                    if (tmpSubAnswerArr.length != tmpKeyArr.length) {\r\n                        tmpMark = false;\r\n                    } else {\r\n                        let tmp = true;\r\n                        for (let a = 0; a < tmpSubAnswerArr.length; a++) {\r\n                            if (tmpSubAnswerArr[a] != tmpKeyArr[a].toUpperCase()) {\r\n                                tmp = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (!tmp) {\r\n                            tmpMark = false;\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (tmpAnswerForModify.length != tmpKeyArr.length) {\r\n                        tmpMark = false;\r\n                    } else {\r\n                        let tmp = true;\r\n                        for (let a = 0; a < tmpAnswerForModify.length; a++) {\r\n                            if (tmpAnswerForModify[a].toString() != tmpKeyArr[a].toUpperCase()) {\r\n                                tmp = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (!tmp) {\r\n                            tmpMark = false;\r\n                        }\r\n                    }\r\n                }\r\n                mark = tmpMark;\r\n            } else if (keyArr[i].includes(\"~+\")) {\r\n                let tmpMark = true;\r\n                let tmpStr = keyArr[i].replaceAll(\"~+\", \"|\");\r\n                let tmpKeyArr = tmpStr.split(\"|\");\r\n                let tmpAnswerForModify = tmpAnswer1;\r\n                if (tmpAnswerForModify.includes(\" , \")) tmpAnswerForModify = tmpAnswer1.replaceAll(\" , \", \"|\");\r\n                if (tmpAnswerForModify.includes(\" ,\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\" ,\", \"|\");\r\n                if (tmpAnswerForModify.includes(\", \")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\", \", \"|\");\r\n                if (tmpAnswerForModify.includes(\",\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\",\", \"|\");\r\n                if (tmpAnswerForModify.includes(\" - \")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\" - \", \"|\");\r\n                if (tmpAnswerForModify.includes(\"- \")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\"- \", \"|\");\r\n                if (tmpAnswerForModify.includes(\" -\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\" -\", \"|\");\r\n                if (tmpAnswerForModify.includes(\"-\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\"-\", \"|\");\r\n                if (tmpAnswerForModify.includes(\"|\")) {\r\n                    let tmpSubAnswerArr = tmpAnswerForModify.Split('|');\r\n                    if (tmpSubAnswerArr.length != tmpKeyArr.length) {\r\n                        tmpMark = false;\r\n                    } else {\r\n                        for (let a = 0; a < tmpSubAnswerArr.length; a++) {\r\n                            let found = false;\r\n                            for (let b = 0; b < tmpKeyArr.length; b++)\r\n                            {\r\n                                if (tmpSubAnswerArr[a] == tmpKeyArr[b].toUpperCase()) \r\n                                {\r\n                                    found = true;\r\n                                    break;\r\n                                }\r\n\r\n                            }\r\n                            if (!found)\r\n                            {\r\n                                tmpMark = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (tmpAnswerForModify.length != tmpKeyArr.length) {\r\n                        tmpMark = false;\r\n                    } else {\r\n                        for (let a = 0; a < tmpAnswerForModify.length; a++)\r\n                        {\r\n                            let found = false;\r\n                            for (let b = 0; b < tmpKeyArr.length; b++)\r\n                            {\r\n                                if (tmpAnswerForModify[a].toString() == tmpKeyArr[b].toUpperCase())\r\n                                {\r\n                                    found = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            if (!found)\r\n                            {\r\n                                tmpMark = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                mark = tmpMark;\r\n            }\r\n            if (mark)\r\n                break;\r\n        }\r\n        return mark;\r\n    }\r\n\r\n    const handleBoxChange = (e) => {\r\n        if (!quizTime) {\r\n            let getAnswers = [...answers];\r\n            getAnswers[currentQuest - 1] = e.target.value;\r\n            setCurrentAnswerField(e.target.value);\r\n            setAnswers(getAnswers);\r\n        } else {\r\n            setAnswerBoxContent(e.target.value);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (quizInfo.length == 0) {\r\n            getQuizInfo();\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (quizTime) {\r\n            clearInterval(timerCountInterval);\r\n            setAnswered(false);\r\n            setAnswerDisplay(\"\");\r\n            setAnswerFieldClass(false);\r\n            setAnswerBoxContent(\"\");\r\n        }\r\n\r\n        if (currentQuest != 0) {\r\n            let getAnswers = questions[currentQuest - 1].answers;\r\n            getAnswers = shuffleArray(getAnswers);\r\n            setCurrentAnswersSet(getAnswers);\r\n\r\n            if (!quizTime) {\r\n                setCurrentAnswerField(answers[currentQuest - 1]);\r\n            }\r\n        }\r\n        if (currentQuest == 1) {\r\n            if (quizTime && questions[currentQuest - 1].question_time != null)\r\n            {\r\n                console.log(questions[currentQuest - 1].question_time)\r\n                setTime(questions[currentQuest].question_time)\r\n                timerCount.current = questions[currentQuest].question_time;\r\n                setTimeCountDown(toHHMMSS(timerCount.current));\r\n            }\r\n\r\n            let getTime = quizTime? questions[currentQuest - 1].question_time : time;\r\n\r\n            if (quizTime)\r\n            {\r\n                timerCount.current = getTime;\r\n                setTimeCountDown(toHHMMSS(timerCount.current));\r\n            }\r\n            let timerCountInterval = setInterval(() => {\r\n                timerCount.current = timerCount.current - 1;\r\n                setTimeCountDown(toHHMMSS(timerCount.current));\r\n                if (timerCount.current == 0) {\r\n                    clearInterval(timerCountInterval);\r\n                    timerCount.current = 0;\r\n                    setTimeCountDown(\"00:00\");\r\n                    setAnswerFieldClass(true);\r\n                    if (quizTime) {\r\n                        let getTmpOldAnswers = answersOld;\r\n                        getTmpOldAnswers.push({\r\n                            answer: \"\",\r\n                            mark: false,\r\n                            question_id: questions[currentQuest - 1].id\r\n                        });\r\n                        setAnswersOld(getTmpOldAnswers);\r\n                    }\r\n                }\r\n            }, 1000);\r\n            setTimerCountInterval(timerCountInterval);\r\n            console.log(timerCountInterval);\r\n        } \r\n        if (currentQuest != 0 && currentQuest != 1 && quizTime) {\r\n            let getTime = quizTime? questions[currentQuest - 1].question_time : time;\r\n\r\n            if (quizTime)\r\n            {\r\n                timerCount.current = getTime;\r\n                setTimeCountDown(toHHMMSS(timerCount.current));\r\n            }\r\n            let timerCountInterval = setInterval(() => {\r\n                timerCount.current = timerCount.current - 1;\r\n                setTimeCountDown(toHHMMSS(timerCount.current));\r\n                if (timerCount.current == 0) {\r\n                    clearInterval(timerCountInterval);\r\n                    timerCount.current = 0;\r\n                    setTimeCountDown(\"00:00\");\r\n                    setAnswerFieldClass(true);\r\n                    if (quizTime) {\r\n                        let getTmpOldAnswers = answersOld;\r\n                        getTmpOldAnswers[currentQuest - 1] = {\r\n                            answer: \"\",\r\n                            mark: false,\r\n                            question_id: questions[currentQuest - 1].id\r\n                        };\r\n                        setAnswersOld(getTmpOldAnswers);\r\n                    }\r\n                }\r\n            }, 1000);\r\n            setTimerCountInterval(timerCountInterval);\r\n        }\r\n    }, [currentQuest])\r\n\r\n    return (\r\n        <>\r\n            {questions.length == 0 && (<p>Loading Questions</p>)}\r\n            {questions.length != 0 && (\r\n                <Container className=\"mt-3 mb-3\">\r\n                    <h1 className=\"text-center\">{quizInfo.quiz_title}</h1>\r\n                    <h3 className=\"text-center\">Tạo bởi: {quizInfo.creator}</h3>\r\n                    <Row className=\"\">\r\n                        <Col lg={4} md={12} sm={12}>\r\n                            <h5 className=\"text-center\">{user.username}</h5>\r\n                        </Col>\r\n                        <Col lg={4} md={6} sm={12}>\r\n                            <h5 className=\"text-center\">Câu hỏi: {currentQuest}/{questions.length}</h5>\r\n                        </Col>\r\n                        <Col lg={4} md={6} sm={12}>\r\n                            <h5 className=\"text-center\">Điểm: {point}</h5>\r\n                        </Col>\r\n                    </Row>\r\n                    <h5 className=\"text-center\">\r\n                        Thời gian: {timeCountDown}\r\n                    </h5>\r\n                    {/* <div className=\"progress mb-2\">\r\n                        <ProgressBar \r\n                            variant=\"info\"\r\n                            striped \r\n                            now={progressBarWidth}\r\n                            style={{width: '100%'}}\r\n                        ></ProgressBar>\r\n                        \r\n                    </div> */}\r\n                    <div className=\"text-center\">\r\n                        \r\n                    </div>\r\n                    {currentQuest == 0 && (\r\n                        <div className=\"text-center\">\r\n                            <Button onClick={() => setCurrentQuest(1)} variant=\"info\" className=\"text-white text-center\">Bắt đầu</Button>\r\n                        </div>\r\n                    )}\r\n                    {currentQuest != 0 && \r\n                        <>\r\n                        <div className=\"question-box d-flex justify-content-center align-items-center\">\r\n                            <h5 className=\"txt-quest\">{questions[currentQuest - 1].question_content}</h5>\r\n                        </div>\r\n                        {questions[currentQuest - 1].media != \"\" && <div className=\"text-center mt-2\">\r\n                            <img className=\"img-quest\" src={questions[currentQuest - 1].media}></img>\r\n                        </div>}\r\n                        {questions[currentQuest - 1].question_type == 1 && \r\n                        <div>\r\n                            {\r\n                                \r\n                                !quizTime && \r\n                                (<Form.Control value={currentAnswerField} disabled={answerFieldClass} type=\"text\" className=\"mt-2\" placeholder=\"Câu trả lời\" onKeyPress={(e) => checkAnswerText(e)} onChange={(e) => handleBoxChange(e)}>\r\n                                </Form.Control>)\r\n                            }\r\n                            {\r\n                                quizTime && (\r\n                                    <Form.Control value={answerBoxContent} disabled={answerFieldClass} type=\"text\" className=\"mt-2\" placeholder=\"Câu trả lời\" onKeyPress={(e) => checkAnswerText(e)} onChange={(e) => handleBoxChange(e)}>\r\n                                    </Form.Control>\r\n                                )\r\n                            }\r\n                        </div>}\r\n                        {questions[currentQuest - 1].question_type == 0 && \r\n                            <Row className=\"mt-2\">\r\n                                {\r\n                                    currentAnswersSet.map((answer, i) => {\r\n                                        let chosen = !quizTime && answers[currentQuest - 1] == answer.id? \"answer-content text-center chosen\": \"answer-content text-center\";\r\n                                        if (quizTime && answered) {\r\n                                            if (answer.is_correct == 1)\r\n                                                chosen = \"answer-content text-center correct\"\r\n                                            else \r\n                                                chosen = \"answer-content text-center wrong\"\r\n                                        }\r\n                                        return (\r\n                                            <Col lg={6} md={6} sm={12} className=\"p-1 answer\">\r\n                                                <div className={chosen} onClick={() => checkAnswerMCQ(answer.id)}>\r\n                                                    {answer.media != \"\" && <img className=\"img-answer\" src={answer.media}></img>}\r\n                                                    {Buffer(answer.answer_content, \"base64\").toString(\"utf-8\")}\r\n                                                </div>\r\n                                            </Col>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </Row>\r\n                        }\r\n                        {\r\n                            quizTime && answered && (\r\n                                <div className=\"text-center mt-1\">\r\n                                    {\r\n                                        questions[currentQuest - 1].answers.length == 1 && (\r\n                                            <h5>Đáp án: {answerDisplay}</h5>\r\n                                        )\r\n                                    }\r\n                                    <h5>{Buffer(questions[currentQuest - 1].explanation, \"base64\").toString(\"utf-8\")}</h5>\r\n                                </div>\r\n                            )\r\n                        }\r\n                        </>\r\n                    }\r\n                </Container>\r\n            )}\r\n            {!quizTime && currentQuest != 0 && (\r\n                <>\r\n                {!answered && (\r\n                    <div className=\"text-center\">\r\n                    {currentQuest != 1 && (<Button onClick={() => lastQuest()} variant=\"info\" className=\"text-white text-center\" style={{marginRight: \"5px\"}}>Trước</Button>)}\r\n                    {currentQuest != questions.length && (<Button onClick={() => nextQuest()} variant=\"info\" className=\"text-white text-center ml-1\">Tiếp</Button>)}\r\n                    </div>\r\n                )}\r\n                <div className=\"text-center mt-2\">\r\n                    <Button onClick={() => finish(0)} variant=\"info\" className=\"text-white text-center\">Hoàn thành</Button>\r\n                </div>\r\n                </>\r\n            )}\r\n            {\r\n                quizTime && currentQuest != 0 && currentQuest != answers.length && answered && (\r\n                    <div className=\"text-center\">\r\n                        <Button onClick={() => nextQuest()} variant=\"info\" className=\"text-white text-center\">Tiếp</Button>\r\n                    </div>\r\n                )\r\n            }\r\n            {\r\n                quizTime && answered && currentQuest != 0 && currentQuest == answers.length && (\r\n                    <div className=\"text-center mt-2\">\r\n                        <Button onClick={() => finish(1)} variant=\"info\" className=\"text-white text-center\">Hoàn thành</Button>\r\n                    </div>\r\n                )\r\n            }\r\n            {\r\n                questionEditGet && <QuizReview\r\n                    show={editQuestionModalShow}\r\n                    onHide={() => setEditQuestionModalShow(false)}\r\n                    onEditQuestionSubmit={onEditQuestionSubmit}\r\n                    useQuizTime={useQuizTime}\r\n                    questionEditGet={questionEditGet}\r\n                >\r\n\r\n                </QuizReview>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default QuizMain\r\n"]},"metadata":{},"sourceType":"module"}