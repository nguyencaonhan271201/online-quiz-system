{"ast":null,"code":"var _jsxFileName = \"D:\\\\Coding\\\\Quiz Generator Project\\\\Client\\\\online-quiz-system\\\\src\\\\pages\\\\quiz-main\\\\QuizMain.jsx\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect, useContext, useRef } from 'react';\nimport \"./quizmain.css\";\nimport axios from \"axios\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport { useParams } from \"react-router-dom\";\nimport { Row, Col, Container, ProgressBar, Button, Form } from \"react-bootstrap\";\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction QuizMain() {\n  _s();\n\n  let {\n    id\n  } = useParams();\n  const {\n    user\n  } = useContext(AuthContext);\n  const [questions, setQuestions] = useState([]);\n  const [quizInfo, setQuizInfo] = useState([]);\n  const [point, setPoint] = useState(0);\n  const [currentQuest, setCurrentQuest] = useState(0);\n  const [quizTime, setQuizTime] = useState(false);\n  const [time, setTime] = useState(0);\n  const [progressBarInterval, setProgressBarInterval] = useState(0);\n  const [progressBarWidth, setProgressBarWidth] = useState(100);\n  const percentage = useRef(100);\n  const [currentAnswersSet, setCurrentAnswersSet] = useState([]);\n\n  const shuffleArray = array => {\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n\n    return array;\n  };\n\n  useEffect(() => {\n    console.log(questions);\n  }, [questions]);\n\n  const getQuizInfo = async () => {\n    let thisQuizInfo = await axios.get(`/quiz/info/${id}`);\n    thisQuizInfo = JSON.parse(thisQuizInfo.request.response);\n    setQuizInfo(thisQuizInfo[0]);\n    setQuizTime(thisQuizInfo[0][\"quiz_time\"] != null);\n    console.log(thisQuizInfo[0][\"quiz_time\"] != null);\n\n    if (thisQuizInfo[0][\"quiz_time\"] != null) {\n      setTime(parseInt(thisQuizInfo[0][\"quiz_time\"]));\n    }\n\n    let listOfQuestions = await axios.get(`/quiz/join/${id}`);\n    listOfQuestions = JSON.parse(listOfQuestions.request.response);\n\n    if (thisQuizInfo[0][\"raw_order\"] == 0) {\n      listOfQuestions = await shuffleArray(listOfQuestions);\n    }\n\n    setQuestions(listOfQuestions);\n  };\n\n  useEffect(() => {\n    if (quizInfo.length == 0) {\n      getQuizInfo();\n    }\n  }, []);\n  useEffect(() => {\n    if (currentQuest != 0) {\n      let getAnswers = questions[currentQuest - 1].answers;\n      getAnswers = shuffleArray(getAnswers);\n      setCurrentAnswersSet(getAnswers);\n    }\n\n    if (currentQuest == 1) {\n      percentage.current = 100;\n      let progressBarInterval = setInterval(() => {\n        percentage.current = percentage.current - 1;\n        setProgressBarWidth(percentage.current);\n\n        if (percentage.current == 0) {\n          clearInterval(progressBarInterval);\n          percentage.current = 0;\n        }\n      }, time * 10);\n      setProgressBarInterval(progressBarInterval);\n    }\n\n    if (currentQuest != 0 && currentQuest != 1 && quizTime) {\n      percentage.current = 100;\n      let progressBarInterval = setInterval(() => {\n        percentage.current = percentage.current - 1;\n        setProgressBarWidth(percentage.current);\n\n        if (percentage.current == 0) {\n          clearInterval(progressBarInterval);\n          percentage.current = 0;\n        }\n      }, time * 10);\n      setProgressBarInterval(progressBarInterval);\n    }\n  }, [currentQuest]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [questions.length == 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading Questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 40\n    }, this), questions.length != 0 && /*#__PURE__*/_jsxDEV(Container, {\n      className: \"mt-3 mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-center\",\n        children: quizInfo.quiz_title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          lg: 4,\n          md: 12,\n          sm: 12,\n          children: /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"text-center\",\n            children: user.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          lg: 4,\n          md: 6,\n          sm: 12,\n          children: /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"text-center\",\n            children: [\"C\\xE2u h\\u1ECFi: \", currentQuest, \"/\", questions.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          lg: 4,\n          md: 6,\n          sm: 12,\n          children: /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"text-center\",\n            children: [\"\\u0110i\\u1EC3m: \", point]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"text-center\",\n        children: [\"Th\\u1EDDi gian: \", time]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress mb-2\",\n        children: /*#__PURE__*/_jsxDEV(ProgressBar, {\n          variant: \"info\",\n          striped: true,\n          now: progressBarWidth,\n          style: {\n            width: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 21\n      }, this), currentQuest == 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setCurrentQuest(1),\n          variant: \"info\",\n          className: \"text-white text-center\",\n          children: \"B\\u1EAFt \\u0111\\u1EA7u\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 25\n      }, this), currentQuest != 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-box d-flex justify-content-center align-items-center\",\n          children: /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"txt-quest\",\n            children: questions[currentQuest - 1].question_content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 25\n        }, this), questions[currentQuest - 1].media != \"\" && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center mt-2\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"img-quest\",\n            src: questions[currentQuest - 1].media\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 69\n        }, this), questions[currentQuest - 1].question_type == 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            className: \"mt-2\",\n            placeholder: \"C\\xE2u tr\\u1EA3 l\\u1EDDi\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 25\n        }, this), questions[currentQuest - 1].question_type == 0 && /*#__PURE__*/_jsxDEV(Row, {\n          className: \"mt-2\",\n          children: currentAnswersSet.map((answer, i) => /*#__PURE__*/_jsxDEV(Col, {\n            lg: 6,\n            md: 6,\n            sm: 12,\n            className: \"p-1 answer\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"answer-content text-center\",\n              onClick: () => console.log(answer.id),\n              children: [answer.media != \"\" && /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"img-answer\",\n                src: answer.media\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 72\n              }, this), Buffer(answer.answer_content, \"base64\").toString(\"utf-8\")]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 45\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 41\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => setCurrentQuest(currentQuest + 1),\n      variant: \"info\",\n      className: \"text-white text-center\",\n      children: \"Ti\\u1EBFp\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(QuizMain, \"H64bEESzmOinP1EgZmZDF/ImqQQ=\", false, function () {\n  return [useParams];\n});\n\n_c = QuizMain;\nexport default QuizMain;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuizMain\");","map":{"version":3,"sources":["D:/Coding/Quiz Generator Project/Client/online-quiz-system/src/pages/quiz-main/QuizMain.jsx"],"names":["React","useState","useEffect","useContext","useRef","axios","AuthContext","useParams","Row","Col","Container","ProgressBar","Button","Form","CountdownCircleTimer","QuizMain","id","user","questions","setQuestions","quizInfo","setQuizInfo","point","setPoint","currentQuest","setCurrentQuest","quizTime","setQuizTime","time","setTime","progressBarInterval","setProgressBarInterval","progressBarWidth","setProgressBarWidth","percentage","currentAnswersSet","setCurrentAnswersSet","shuffleArray","array","i","length","j","Math","floor","random","temp","console","log","getQuizInfo","thisQuizInfo","get","JSON","parse","request","response","parseInt","listOfQuestions","getAnswers","answers","current","setInterval","clearInterval","quiz_title","username","width","question_content","media","question_type","map","answer","Buffer","answer_content","toString"],"mappings":"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","sourcesContent":["import {React, useState, useEffect, useContext, useRef} from 'react'\r\nimport \"./quizmain.css\";\r\nimport axios from \"axios\";\r\nimport {AuthContext} from \"../../context/AuthContext\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport {Row, Col, Container, ProgressBar, Button, Form} from \"react-bootstrap\";\r\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\r\n\r\nfunction QuizMain() {\r\n    let {id} = useParams();\r\n    const {user} = useContext(AuthContext);\r\n    const [questions, setQuestions] = useState([]);\r\n    const [quizInfo, setQuizInfo] = useState([]);\r\n    const [point, setPoint] = useState(0);\r\n    const [currentQuest, setCurrentQuest] = useState(0);\r\n    const [quizTime, setQuizTime] = useState(false)\r\n    const [time, setTime] = useState(0);\r\n    const [progressBarInterval, setProgressBarInterval] = useState(0);\r\n    const [progressBarWidth, setProgressBarWidth] = useState(100);\r\n    const percentage = useRef(100);\r\n    const [currentAnswersSet, setCurrentAnswersSet] = useState([]);\r\n\r\n    const shuffleArray = (array) => {\r\n        for (var i = array.length - 1; i > 0; i--) {\r\n            var j = Math.floor(Math.random() * (i + 1));\r\n            var temp = array[i];\r\n            array[i] = array[j];\r\n            array[j] = temp;\r\n        }\r\n        return array\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log(questions);\r\n    }, [questions])\r\n\r\n    const getQuizInfo = async() => {\r\n        let thisQuizInfo = await axios.get(`/quiz/info/${id}`);\r\n        thisQuizInfo = JSON.parse(thisQuizInfo.request.response);\r\n        setQuizInfo(thisQuizInfo[0]);\r\n        setQuizTime(thisQuizInfo[0][\"quiz_time\"] != null);\r\n        console.log(thisQuizInfo[0][\"quiz_time\"] != null)\r\n        if (thisQuizInfo[0][\"quiz_time\"] != null) {\r\n            setTime(parseInt(thisQuizInfo[0][\"quiz_time\"]))\r\n        }\r\n\r\n        let listOfQuestions = await axios.get(`/quiz/join/${id}`);\r\n        listOfQuestions = JSON.parse(listOfQuestions.request.response);\r\n        if (thisQuizInfo[0][\"raw_order\"] == 0) {\r\n            listOfQuestions = await shuffleArray(listOfQuestions);\r\n        }\r\n        setQuestions(listOfQuestions);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (quizInfo.length == 0) {\r\n            getQuizInfo();\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (currentQuest != 0) {\r\n            let getAnswers = questions[currentQuest - 1].answers;\r\n            getAnswers = shuffleArray(getAnswers);\r\n            setCurrentAnswersSet(getAnswers);\r\n        }\r\n        if (currentQuest == 1) {\r\n            percentage.current = 100;\r\n            let progressBarInterval = setInterval(() => {\r\n                percentage.current = percentage.current - 1;\r\n                setProgressBarWidth(percentage.current);\r\n                if (percentage.current == 0) {\r\n                    clearInterval(progressBarInterval);\r\n                    percentage.current = 0;\r\n                }\r\n            }, time * 10);\r\n            setProgressBarInterval(progressBarInterval);\r\n        } \r\n        if (currentQuest != 0 && currentQuest != 1 && quizTime) {\r\n            percentage.current = 100;\r\n            let progressBarInterval = setInterval(() => {\r\n                percentage.current = percentage.current - 1;\r\n                setProgressBarWidth(percentage.current);\r\n                if (percentage.current == 0) {\r\n                    clearInterval(progressBarInterval);\r\n                    percentage.current = 0;\r\n                }\r\n            }, time * 10);\r\n            setProgressBarInterval(progressBarInterval);\r\n        }\r\n    }, [currentQuest])\r\n\r\n    return (\r\n        <>\r\n            {questions.length == 0 && (<p>Loading Questions</p>)}\r\n            {questions.length != 0 && (\r\n                <Container className=\"mt-3 mb-3\">\r\n                    <h1 className=\"text-center\">{quizInfo.quiz_title}</h1>\r\n                    <Row className=\"\">\r\n                        <Col lg={4} md={12} sm={12}>\r\n                            <h5 className=\"text-center\">{user.username}</h5>\r\n                        </Col>\r\n                        <Col lg={4} md={6} sm={12}>\r\n                            <h5 className=\"text-center\">Câu hỏi: {currentQuest}/{questions.length}</h5>\r\n                        </Col>\r\n                        <Col lg={4} md={6} sm={12}>\r\n                            <h5 className=\"text-center\">Điểm: {point}</h5>\r\n                        </Col>\r\n                    </Row>\r\n                    <h5 className=\"text-center\">\r\n                        Thời gian: {time}\r\n                    </h5>\r\n                    <div className=\"progress mb-2\">\r\n                        <ProgressBar \r\n                            variant=\"info\"\r\n                            striped \r\n                            now={progressBarWidth}\r\n                            style={{width: '100%'}}\r\n                        ></ProgressBar>\r\n                        \r\n                    </div>\r\n                    <div className=\"text-center\">\r\n                        \r\n                    </div>\r\n                    {currentQuest == 0 && (\r\n                        <div className=\"text-center\">\r\n                            <Button onClick={() => setCurrentQuest(1)} variant=\"info\" className=\"text-white text-center\">Bắt đầu</Button>\r\n                        </div>\r\n                    )}\r\n                    {currentQuest != 0 && \r\n                        <>\r\n                        <div className=\"question-box d-flex justify-content-center align-items-center\">\r\n                            <h5 className=\"txt-quest\">{questions[currentQuest - 1].question_content}</h5>\r\n                        </div>\r\n                        {questions[currentQuest - 1].media != \"\" && <div className=\"text-center mt-2\">\r\n                            <img className=\"img-quest\" src={questions[currentQuest - 1].media}></img>\r\n                        </div>}\r\n                        {questions[currentQuest - 1].question_type == 1 && \r\n                        <div>\r\n                            <Form.Control type=\"text\" className=\"mt-2\" placeholder=\"Câu trả lời\"></Form.Control>\r\n                        </div>}\r\n                        {questions[currentQuest - 1].question_type == 0 && \r\n                            <Row className=\"mt-2\">\r\n                                {\r\n                                    currentAnswersSet.map((answer, i) => (\r\n                                        <Col lg={6} md={6} sm={12} className=\"p-1 answer\">\r\n                                            <div className=\"answer-content text-center\" onClick={() => console.log(answer.id)}>\r\n                                                {answer.media != \"\" && <img className=\"img-answer\" src={answer.media}></img>}\r\n                                                {Buffer(answer.answer_content, \"base64\").toString(\"utf-8\")}\r\n                                            </div>\r\n                                        </Col>\r\n                                    ))\r\n                                }\r\n                            </Row>\r\n                        }\r\n                        </>\r\n                    }\r\n                </Container>\r\n            )}\r\n            <Button onClick={() => setCurrentQuest(currentQuest + 1)} variant=\"info\" className=\"text-white text-center\">Tiếp</Button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default QuizMain\r\n"]},"metadata":{},"sourceType":"module"}