{"ast":null,"code":"var _jsxFileName = \"D:\\\\Coding\\\\Quiz Generator Project\\\\Client\\\\online-quiz-system\\\\src\\\\pages\\\\quiz-main\\\\QuizMain.jsx\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect, useContext, useRef } from 'react';\nimport \"./quizmain.css\";\nimport axios from \"axios\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport { useParams } from \"react-router-dom\";\nimport { Row, Col, Container, ProgressBar, Button, Form } from \"react-bootstrap\";\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction QuizMain() {\n  _s();\n\n  let {\n    id\n  } = useParams();\n  const {\n    user\n  } = useContext(AuthContext);\n  const [questions, setQuestions] = useState([]);\n  const [quizInfo, setQuizInfo] = useState([]);\n  const [point, setPoint] = useState(0);\n  const [currentQuest, setCurrentQuest] = useState(0);\n  const [quizTime, setQuizTime] = useState(false);\n  const [time, setTime] = useState(0);\n  const [progressBarInterval, setProgressBarInterval] = useState(0);\n  const [progressBarWidth, setProgressBarWidth] = useState(100);\n  const percentage = useRef(100);\n  const timerCount = useRef(0);\n  const [currentAnswersSet, setCurrentAnswersSet] = useState([]);\n  const [timeCountDown, setTimeCountDown] = useState(\"\");\n  const [timerCountInterval, setTimerCountInterval] = useState(0);\n  const [answerFieldClass, setAnswerFieldClass] = useState(false);\n\n  const shuffleArray = array => {\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n\n    return array;\n  };\n\n  const toHHMMSS = secs => {\n    var sec_num = parseInt(secs, 10);\n    var hours = Math.floor(sec_num / 3600);\n    var minutes = Math.floor(sec_num / 60) % 60;\n    var seconds = sec_num % 60;\n    return [hours, minutes, seconds].map(v => v < 10 ? \"0\" + v : v).filter((v, i) => v !== \"00\" || i > 0).join(\":\");\n  };\n\n  const nextQuest = () => {\n    if (questions[currentQuest].question_time != null) {\n      setTime(questions[currentQuest].question_time);\n    }\n\n    setCurrentQuest(currentQuest + 1);\n  };\n\n  useEffect(() => {\n    console.log(questions);\n  }, [questions]);\n\n  const getQuizInfo = async () => {\n    let thisQuizInfo = await axios.get(`/quiz/info/${id}`);\n    thisQuizInfo = JSON.parse(thisQuizInfo.request.response);\n    setQuizInfo(thisQuizInfo[0]);\n    setQuizTime(thisQuizInfo[0][\"quiz_time\"] == null);\n\n    if (thisQuizInfo[0][\"quiz_time\"] != null) {\n      setTime(parseInt(thisQuizInfo[0][\"quiz_time\"]));\n      timerCount.current = parseInt(thisQuizInfo[0][\"quiz_time\"]);\n      setTimeCountDown(toHHMMSS(timerCount.current));\n    }\n\n    let listOfQuestions = await axios.get(`/quiz/join/${id}`);\n    listOfQuestions = JSON.parse(listOfQuestions.request.response);\n\n    if (thisQuizInfo[0][\"raw_order\"] == 0) {\n      listOfQuestions = await shuffleArray(listOfQuestions);\n    }\n\n    setQuestions(listOfQuestions);\n  };\n\n  const checkAnswerMCQ = answer_id => {};\n\n  const checkAnswerText = e => {\n    if (e.key == \"Enter\") {\n      e.preventDefault();\n    }\n  };\n\n  useEffect(() => {\n    if (quizInfo.length == 0) {\n      getQuizInfo();\n    }\n  }, []);\n  useEffect(() => {\n    setAnswerFieldClass(true);\n\n    if (currentQuest != 0) {\n      let getAnswers = questions[currentQuest - 1].answers;\n      getAnswers = shuffleArray(getAnswers);\n      setCurrentAnswersSet(getAnswers);\n    }\n\n    if (currentQuest == 1) {\n      if (quizTime && questions[currentQuest - 1].question_time != null) {\n        console.log(questions[currentQuest - 1].question_time);\n        setTime(questions[currentQuest].question_time);\n        timerCount.current = questions[currentQuest].question_time;\n        setTimeCountDown(toHHMMSS(timerCount.current));\n      }\n\n      let getTime = quizTime ? questions[currentQuest - 1].question_time : time;\n      percentage.current = 100;\n      let progressBarInterval = setInterval(() => {\n        percentage.current = percentage.current - 1;\n        setProgressBarWidth(percentage.current);\n\n        if (percentage.current == 0) {\n          clearInterval(progressBarInterval);\n          percentage.current = 0;\n        }\n      }, (getTime - 1) * 10);\n      setProgressBarInterval(progressBarInterval);\n\n      if (quizTime) {\n        timerCount.current = getTime;\n        setTimeCountDown(toHHMMSS(timerCount.current));\n      }\n\n      let timerCountInterval = setInterval(() => {\n        timerCount.current = timerCount.current - 1;\n        setTimeCountDown(toHHMMSS(timerCount.current));\n\n        if (timerCount.current == 0) {\n          clearInterval(timerCountInterval);\n          timerCount.current = 0;\n          setTimeCountDown(\"00:00\");\n          setAnswerFieldClass(true);\n        }\n      }, 1000);\n      setTimerCountInterval(timerCountInterval);\n    }\n\n    if (currentQuest != 0 && currentQuest != 1 && quizTime) {\n      let getTime = quizTime ? questions[currentQuest - 1].question_time : time;\n      percentage.current = 100;\n      let progressBarInterval = setInterval(() => {\n        percentage.current = percentage.current - 1;\n        setProgressBarWidth(percentage.current);\n\n        if (percentage.current == 0) {\n          clearInterval(progressBarInterval);\n          percentage.current = 0;\n        }\n      }, (getTime - 1) * 10);\n      setProgressBarInterval(progressBarInterval);\n\n      if (quizTime) {\n        timerCount.current = getTime;\n        setTimeCountDown(toHHMMSS(timerCount.current));\n      }\n\n      let timerCountInterval = setInterval(() => {\n        timerCount.current = timerCount.current - 1;\n        setTimeCountDown(toHHMMSS(timerCount.current));\n\n        if (timerCount.current == 0) {\n          clearInterval(timerCountInterval);\n          timerCount.current = 0;\n          setTimeCountDown(\"00:00\");\n        }\n      }, 1000);\n      setTimerCountInterval(timerCountInterval);\n    }\n  }, [currentQuest]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [questions.length == 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading Questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 40\n    }, this), questions.length != 0 && /*#__PURE__*/_jsxDEV(Container, {\n      className: \"mt-3 mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-center\",\n        children: quizInfo.quiz_title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          lg: 4,\n          md: 12,\n          sm: 12,\n          children: /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"text-center\",\n            children: user.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          lg: 4,\n          md: 6,\n          sm: 12,\n          children: /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"text-center\",\n            children: [\"C\\xE2u h\\u1ECFi: \", currentQuest, \"/\", questions.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          lg: 4,\n          md: 6,\n          sm: 12,\n          children: /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"text-center\",\n            children: [\"\\u0110i\\u1EC3m: \", point]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"text-center\",\n        children: [\"Th\\u1EDDi gian: \", timeCountDown]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 21\n      }, this), currentQuest == 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setCurrentQuest(1),\n          variant: \"info\",\n          className: \"text-white text-center\",\n          children: \"B\\u1EAFt \\u0111\\u1EA7u\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 25\n      }, this), currentQuest != 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-box d-flex justify-content-center align-items-center\",\n          children: /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"txt-quest\",\n            children: questions[currentQuest - 1].question_content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 25\n        }, this), questions[currentQuest - 1].media != \"\" && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center mt-2\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"img-quest\",\n            src: questions[currentQuest - 1].media\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 69\n        }, this), questions[currentQuest - 1].question_type == 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Form.Control, {\n            disabled: answerFieldClass,\n            type: \"text\",\n            className: \"mt-2\",\n            placeholder: \"C\\xE2u tr\\u1EA3 l\\u1EDDi\",\n            onKeyPress: e => checkAnswerText(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 25\n        }, this), questions[currentQuest - 1].question_type == 0 && /*#__PURE__*/_jsxDEV(Row, {\n          className: \"mt-2\",\n          children: currentAnswersSet.map((answer, i) => /*#__PURE__*/_jsxDEV(Col, {\n            lg: 6,\n            md: 6,\n            sm: 12,\n            className: \"p-1 answer\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"answer-content text-center\",\n              onClick: () => checkAnswerMCQ(answer.id),\n              children: [answer.media != \"\" && /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"img-answer\",\n                src: answer.media\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 233,\n                columnNumber: 72\n              }, this), Buffer(answer.answer_content, \"base64\").toString(\"utf-8\")]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 45\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 41\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => nextQuest(),\n      variant: \"info\",\n      className: \"text-white text-center\",\n      children: \"Ti\\u1EBFp\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(QuizMain, \"4RBuWiMaUBn5EN+Twn3mzSAA+YE=\", false, function () {\n  return [useParams];\n});\n\n_c = QuizMain;\nexport default QuizMain;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuizMain\");","map":{"version":3,"sources":["D:/Coding/Quiz Generator Project/Client/online-quiz-system/src/pages/quiz-main/QuizMain.jsx"],"names":["React","useState","useEffect","useContext","useRef","axios","AuthContext","useParams","Row","Col","Container","ProgressBar","Button","Form","CountdownCircleTimer","QuizMain","id","user","questions","setQuestions","quizInfo","setQuizInfo","point","setPoint","currentQuest","setCurrentQuest","quizTime","setQuizTime","time","setTime","progressBarInterval","setProgressBarInterval","progressBarWidth","setProgressBarWidth","percentage","timerCount","currentAnswersSet","setCurrentAnswersSet","timeCountDown","setTimeCountDown","timerCountInterval","setTimerCountInterval","answerFieldClass","setAnswerFieldClass","shuffleArray","array","i","length","j","Math","floor","random","temp","toHHMMSS","secs","sec_num","parseInt","hours","minutes","seconds","map","v","filter","join","nextQuest","question_time","console","log","getQuizInfo","thisQuizInfo","get","JSON","parse","request","response","current","listOfQuestions","checkAnswerMCQ","answer_id","checkAnswerText","e","key","preventDefault","getAnswers","answers","getTime","setInterval","clearInterval","quiz_title","username","question_content","media","question_type","answer","Buffer","answer_content","toString"],"mappings":"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","sourcesContent":["import {React, useState, useEffect, useContext, useRef} from 'react'\r\nimport \"./quizmain.css\";\r\nimport axios from \"axios\";\r\nimport {AuthContext} from \"../../context/AuthContext\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport {Row, Col, Container, ProgressBar, Button, Form} from \"react-bootstrap\";\r\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\r\n\r\nfunction QuizMain() {\r\n    let {id} = useParams();\r\n    const {user} = useContext(AuthContext);\r\n    const [questions, setQuestions] = useState([]);\r\n    const [quizInfo, setQuizInfo] = useState([]);\r\n    const [point, setPoint] = useState(0);\r\n    const [currentQuest, setCurrentQuest] = useState(0);\r\n    const [quizTime, setQuizTime] = useState(false)\r\n    const [time, setTime] = useState(0);\r\n    const [progressBarInterval, setProgressBarInterval] = useState(0);\r\n    const [progressBarWidth, setProgressBarWidth] = useState(100);\r\n    const percentage = useRef(100);\r\n    const timerCount = useRef(0);\r\n    const [currentAnswersSet, setCurrentAnswersSet] = useState([]);\r\n    const [timeCountDown, setTimeCountDown] = useState(\"\");\r\n    const [timerCountInterval, setTimerCountInterval] = useState(0);\r\n    const [answerFieldClass, setAnswerFieldClass] = useState(false);\r\n\r\n    const shuffleArray = (array) => {\r\n        for (var i = array.length - 1; i > 0; i--) {\r\n            var j = Math.floor(Math.random() * (i + 1));\r\n            var temp = array[i];\r\n            array[i] = array[j];\r\n            array[j] = temp;\r\n        }\r\n        return array\r\n    }\r\n\r\n    const toHHMMSS = (secs) => {\r\n        var sec_num = parseInt(secs, 10)\r\n        var hours   = Math.floor(sec_num / 3600)\r\n        var minutes = Math.floor(sec_num / 60) % 60\r\n        var seconds = sec_num % 60\r\n    \r\n        return [hours,minutes,seconds]\r\n            .map(v => v < 10 ? \"0\" + v : v)\r\n            .filter((v,i) => v !== \"00\" || i > 0)\r\n            .join(\":\")\r\n    }\r\n\r\n    const nextQuest = () => {\r\n        if (questions[currentQuest].question_time != null)\r\n        {\r\n            setTime(questions[currentQuest].question_time)\r\n        }\r\n        setCurrentQuest(currentQuest + 1)\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log(questions);\r\n    }, [questions])\r\n\r\n    const getQuizInfo = async() => {\r\n        let thisQuizInfo = await axios.get(`/quiz/info/${id}`);\r\n        thisQuizInfo = JSON.parse(thisQuizInfo.request.response);\r\n        setQuizInfo(thisQuizInfo[0]);\r\n        setQuizTime(thisQuizInfo[0][\"quiz_time\"] == null);\r\n        if (thisQuizInfo[0][\"quiz_time\"] != null) {\r\n            setTime(parseInt(thisQuizInfo[0][\"quiz_time\"]))\r\n            timerCount.current = parseInt(thisQuizInfo[0][\"quiz_time\"])\r\n            setTimeCountDown(toHHMMSS(timerCount.current));\r\n        }\r\n\r\n        let listOfQuestions = await axios.get(`/quiz/join/${id}`);\r\n        listOfQuestions = JSON.parse(listOfQuestions.request.response);\r\n        if (thisQuizInfo[0][\"raw_order\"] == 0) {\r\n            listOfQuestions = await shuffleArray(listOfQuestions);\r\n        }\r\n        setQuestions(listOfQuestions);\r\n    }\r\n\r\n    const checkAnswerMCQ = (answer_id) => {\r\n\r\n    }\r\n\r\n    const checkAnswerText = (e) => {\r\n        if (e.key == \"Enter\") {\r\n            e.preventDefault();\r\n            \r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (quizInfo.length == 0) {\r\n            getQuizInfo();\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setAnswerFieldClass(true);\r\n        if (currentQuest != 0) {\r\n            let getAnswers = questions[currentQuest - 1].answers;\r\n            getAnswers = shuffleArray(getAnswers);\r\n            setCurrentAnswersSet(getAnswers);\r\n        }\r\n        if (currentQuest == 1) {\r\n            if (quizTime && questions[currentQuest - 1].question_time != null)\r\n            {\r\n                console.log(questions[currentQuest - 1].question_time)\r\n                setTime(questions[currentQuest].question_time)\r\n                timerCount.current = questions[currentQuest].question_time;\r\n                setTimeCountDown(toHHMMSS(timerCount.current));\r\n            }\r\n\r\n            let getTime = quizTime? questions[currentQuest - 1].question_time : time;\r\n\r\n            percentage.current = 100;\r\n            let progressBarInterval = setInterval(() => {\r\n                percentage.current = percentage.current - 1;\r\n                setProgressBarWidth(percentage.current);\r\n                if (percentage.current == 0) {\r\n                    clearInterval(progressBarInterval);\r\n                    percentage.current = 0;\r\n                }\r\n            }, (getTime - 1) * 10);\r\n            setProgressBarInterval(progressBarInterval);\r\n\r\n            if (quizTime)\r\n            {\r\n                timerCount.current = getTime;\r\n                setTimeCountDown(toHHMMSS(timerCount.current));\r\n            }\r\n            let timerCountInterval = setInterval(() => {\r\n                timerCount.current = timerCount.current - 1;\r\n                setTimeCountDown(toHHMMSS(timerCount.current));\r\n                if (timerCount.current == 0) {\r\n                    clearInterval(timerCountInterval);\r\n                    timerCount.current = 0;\r\n                    setTimeCountDown(\"00:00\");\r\n                    setAnswerFieldClass(true);\r\n                }\r\n            }, 1000);\r\n            setTimerCountInterval(timerCountInterval);\r\n        } \r\n        if (currentQuest != 0 && currentQuest != 1 && quizTime) {\r\n            let getTime = quizTime? questions[currentQuest - 1].question_time : time;\r\n\r\n            percentage.current = 100;\r\n            let progressBarInterval = setInterval(() => {\r\n                percentage.current = percentage.current - 1;\r\n                setProgressBarWidth(percentage.current);\r\n                if (percentage.current == 0) {\r\n                    clearInterval(progressBarInterval);\r\n                    percentage.current = 0;\r\n                }\r\n            }, (getTime - 1) * 10);\r\n            setProgressBarInterval(progressBarInterval);\r\n\r\n            if (quizTime)\r\n            {\r\n                timerCount.current = getTime;\r\n                setTimeCountDown(toHHMMSS(timerCount.current));\r\n            }\r\n            let timerCountInterval = setInterval(() => {\r\n                timerCount.current = timerCount.current - 1;\r\n                setTimeCountDown(toHHMMSS(timerCount.current));\r\n                if (timerCount.current == 0) {\r\n                    clearInterval(timerCountInterval);\r\n                    timerCount.current = 0;\r\n                    setTimeCountDown(\"00:00\");\r\n                }\r\n            }, 1000);\r\n            setTimerCountInterval(timerCountInterval);\r\n        }\r\n    }, [currentQuest])\r\n\r\n    return (\r\n        <>\r\n            {questions.length == 0 && (<p>Loading Questions</p>)}\r\n            {questions.length != 0 && (\r\n                <Container className=\"mt-3 mb-3\">\r\n                    <h1 className=\"text-center\">{quizInfo.quiz_title}</h1>\r\n                    <Row className=\"\">\r\n                        <Col lg={4} md={12} sm={12}>\r\n                            <h5 className=\"text-center\">{user.username}</h5>\r\n                        </Col>\r\n                        <Col lg={4} md={6} sm={12}>\r\n                            <h5 className=\"text-center\">Câu hỏi: {currentQuest}/{questions.length}</h5>\r\n                        </Col>\r\n                        <Col lg={4} md={6} sm={12}>\r\n                            <h5 className=\"text-center\">Điểm: {point}</h5>\r\n                        </Col>\r\n                    </Row>\r\n                    <h5 className=\"text-center\">\r\n                        Thời gian: {timeCountDown}\r\n                    </h5>\r\n                    {/* <div className=\"progress mb-2\">\r\n                        <ProgressBar \r\n                            variant=\"info\"\r\n                            striped \r\n                            now={progressBarWidth}\r\n                            style={{width: '100%'}}\r\n                        ></ProgressBar>\r\n                        \r\n                    </div> */}\r\n                    <div className=\"text-center\">\r\n                        \r\n                    </div>\r\n                    {currentQuest == 0 && (\r\n                        <div className=\"text-center\">\r\n                            <Button onClick={() => setCurrentQuest(1)} variant=\"info\" className=\"text-white text-center\">Bắt đầu</Button>\r\n                        </div>\r\n                    )}\r\n                    {currentQuest != 0 && \r\n                        <>\r\n                        <div className=\"question-box d-flex justify-content-center align-items-center\">\r\n                            <h5 className=\"txt-quest\">{questions[currentQuest - 1].question_content}</h5>\r\n                        </div>\r\n                        {questions[currentQuest - 1].media != \"\" && <div className=\"text-center mt-2\">\r\n                            <img className=\"img-quest\" src={questions[currentQuest - 1].media}></img>\r\n                        </div>}\r\n                        {questions[currentQuest - 1].question_type == 1 && \r\n                        <div>\r\n                            <Form.Control disabled={answerFieldClass} type=\"text\" className=\"mt-2\" placeholder=\"Câu trả lời\" onKeyPress={(e) => checkAnswerText(e)}>\r\n                            </Form.Control>\r\n                        </div>}\r\n                        {questions[currentQuest - 1].question_type == 0 && \r\n                            <Row className=\"mt-2\">\r\n                                {\r\n                                    currentAnswersSet.map((answer, i) => (\r\n                                        <Col lg={6} md={6} sm={12} className=\"p-1 answer\">\r\n                                            <div className=\"answer-content text-center\" onClick={() => checkAnswerMCQ(answer.id)}>\r\n                                                {answer.media != \"\" && <img className=\"img-answer\" src={answer.media}></img>}\r\n                                                {Buffer(answer.answer_content, \"base64\").toString(\"utf-8\")}\r\n                                            </div>\r\n                                        </Col>\r\n                                    ))\r\n                                }\r\n                            </Row>\r\n                        }\r\n                        </>\r\n                    }\r\n                </Container>\r\n            )}\r\n            <Button onClick={() => nextQuest()} variant=\"info\" className=\"text-white text-center\">Tiếp</Button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default QuizMain\r\n"]},"metadata":{},"sourceType":"module"}