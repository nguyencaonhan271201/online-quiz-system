[{"D:\\Coding\\Quiz Generator Project\\Client\\online-quiz-system\\src\\index.js":"1","D:\\Coding\\Quiz Generator Project\\Client\\online-quiz-system\\src\\App.js":"2","D:\\Coding\\Quiz Generator Project\\Client\\online-quiz-system\\src\\pages\\auth\\Auth.jsx":"3","D:\\Coding\\Quiz Generator Project\\Client\\online-quiz-system\\src\\apiCalls.js":"4","D:\\Coding\\Quiz Generator Project\\Client\\online-quiz-system\\src\\context\\AuthContext.js":"5","D:\\Coding\\Quiz Generator Project\\Client\\online-quiz-system\\src\\context\\AuthReducer.js":"6","D:\\Coding\\Quiz Generator Project\\Client\\online-quiz-system\\src\\pages\\home\\Home.jsx":"7","D:\\Coding\\Quiz Generator Project\\Client\\online-quiz-system\\src\\pages\\quiz-create\\QuizCreate.jsx":"8","D:\\Coding\\Quiz Generator Project\\Client\\online-quiz-system\\src\\components\\question-add-modal\\QuestionAddModal.jsx":"9","D:\\Coding\\Quiz Generator Project\\Client\\online-quiz-system\\src\\firebase.js":"10","D:\\Coding\\Quiz Generator Project\\Client\\online-quiz-system\\src\\components\\question-edit-modal\\QuestionEditModal.jsx":"11","D:\\Coding\\Quiz Generator Project\\Client\\online-quiz-system\\src\\pages\\quiz-main\\QuizMain.jsx":"12","D:\\Coding\\Quiz Generator Project\\Client\\online-quiz-system\\src\\components\\quiz-review\\QuizReview.jsx":"13"},{"size":324,"mtime":1627457880127,"results":"14","hashOfConfig":"15"},{"size":818,"mtime":1630417022575,"results":"16","hashOfConfig":"15"},{"size":11142,"mtime":1627221362742,"results":"17","hashOfConfig":"15"},{"size":364,"mtime":1627142021878,"results":"18","hashOfConfig":"15"},{"size":720,"mtime":1627740211587,"results":"19","hashOfConfig":"15"},{"size":659,"mtime":1627139889414,"results":"20","hashOfConfig":"15"},{"size":7469,"mtime":1630502846659,"results":"21","hashOfConfig":"15"},{"size":17388,"mtime":1630420845073,"results":"22","hashOfConfig":"15"},{"size":19715,"mtime":1627825974726,"results":"23","hashOfConfig":"15"},{"size":474,"mtime":1627569937289,"results":"24","hashOfConfig":"15"},{"size":23280,"mtime":1627827091959,"results":"25","hashOfConfig":"15"},{"size":29326,"mtime":1630481599903,"results":"26","hashOfConfig":"15"},{"size":887,"mtime":1630481624583,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1rxnl4i",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":45,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"30"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"30"},"D:\\Coding\\Quiz Generator Project\\Client\\online-quiz-system\\src\\index.js",[],["62","63"],"D:\\Coding\\Quiz Generator Project\\Client\\online-quiz-system\\src\\App.js",[],"D:\\Coding\\Quiz Generator Project\\Client\\online-quiz-system\\src\\pages\\auth\\Auth.jsx",["64","65","66","67","68"],"import React from 'react';\r\nimport {useState, useRef, useContext} from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\"\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Dialog, DialogTitle, DialogContent, makeStyles } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport \"./auth.css\";\r\nimport axios from \"axios\";\r\nimport {loginCall} from \"../../apiCalls\";\r\nimport {AuthContext} from \"../../context/AuthContext\";\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            {'Copyright © '}\r\n            <Link color=\"inherit\" href=\"https://personal-site-a0cc2.firebaseapp.com/\">\r\n            Nguyen Cao Nhan\r\n            </Link>{' '}\r\n            {new Date().getFullYear()}\r\n            {'.'}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100vh',\r\n    },\r\n    image: {\r\n        backgroundImage: 'url(https://images-na.ssl-images-amazon.com/images/I/71k5kfdB9KL.png)',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundColor:\r\n        theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\r\n        backgroundSize: 'cover',\r\n        backgroundPosition: 'center',\r\n    },\r\n    paper: {\r\n        margin: theme.spacing(8, 4),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    dialogWrapper: {\r\n        padding: theme.spacing(2),\r\n        position: 'absolute',\r\n        top: theme.spacing(5)\r\n    },\r\n    dialogTitle: {\r\n        paddingRight: '0px'\r\n    }\r\n}));\r\n\r\nexport default function Auth() {\r\n    const classes = useStyles();\r\n    const [openPopup, setOpenPopup ] = React.useState(false);\r\n    const [loginError, setLoginError] = React.useState(\"\");\r\n    const [registerError, setRegisterError] = React.useState(\"\");\r\n    const {dispatch} = useContext(AuthContext);\r\n    \r\n    //Login refs\r\n    const username = useRef();\r\n    const password = useRef();\r\n    \r\n    //Register refs\r\n    const usernameCreate = useRef();\r\n    const fullnameCreate = useRef();\r\n    const passwordCreate = useRef();\r\n    const passwordConfirm = useRef();\r\n\r\n    const handleLogin = async(e) => {\r\n        e.preventDefault();\r\n        loginCall({username: username.current.value, password: password.current.value}, dispatch);\r\n    }\r\n\r\n    const handleRegister = async(e) => {\r\n        e.preventDefault();\r\n        if (passwordConfirm.current.value !== passwordCreate.current.value) {\r\n            setRegisterError(\"Xác nhận mật khẩu không đúng\");\r\n        } else {\r\n            const user = {\r\n                username: usernameCreate.current.value,\r\n                fullname: fullnameCreate.current.value,\r\n                password: passwordCreate.current.value\r\n            }\r\n            try {\r\n                await axios.post(\"/auth/register\", user);\r\n                //Perform login\r\n                loginCall({username: usernameCreate.current.value, password: passwordCreate.current.value}, dispatch);\r\n            } catch (err) {\r\n                console.log(err);\r\n                setRegisterError(\"Có lỗi xảy ra, vui lòng thử lại sau!\");\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container component=\"main\" className={classes.root}>\r\n                <CssBaseline />\r\n                <Grid item xs={false} sm={4} md={7} className={classes.image} />\r\n                <Grid item xs={12} sm={8} md={5} component={Paper} elevation={12} square style={{display: \"flex\", alignItems: \"center\"}}>\r\n                    <div className={classes.paper} style={{width: \"100%\"}}>\r\n                        <Avatar className={classes.avatar}>\r\n                            <LockOutlinedIcon />\r\n                        </Avatar>\r\n                        <Typography component=\"h1\" variant=\"h5\">\r\n                            Đăng nhập\r\n                        </Typography>\r\n                        <form onSubmit={handleLogin} className={classes.form}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"username\"\r\n                                label=\"Tên đăng nhập\"\r\n                                name=\"username\"\r\n                                autoFocus\r\n                                inputRef={username}\r\n                            />\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"password\"\r\n                                label=\"Mật khẩu\"\r\n                                name=\"password\"\r\n                                type=\"password\"\r\n                                inputRef={password}\r\n                            />\r\n                            <p style={{margin: 0, padding: 0, color: \"red\", fontStyle: \"italic\"}}>{loginError}</p>\r\n                            <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                            >\r\n                            Đăng nhập\r\n                            </Button>\r\n                            <Grid container>\r\n                            <Grid item xs>\r\n                                <Link href=\"#\" variant=\"body2\">\r\n                                    Quên mật khẩu?\r\n                                </Link>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Link href=\"#\" onClick={() => setOpenPopup(true)}>\r\n                                    Tạo tài khoản\r\n                                </Link>\r\n                            </Grid>\r\n                            </Grid>\r\n                            <Box mt={5}>\r\n                            <Copyright />\r\n                            </Box>\r\n                        </form>\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n            <Dialog open={openPopup} maxWidth=\"sm\" fullWidth=\"true\" classes={{ paper: classes.dialogWrapper }}>\r\n                <DialogTitle className={classes.dialogTitle}>\r\n                    <div style={{ display: 'flex' }}>\r\n                        <Typography variant=\"h6\" component=\"div\" style={{ flexGrow: 1 }}>\r\n                            Đăng ký\r\n                        </Typography>\r\n                        <Button\r\n                            color=\"primary\"\r\n                            onClick={()=>{setOpenPopup(false)}}>\r\n                            <CloseIcon />\r\n                        </Button>\r\n                    </div>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <form onSubmit={handleRegister} className={classes.form}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"username-create\"\r\n                            label=\"Tên đăng nhập\"\r\n                            name=\"username-create\"\r\n                            inputProps={{ minLength: 6 }}\r\n                            inputRef={usernameCreate}\r\n                        />\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"fullname\"\r\n                            label=\"Tên đầy đủ\"\r\n                            name=\"fullname\"\r\n                            type=\"text\"\r\n                            inputRef={fullnameCreate}\r\n                        />\r\n                        <Grid container>\r\n                            <Grid item md={6} xs={12} className=\"leftSubGrid\">\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"password-create\"\r\n                                    label=\"Mật khẩu\"\r\n                                    name=\"password-create\"\r\n                                    type=\"password\"\r\n                                    inputProps={{ minLength: 6 }}\r\n                                    inputRef={passwordCreate}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={6} xs={12} className=\"rightSubGrid\">\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"password-confirm\"\r\n                                    label=\"Xác nhận mật khẩu\"\r\n                                    name=\"password-confirm\"\r\n                                    type=\"password\"\r\n                                    inputRef={passwordConfirm}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <p style={{margin: 0, padding: 0, color: \"red\", fontStyle: \"italic\"}}>{registerError}</p>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            className={classes.submit}>\r\n                                Đăng ký tài khoản\r\n                        </Button>\r\n                    </form>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n","D:\\Coding\\Quiz Generator Project\\Client\\online-quiz-system\\src\\apiCalls.js",[],"D:\\Coding\\Quiz Generator Project\\Client\\online-quiz-system\\src\\context\\AuthContext.js",["69"],"import { createContext, useReducer, useEffect } from \"react\";\r\nimport AuthReducer from \"./AuthReducer\";\r\n\r\nconst INITIAL_STATE = {\r\n    user: {\r\n        username: \"ncn2k1\",\r\n        password: \"123456\",\r\n        id: 1\r\n    },\r\n    isFetching: false,\r\n    error: false\r\n}\r\n\r\nexport const AuthContext = createContext(INITIAL_STATE);\r\nexport const AuthContextProvider = ({children}) => {\r\n    const [state, dispatch] = useReducer(AuthReducer, INITIAL_STATE);\r\n\r\n    return (\r\n        <AuthContext.Provider value = {{\r\n            user: state.user, \r\n            isFetching: state.isFetching, \r\n            error: state.error,\r\n            dispatch,\r\n        }}>\r\n        {children}\r\n        </AuthContext.Provider>\r\n    )\r\n}","D:\\Coding\\Quiz Generator Project\\Client\\online-quiz-system\\src\\context\\AuthReducer.js",[],"D:\\Coding\\Quiz Generator Project\\Client\\online-quiz-system\\src\\pages\\home\\Home.jsx",["70","71","72","73","74","75","76","77"],"D:\\Coding\\Quiz Generator Project\\Client\\online-quiz-system\\src\\pages\\quiz-create\\QuizCreate.jsx",["78","79"],"import \"./quizcreate.css\";\r\nimport {React, useState, useEffect, useContext, useRef} from 'react'\r\nimport QuestionAddModal from \"./../../components/question-add-modal/QuestionAddModal\";\r\nimport QuestionEditModal from \"./../../components/question-edit-modal/QuestionEditModal\";\r\nimport {AuthContext} from \"../../context/AuthContext\";\r\nimport axios from \"axios\";\r\nimport {Paper, Chip} from \"@material-ui/core\";\r\n\r\n//Bootstrap\r\nimport {Container, Col, Row, Form, Button, Modal} from \"react-bootstrap\";\r\n\r\n//Material UI icons\r\nimport {Add} from \"@material-ui/icons\";  \r\n\r\nexport default function QuizCreate() {\r\n    const {user} = useContext(AuthContext);\r\n    const [quizTitle, setQuizTitle] = useState(\"\");\r\n    const [quizCode, setQuizCode] = useState(\"\");\r\n    const [quizMode, setQuizMode] = useState(0);\r\n    const [quizTime, setQuizTime] = useState(\"\");\r\n    const [numberOfQuest, setNumberOfQuest] = useState(0)\r\n    const [useQuizTime, setUseQuizTime] = useState(false);\r\n    const [questionList, setQuestionList] = useState([]);\r\n    const [addQuestionModalShow, setAddQuestionModalShow] = useState(false);\r\n    const [submittedQuizDetails, setSubmittedQuizDetails] = useState(false);\r\n    const [quizDetailError, setQuizDetailError] = useState(\"\");\r\n    const [timeUnit, setTimeUnit] = useState(0);\r\n    const [editQuestionModalShow, setEditQuestionModalShow] = useState(false);\r\n    const [questionEditGet, setQuestionEditGet] = useState(null);\r\n    const [rawOrder, setRawOrder] = useState(false);\r\n    const [errorModalShowing, setErrorModalShowing] = useState(false);\r\n    const [error, setError] = useState(\"\");\r\n\r\n    const onQuizModeChange = (type) => {\r\n        setQuizMode(type);\r\n    }\r\n\r\n    const onAddQuestionSubmit = (input) => {\r\n        setQuestionList([...questionList, input]);\r\n        setAddQuestionModalShow(false);\r\n    }\r\n\r\n    const onEditQuestionSubmit = (input) => {\r\n        let cloneArray = [...questionList];\r\n        let {questIndex, ...content} = input;\r\n        cloneArray[input[\"questIndex\"]] = content;\r\n        setQuestionList(cloneArray);\r\n        setEditQuestionModalShow(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setNumberOfQuest(questionList.length);\r\n    }, [questionList])\r\n\r\n    const submitQuizDetails = () => {\r\n        //Validate info\r\n        if (quizTitle === \"\") {\r\n            setQuizDetailError(\"Vui lòng nhập tiêu đề Quiz.\");\r\n            return;\r\n        }\r\n        if (quizMode === 1 && quizCode === \"\") {\r\n            setQuizDetailError(\"Vui lòng nhập mật khẩu Quiz.\");\r\n            return;\r\n        }\r\n        if (useQuizTime && isNaN(parseInt(quizTime))) {\r\n            setQuizDetailError(\"Thời gian quiz không hợp lệ.\");\r\n            return;\r\n        }\r\n\r\n        //Pass validation\r\n        setSubmittedQuizDetails(true);\r\n    }\r\n\r\n    const editQuestion = (index) => {\r\n        let getQuest = questionList[index];\r\n        getQuest[\"questIndex\"] = index;\r\n        setQuestionEditGet(getQuest);\r\n        setEditQuestionModalShow(true);\r\n    }\r\n\r\n    const addQuiz = async() => {\r\n        const newQuiz = {\r\n            quiz_title: quizTitle, \r\n            quiz_mode: quizMode,\r\n            quiz_creator: user.id,\r\n            raw_order: rawOrder\r\n        }\r\n\r\n        let cloneQuestionList = [...questionList];\r\n        for (let i = 0; i < cloneQuestionList.length; i++) {\r\n            cloneQuestionList[i][\"questIndex\"] = i;\r\n        }\r\n\r\n        //Quiz code\r\n        if (quizCode !== \"\")\r\n            newQuiz[\"quiz_code\"] = quizCode;\r\n\r\n        //Quiz time\r\n        if (useQuizTime)\r\n        {\r\n            newQuiz[\"quiz_time\"] = timeUnit == 0? quizTime * 60 : quizTime;\r\n        }\r\n\r\n        newQuiz[\"questions\"] = cloneQuestionList;\r\n\r\n        axios.post(\"/quiz/create\", newQuiz)\r\n        .then(res => {\r\n            //Do nothing\r\n        })\r\n        .catch(err => {\r\n            if (err.response.status === 403) {\r\n                setError(\"Mã trận đã tồn tại. Vui lòng sử dụng mã khác\");\r\n                setErrorModalShowing(true);\r\n            } else if (err.response.status === 500) {\r\n                setError(\"Đã có lỗi xảy ra. Vui lòng thử lại sau\");\r\n                setErrorModalShowing(true);\r\n            }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Container className=\"p-4\">\r\n                <h1 className=\"text-center\">Tạo Quiz</h1>\r\n\r\n                <Row>\r\n                    <Col md={8} sm={12} className=\"offset-md-2 offset-sm-0\">\r\n                        <Form id=\"quizDetailForm\">\r\n                            <fieldset disabled={submittedQuizDetails? \"disabled\" : \"\"}>\r\n                                <Form.Group className=\"mb-2\" controlId=\"formBasicEmail\">\r\n                                    <Form.Label>Tiêu đề</Form.Label>\r\n                                    <Form.Control type=\"text\" required validate=\"Quiz name is not valid!\"\r\n                                    onChange={(e) => setQuizTitle(e.target.value)}/>\r\n                                </Form.Group>\r\n                                <fieldset>\r\n                                    <Form.Group as={Row} className=\"mb-2\">\r\n                                    <Form.Label as=\"legend\" column sm={12}>\r\n                                        Chế độ:\r\n                                    </Form.Label>\r\n                                    <Col sm={12}>\r\n                                        <Form.Check\r\n                                            type=\"radio\"\r\n                                            label=\"Công khai\"\r\n                                            name=\"quiz-mode\"\r\n                                            checked={quizMode === 0}\r\n                                            onChange={() => onQuizModeChange(0)}\r\n                                        />\r\n                                        <Form.Check\r\n                                            type=\"radio\"\r\n                                            label=\"Riêng tư\"\r\n                                            name=\"quiz-mode\"\r\n                                            checked={quizMode === 1}\r\n                                            onChange={() => onQuizModeChange(1)}\r\n                                        />\r\n                                    </Col>\r\n                                    </Form.Group>\r\n                                </fieldset>\r\n                                <Form.Group className=\"mb-2\" controlId=\"formBasicEmail\">\r\n                                    <Form.Label>Mật khẩu</Form.Label>\r\n                                    <Form.Control \r\n                                        type=\"text\"\r\n                                        validate=\"Quiz password is not valid!\" \r\n                                        minLength={6} maxLength={10}\r\n                                        disabled = {quizMode === 0 && \"disabled\"}\r\n                                        onChange = {(e) => setQuizCode(e.target.value)}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group className=\"mb-2\" controlId=\"formBasicEmail\">\r\n                                    <Form.Check \r\n                                        label=\"Thời gian\" \r\n                                        onChange = {() => setUseQuizTime(!useQuizTime)} \r\n                                    />\r\n                                    <Form.Text muted>\r\n                                        Lựa chọn và nhập thời gian làm bài cho toàn bộ quiz hoặc không lựa chọn và đặt thời gian riêng lẻ cho từng câu hỏi.\r\n                                    </Form.Text>\r\n                                    <Row>\r\n                                        <Col sm={9}>\r\n                                            <Form.Control \r\n                                                type=\"number\"\r\n                                                min = {1}\r\n                                                validate=\"Quiz password is not valid!\" \r\n                                                disabled = {!useQuizTime && \"disabled\"}\r\n                                                onChange = {(e) => {setQuizTime(e.target.value)}}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col sm={3} className=\"d-flex align-items-center\">\r\n                                            <Form.Check \r\n                                                type=\"radio\"\r\n                                                inline\r\n                                                label=\"phút\" \r\n                                                name=\"time-mode\"\r\n                                                disabled = {!useQuizTime && \"disabled\"}\r\n                                                checked = {useQuizTime && timeUnit === 0}\r\n                                                onChange = {() => setTimeUnit(0)}\r\n                                            />\r\n                                            <Form.Check \r\n                                                type=\"radio\"\r\n                                                inline\r\n                                                label=\"giây\" \r\n                                                name=\"time-mode\"\r\n                                                disabled = {!useQuizTime && \"disabled\"}\r\n                                                checked = {useQuizTime && timeUnit === 1}\r\n                                                onChange = {() => setTimeUnit(1)}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Check \r\n                                        label=\"Giữ thứ tự câu hỏi\" \r\n                                        checked={rawOrder}\r\n                                        onChange={() => setRawOrder(!rawOrder)}\r\n                                    />\r\n                                    <Form.Text muted>\r\n                                        Nếu không chọn, câu hỏi sẽ được sắp xếp ngẫu nhiên.\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n                                {!submittedQuizDetails && (<div className=\"text-center mt-3\">\r\n                                    <p className=\"error\">{quizDetailError}</p>\r\n                                    <Button variant=\"success\" onClick={() => submitQuizDetails()}>\r\n                                        Xác nhận thông tin Quiz\r\n                                    </Button>\r\n                                </div>)}\r\n                            </fieldset>\r\n                        </Form>\r\n                        {submittedQuizDetails && (<Row className=\"mt-2\">\r\n                            <h3 className=\"text-center\">Câu hỏi</h3>\r\n                            <div className=\"text-center\">\r\n                                <Button variant=\"info\" style={{paddingLeft: 15, paddingRight: 15}} onClick={() => setAddQuestionModalShow(true)}>\r\n                                    <Add fontSize=\"small\" style={{ color: \"white\"}}></Add>\r\n                                </Button>\r\n                            </div>\r\n                            <p className=\"mt-2 text-center\" >Số lượng câu hỏi: {numberOfQuest}</p>\r\n                            {\r\n                                questionList.map((quest, index) => {\r\n                                    return ( \r\n                                        <div className=\"mt-2 mb-2 questionBox\" key={quest[\"question\"]}>\r\n                                            <p className=\"quest-title\"><b>Câu {index + 1}: </b>{quest[\"question\"]}</p>\r\n                                            {quest[\"time\"] !== 0 && <p className=\"quest-title\">Thời gian: {quest[\"time\"]} giây</p> }\r\n                                            <p className=\"quest-title\">Điểm số: {quest[\"point\"]}</p>\r\n                                            {quest[\"image\"] !== \"\" &&\r\n                                                <img className=\"question-image\" alt=\"\" src={quest[\"image\"]}></img>\r\n                                            }\r\n                                            <div className=\"quest-content\">\r\n                                                {quest[\"questionType\"] === 1 && (\r\n                                                    <>\r\n                                                        <p className=\"mb-1\">Đáp án:</p>\r\n                                                        <Paper component=\"ul\">\r\n                                                            {quest[\"keys\"][0].split(\"~>\").map((choice, index) => {\r\n                                                                return (\r\n                                                                    <li key={index}>\r\n                                                                        <Chip\r\n                                                                            label={choice}\r\n                                                                        />\r\n                                                                    </li>\r\n                                                                )\r\n                                                            })}\r\n                                                        </Paper>\r\n                                                    </>\r\n                                                )}\r\n                                                {quest[\"questionType\"] === 0 && (\r\n                                                    quest[\"keys\"].map((key, index) => {\r\n                                                        return (\r\n                                                        <>\r\n                                                        <p className={quest[\"keyCorrects\"][index]? \"correct-key\" : \"incorrect-key\"}>\r\n                                                            Phương án {index + 1}: {key}\r\n                                                        </p>\r\n                                                        {quest[\"keyImages\"][index] !== \"\" &&\r\n                                                            <div className=\"text-center\">\r\n                                                                <img className=\"key-image\" alt=\"\" src={quest[\"keyImages\"][index]}></img>\r\n                                                            </div>\r\n                                                        }\r\n                                                        </>)\r\n                                                    })\r\n                                                )}\r\n                                                {quest[\"explain\"] !== \"\" && (\r\n                                                    <p>Giải thích: {quest[\"explain\"]}</p>\r\n                                                )}\r\n                                            </div>\r\n                                            <Button className=\"mt-1\" variant=\"warning\" onClick={() => editQuestion(index)}>Chỉnh sửa</Button>\r\n                                        </div>\r\n                                     )\r\n                                })\r\n                            }\r\n                        </Row>)}\r\n                        {submittedQuizDetails && (\r\n                            <div className=\"text-center\">\r\n                                <Button variant=\"success\" onClick={() => addQuiz()}>Xác nhận</Button>\r\n                            </div>\r\n                        )}\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n\r\n            <QuestionAddModal\r\n                show={addQuestionModalShow}\r\n                onHide={() => setAddQuestionModalShow(false)}\r\n                numberOfQuest={numberOfQuest}\r\n                onAddQuestionSubmit={onAddQuestionSubmit}\r\n                useQuizTime={useQuizTime}\r\n            >\r\n\r\n            </QuestionAddModal>\r\n\r\n            {\r\n                questionEditGet && <QuestionEditModal\r\n                    show={editQuestionModalShow}\r\n                    onHide={() => setEditQuestionModalShow(false)}\r\n                    onEditQuestionSubmit={onEditQuestionSubmit}\r\n                    useQuizTime={useQuizTime}\r\n                    questionEditGet={questionEditGet}\r\n                >\r\n\r\n                </QuestionEditModal>\r\n            }\r\n\r\n            {\r\n                errorModalShowing && (<Modal\r\n                    size=\"lg\"\r\n                    aria-labelledby=\"contained-modal-title-vcenter\"\r\n                    centered\r\n                    show={errorModalShowing}\r\n                    >\r\n                    <Modal.Header>  \r\n                        Lỗi\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        {error}\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button onClick={() => setErrorModalShowing(false)}>Đóng</Button>\r\n                    </Modal.Footer>\r\n                </Modal>)\r\n            }\r\n\r\n        </div>\r\n    )\r\n}","D:\\Coding\\Quiz Generator Project\\Client\\online-quiz-system\\src\\components\\question-add-modal\\QuestionAddModal.jsx",["80","81","82","83"],"import \"./question-add-modal.css\";\r\nimport {React, useState, useEffect, useRef} from 'react'\r\nimport {Form, Button, Modal, Row, Col} from \"react-bootstrap\";\r\nimport {Cancel, PermMedia} from \"@material-ui/icons\"\r\nimport {Chip, Paper} from '@material-ui/core';\r\nimport storage from './../../firebase';\r\n\r\nfunction QuestionAddModal(props) {\r\n    const [question, setQuestion] = useState(\"\");\r\n    const [questionType, setQuestionType] = useState(0);\r\n    const [numberOfChoices, setNumberOfChoices] = useState(0);\r\n    const [numberOfChoicesError, setNumberOfChoicesError] = useState(\"\");\r\n    const [keys, setKeys] = useState([]);\r\n    const [keyCorrects, setKeyCorrects] = useState([]);\r\n    const [keyImages, setKeyImages] = useState([]);\r\n    const [keyType1Choices, setKeyType1Choices] = useState([]);\r\n    const [type1CurrentInput, setType1CurrentInput] = useState(\"\");\r\n    const [explain, setExplain] = useState(\"\");\r\n    const [file, setFile] = useState(null);\r\n    const [time, setTime] = useState(\"\");\r\n    const [point, setPoint] = useState(\"\");\r\n    const [validateError, setValidateError] = useState(\"\");\r\n    const keyImageURLs = useRef();\r\n    const imageURL = useRef();\r\n\r\n    useEffect(() => {\r\n        keyImageURLs.current = [];\r\n        imageURL.current = \"\";\r\n    }, []);\r\n\r\n    const check = () => {\r\n        //Count target\r\n        let getCount = 0;\r\n        for (let i = 0; i < keyImages.length; i++) {\r\n            if (keyImages[i])\r\n                getCount++;\r\n        }\r\n        if (file)\r\n            getCount++;\r\n\r\n        let count = 0;\r\n        if (imageURL.current !== \"\" && file)\r\n        {\r\n            count++;\r\n        }\r\n        for (let i = 0; i < keyImageURLs.current.length; i++) {\r\n            if (keyImageURLs.current[i] !== \"\")\r\n            {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        if (count === getCount && getCount > 0) {\r\n            callParentSubmit();\r\n        }\r\n    }\r\n\r\n    const handleQuestionTypeChange = (type) => {\r\n        setQuestionType(type);\r\n        setKeyType1Choices([]);\r\n        setType1CurrentInput(\"\");\r\n        if (type === 1) \r\n        {\r\n            setNumberOfChoices(1);\r\n            setNumberOfChoicesError(\"\");\r\n            setKeyCorrects([true]);\r\n            setKeys([\"\"]);\r\n            setKeyImages([\"\"]);\r\n            keyImageURLs.current = [\"\"];\r\n        } else {\r\n            setNumberOfChoices(0);\r\n            setKeyCorrects([]);\r\n            setKeys([]);\r\n            setKeyImages([]);\r\n            keyImageURLs.current = [];\r\n        }\r\n    }\r\n\r\n    const handleChoicesCountChange = (count) => {\r\n        if (count < 2 || count > 5) {\r\n            setNumberOfChoicesError(\"Số lượng phương án phải từ 2 đến 5.\");\r\n        } else {\r\n            setNumberOfChoices(count);\r\n            setNumberOfChoicesError(\"\");\r\n            let tmpKeysArr = []\r\n            let tmpKeysCorrectArr = [] \r\n            let tmpKeyImages = [];\r\n            let tmpKeyImagesURLs = [];\r\n            for (let i = 0; i < count; i++) {\r\n                tmpKeysArr.push(\"\");\r\n                tmpKeysCorrectArr.push(false);\r\n                tmpKeyImages.push(null);\r\n                tmpKeyImagesURLs.push(\"\");\r\n            }\r\n            setKeyCorrects(tmpKeysCorrectArr);\r\n            setKeys(tmpKeysArr);\r\n            setKeyImages(tmpKeyImages);\r\n            keyImageURLs.current = tmpKeyImagesURLs;\r\n        }\r\n    }\r\n\r\n    const handleCorrectKeyChange = (index) => {\r\n        let getKeyCorrectArr = [];\r\n        for (let i = 0; i < keyCorrects.length; i++) {\r\n            getKeyCorrectArr.push(false);\r\n        }\r\n        let item = getKeyCorrectArr[index];\r\n        getKeyCorrectArr[index] = !item;\r\n        setKeyCorrects(getKeyCorrectArr);\r\n    }\r\n\r\n    const handleKeyChange = (index, value) => {\r\n        let emptyArr = [];\r\n        for (let i = 0; i < keys.length; i++) {\r\n            if (i === index) {\r\n                emptyArr.push(value);\r\n            } else {\r\n                emptyArr.push(keys[i]);\r\n            }\r\n        }\r\n        setKeys(emptyArr);\r\n        setType1CurrentInput(value);\r\n    }\r\n\r\n    const handleKeyImage = (index, file) => {\r\n        let emptyArr = [];\r\n        for (let i = 0; i < keyImages.length; i++) {\r\n            if (i === index) {\r\n                emptyArr.push(file);\r\n            } else {\r\n                emptyArr.push(keyImages[i]);\r\n            }\r\n        }\r\n        setKeyImages(emptyArr);\r\n    }\r\n\r\n    const setImageNull = (i) => {\r\n        let emptyArr = [...keyImages];\r\n        emptyArr[i] = null;\r\n        setKeyImages(emptyArr);\r\n    }\r\n\r\n    const prepareFormSubmit = async(e) => {\r\n        e.preventDefault();\r\n\r\n        //Validate info\r\n        if (question === \"\") {\r\n            setValidateError(\"Vui lòng nhập nội dung câu hỏi.\");\r\n            return;\r\n        } \r\n        \r\n        if (questionType === 0) {\r\n            if (!keyCorrects.includes(true)) {\r\n                setValidateError(\"Vui lòng chọn 1 đáp án đúng.\");\r\n                return;\r\n            }\r\n            for (let i = 0; i < keys.length; i++) {\r\n                if (keys[i] === \"\" && !keyImages[i]) {\r\n                    setValidateError(\"Phương án không hợp lệ.\");\r\n                    return;\r\n                }\r\n            }\r\n        } else if (questionType === 1) {\r\n            if (keyType1Choices.length === 0) {\r\n                setValidateError(\"Vui lòng nhập ít nhất 1 đáp án cho câu hỏi.\");\r\n                return;\r\n            }\r\n        }\r\n        \r\n        if (!props.useQuizTime && isNaN(parseInt(time))) {\r\n            setValidateError(\"Thời gian trả lời không hợp lệ.\");\r\n            return;\r\n        } else if (isNaN(parseInt(point))) {\r\n            setValidateError(\"Điểm số câu không hợp lệ.\");\r\n            return;\r\n        }\r\n\r\n        let getCount = 0;\r\n        for (let i = 0; i < keyImages.length; i++) {\r\n            if (keyImages[i])\r\n                getCount++;\r\n        }\r\n        if (file)\r\n            getCount++;\r\n\r\n        //Upload to firebase and retrieve URL \r\n        if (getCount != 0) {\r\n            if (file) {\r\n                let fileName = file.name + \"-\" + Date.now();\r\n                //questions_images\r\n                storage.ref(`questions_images/${fileName}`).put(file)\r\n                .on(\"state_changed\", (snapshot) => {}, \r\n                (error) => {console.log(error)}, \r\n                () => {\r\n                    storage.ref(`questions_images/`).child(`${fileName}`).getDownloadURL()\r\n                    .then(\r\n                        (url) => {\r\n                            imageURL.current = url;\r\n                            check();\r\n                        },\r\n                        (error) => {\r\n                            console.log(error);\r\n                        }\r\n                    );\r\n                });\r\n            }\r\n\r\n            for (let i = 0; i < keyImages.length; i++) {\r\n                if (keyImages[i]) {\r\n                    let keyFileName = keyImages[i].name + \"-\" + Date.now();\r\n                    //questions_images\r\n                    storage.ref(`questions_images/${keyFileName}`).put(keyImages[i])\r\n                    .on(\"state_changed\", (snapshot) => {}, \r\n                    (error) => {console.log(error)}, \r\n                    () => {\r\n                        storage.ref(`questions_images/`).child(`${keyFileName}`).getDownloadURL()\r\n                        .then(\r\n                            (url) => {\r\n                                setImageURL(i, url);  \r\n                            },\r\n                            (error) => {\r\n                                console.log(error);\r\n                            }\r\n                        );\r\n                    });\r\n                }\r\n            }\r\n        } else {\r\n            callParentSubmit();\r\n        }\r\n    }\r\n\r\n    const setImageURL = (index, path) => {\r\n        // let arrays = [...keyImagesURLs];\r\n        // arrays[index] = path;\r\n        // setKeyImagesURLs(arrays);\r\n\r\n        let getArray = keyImageURLs.current;\r\n        getArray[index] = path;\r\n        keyImageURLs.current = getArray;\r\n        check();\r\n    }\r\n\r\n    const callParentSubmit = () => {\r\n        let output = {};\r\n        output[\"question\"] = question;\r\n        output[\"questionType\"] = questionType;\r\n        output[\"numberOfChoices\"] = numberOfChoices;\r\n        output[\"keyCorrects\"] = keyCorrects;\r\n        output[\"explain\"] = explain;\r\n        output[\"time\"] = time === \"\"? 0 : parseInt(time);\r\n        output[\"point\"] = point;\r\n        output[\"image\"] = imageURL.current;\r\n        output[\"keyImages\"] = keyImageURLs.current;\r\n\r\n        if (questionType === 0) {\r\n            output[\"keys\"] = keys;\r\n        } else {\r\n            output[\"keys\"] = [\"\"];\r\n            \r\n            for (let i = 0; i < keyType1Choices.length - 1; i++) {\r\n                output[\"keys\"][0] += keyType1Choices[i] + \"~>\";\r\n            }\r\n            output[\"keys\"][0] += keyType1Choices[keyType1Choices.length - 1];\r\n        }\r\n\r\n        //Refresh\r\n        setValidateError(\"\");\r\n        setQuestion(\"\");\r\n        setQuestionType(0);\r\n        setNumberOfChoicesError(\"\");\r\n        setNumberOfChoices(0);\r\n        setKeys([]);\r\n        setKeyCorrects([]);\r\n        setExplain(\"\");\r\n        setFile(null);\r\n        setTime(\"\");\r\n        setPoint(\"\");\r\n        keyImageURLs.current = [];\r\n        imageURL.current = \"\";\r\n        setKeyImages([]);\r\n        setKeyType1Choices([]);\r\n        setType1CurrentInput(\"\");\r\n\r\n        props.onAddQuestionSubmit(output);\r\n    }\r\n\r\n    const keyBoxKeyDown = (e) => {\r\n        if (e.key == \"Enter\") {\r\n            e.preventDefault();\r\n            setKeyType1Choices([...keyType1Choices, e.target.value]);\r\n            setType1CurrentInput(\"\");\r\n        }\r\n    }\r\n\r\n    const deleteKeyType1Choice = (index) => {\r\n        let cloneArray = [...keyType1Choices];\r\n        cloneArray.splice(index, 1);\r\n        setKeyType1Choices(cloneArray);\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n            {...props}\r\n        >\r\n            <Modal.Header>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Thêm câu hỏi (câu {props.numberOfQuest + 1})\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            <Row>\r\n                    <Col md={10} sm={12} className=\"offset-md-1 offset-sm-0\">\r\n                        <Form id=\"questionAddForm\" onSubmit={prepareFormSubmit}>\r\n                            <Form.Group className=\"\">\r\n                                <Form.Label>Câu hỏi</Form.Label>\r\n                                <Form.Control as=\"textarea\" required validate=\"Quiz name is not valid!\"\r\n                                onChange={(e) => setQuestion(e.target.value)}/>\r\n                            </Form.Group>\r\n                            <Form.Group className=\"\">\r\n                            <fieldset>\r\n                                <Form.Group as={Row} className=\"mb-3\">\r\n                                <Form.Label as=\"legend\" column sm={2}>\r\n                                    Loại:\r\n                                </Form.Label>\r\n                                <Col sm={12}>\r\n                                    <Form.Check\r\n                                        type=\"radio\"\r\n                                        label=\"Trắc nghiệm\"\r\n                                        name=\"question-type\"\r\n                                        checked={questionType === 0}\r\n                                        onChange={() => handleQuestionTypeChange(0)}\r\n                                    />\r\n                                     <Form.Check\r\n                                        type=\"radio\"\r\n                                        label=\"Trả lời ngắn\"\r\n                                        name=\"question-type\"\r\n                                        checked={questionType === 1}\r\n                                        onChange={() => handleQuestionTypeChange(1)}\r\n                                    />\r\n                                </Col>\r\n                                </Form.Group>\r\n                            </fieldset>\r\n                            </Form.Group>\r\n                            {questionType === 0 && \r\n                                (<Form.Group className=\"\">\r\n                                <Form.Label>Số phương án</Form.Label>\r\n                                <Form.Control \r\n                                    type=\"number\"\r\n                                    validate=\"Phải là giá trị từ 2 đến 5\" \r\n                                    min={2} max={5}\r\n                                    onChange={(e) => handleChoicesCountChange(e.target.value)}\r\n                                />\r\n                                <p className=\"error\">{numberOfChoicesError}</p>\r\n                                </Form.Group>)\r\n                            }\r\n                            {\r\n                                numberOfChoicesError === \"\" && (questionType === 0 && [...Array(parseInt(numberOfChoices))].map((x, i) => {\r\n                                    let getClassName = `question-${numberOfChoices}-answer`;\r\n                                    let idImageName = `file-${i}`\r\n                                    return (\r\n                                        <Form.Group className=\"mt-2\">\r\n                                            <Form.Label>Phương án {i + 1}\r\n                                            <Form.Check\r\n                                                type=\"radio\"\r\n                                                label=\"Đúng\"\r\n                                                name={getClassName}\r\n                                                onChange={() => handleCorrectKeyChange(i)}\r\n                                            />\r\n                                            </Form.Label>\r\n                                            <Form.Control type=\"text\" validate=\"Không hợp lệ!\" minLength={1}\r\n                                            onChange={(e) => handleKeyChange(i, e.target.value)}/>\r\n                                            <Form.Group className=\"mb-3 mt-3\">\r\n                                                <Form.Label>Ảnh phương án (nếu có)</Form.Label><br></br>\r\n                                                <label htmlFor={idImageName} className=\"shareOption\" style={{cursor: \"pointer\"}}>\r\n                                                    <PermMedia htmlColor=\"green\" className=\"shareIcon\"/>\r\n                                                    <Form.Control style={{display: \"none\"}} type=\"file\" id={idImageName} accept=\".png, .jpeg, .jpg\" size=\"sm\" onChange={(e) => handleKeyImage(i, e.target.files[0])}/>\r\n                                                </label>\r\n                                            </Form.Group>\r\n                                            {keyImages[i] && <div className=\"keyImgContainer\">\r\n                                                <img className=\"shareImg\" src={URL.createObjectURL(keyImages[i])} alt=\"\"/>\r\n                                                <Cancel className=\"shareCancelImg\" onClick={() => setImageNull(i)}></Cancel>\r\n                                            </div>}\r\n                                        </Form.Group>\r\n                                    )\r\n                                })) || \r\n                                (questionType === 1 && \r\n                                    <>\r\n                                    <Form.Group className=\"\">\r\n                                        <Form.Label>Đáp án</Form.Label>\r\n                                        <Form.Control type=\"text\" validate=\"Đáp án không hợp lệ!\" minLength={1}\r\n                                        value={type1CurrentInput}\r\n                                        onChange={(e) => handleKeyChange(0, e.target.value)}\r\n                                        onKeyPress={(e) => keyBoxKeyDown(e)}/>\r\n                                    </Form.Group>\r\n                                    {keyType1Choices.length > 0 && \r\n                                    <Paper component=\"ul\">\r\n                                        {keyType1Choices.map((choice, index) => {\r\n                                            return (\r\n                                                <li key={index}>\r\n                                                    <Chip\r\n                                                        label={choice}\r\n                                                        onDelete={() => deleteKeyType1Choice(index)}\r\n                                                    />\r\n                                                </li>\r\n                                            )\r\n                                        })}\r\n                                    </Paper>\r\n                                    }\r\n                                    </>\r\n                                )\r\n                            }\r\n                            <Form.Group className=\"mt-2\">\r\n                                <Form.Label>Giải thích (nếu có)</Form.Label>\r\n                                <Form.Control as=\"textarea\" validate=\"Không hợp lệ!\"\r\n                                onChange={(e) => setExplain(e.target.value)}/>\r\n                            </Form.Group>\r\n                            <Form.Group className=\"mt-2\">\r\n                                <Form.Label>Điểm số</Form.Label>\r\n                                <Form.Control type=\"number\" min={0} validate=\"Không hợp lệ!\"\r\n                                onChange={(e) => setPoint(e.target.value)}/>\r\n                            </Form.Group>\r\n                            {!props.useQuizTime && <Form.Group className=\"mb-3 mt-3\">\r\n                                <Form.Label>Thời gian trả lời (giây): </Form.Label><br></br>\r\n                                <Form.Control \r\n                                    type=\"number\"\r\n                                    min = {1}\r\n                                    onChange={(e) => setTime(e.target.value)} \r\n                                />\r\n                            </Form.Group>}\r\n                            <Form.Group className=\"mb-3 mt-3\">\r\n                                <Form.Label>Ảnh câu hỏi (nếu có)</Form.Label><br></br>\r\n                                <label htmlFor=\"file\" className=\"shareOption\" style={{cursor: \"pointer\"}}>\r\n                                    <PermMedia htmlColor=\"green\" className=\"shareIcon\"/>\r\n                                    <Form.Control style={{display: \"none\"}} type=\"file\" id=\"file\" accept=\".png, .jpeg, .jpg\" size=\"sm\" onChange={(e) => setFile(e.target.files[0])}/>\r\n                                </label>\r\n\r\n                            </Form.Group>\r\n                            </Form>\r\n                            {file && <div className=\"shareImgContainer\">\r\n                                <img className=\"shareImg\" src={URL.createObjectURL(file)} alt=\"\"/>\r\n                                <Cancel className=\"shareCancelImg\" onClick={() => setFile(null)}></Cancel>\r\n                            </div>}\r\n                    </Col>\r\n                </Row>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n            <p className=\"error\">{validateError}</p>\r\n            <Button variant=\"success\" type=\"submit\" form=\"questionAddForm\">Thêm</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default QuestionAddModal","D:\\Coding\\Quiz Generator Project\\Client\\online-quiz-system\\src\\firebase.js",[],"D:\\Coding\\Quiz Generator Project\\Client\\online-quiz-system\\src\\components\\question-edit-modal\\QuestionEditModal.jsx",["84","85","86","87","88","89","90","91","92","93","94","95","96","97","98"],"import \"./question-edit-modal.css\";\r\nimport {React, useState, useEffect, useRef} from 'react'\r\nimport {Form, Button, Modal, Row, Col} from \"react-bootstrap\";\r\nimport {Cancel, PermMedia} from \"@material-ui/icons\";\r\nimport {Chip, Paper} from '@material-ui/core';\r\nimport storage from './../../firebase';\r\n\r\nfunction QuestionEditModal(props) {\r\n    const [question, setQuestion] = useState(\"\");\r\n    const [questionType, setQuestionType] = useState(0);\r\n    const [numberOfChoices, setNumberOfChoices] = useState(0);\r\n    const [numberOfChoicesError, setNumberOfChoicesError] = useState(\"\");\r\n    const [keys, setKeys] = useState([]);\r\n    const [keyCorrects, setKeyCorrects] = useState([]);\r\n    const [keyImages, setKeyImages] = useState([]);\r\n    const [keyImageUrl, setKeyImageUrl] = useState([]);\r\n    const [keyType1Choices, setKeyType1Choices] = useState([]);\r\n    const [type1CurrentInput, setType1CurrentInput] = useState(\"\");\r\n    const [explain, setExplain] = useState(\"\");\r\n    const [file, setFile] = useState(null);\r\n    const [url, setURL] = useState(\"\"); //This only be used in case of passing a Firebase URL from QuizCreate\r\n    const [time, setTime] = useState(\"\");\r\n    const [point, setPoint] = useState(\"\");\r\n    const [validateError, setValidateError] = useState(\"\");\r\n    const keyImageURLs = useRef();\r\n    const imageURL = useRef(); \r\n    const [renderBool, setRenderBool] = useState(false);\r\n\r\n    const check = () => {\r\n        //Count target\r\n        let getCount = 0;\r\n        for (let i = 0; i < keyImages.length; i++) {\r\n            if (keyImages[i])\r\n                getCount++;\r\n        }\r\n        if (file)\r\n            getCount++;\r\n\r\n        let count = 0;\r\n        if (imageURL.current !== \"\" && file)\r\n        {\r\n            count++;\r\n        }\r\n        for (let i = 0; i < keyImageURLs.current.length; i++) {\r\n            if (keyImageURLs.current[i] !== \"\")\r\n            {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        if (count === getCount && getCount > 0) {\r\n            callParentSubmit();\r\n        }\r\n    }\r\n\r\n    const handleQuestionTypeChange = (type) => {\r\n        setQuestionType(type);\r\n        if (type === 1) \r\n        {\r\n            setNumberOfChoices(1);\r\n            setNumberOfChoicesError(\"\");\r\n            setKeyCorrects([true]);\r\n            setKeys([\"\"]);\r\n            setKeyImages([\"\"]);\r\n            setKeyImageUrl([\"\"]);\r\n            keyImageURLs.current = [\"\"];\r\n        } else {\r\n            setNumberOfChoices(0);\r\n            setKeyCorrects([]);\r\n            setKeys([]);\r\n            setKeyImages([]);\r\n            setKeyImageUrl([]);\r\n            keyImageURLs.current = [];\r\n        }\r\n    }\r\n\r\n    const handleChoicesCountChange = (count) => {\r\n        if (count < 2 || count > 5) {\r\n            setNumberOfChoicesError(\"Số lượng phương án phải từ 2 đến 5.\");\r\n        } else {\r\n            setNumberOfChoices(count);\r\n            setNumberOfChoicesError(\"\");\r\n            let tmpKeysArr = []\r\n            let tmpKeysCorrectArr = [] \r\n            let tmpKeyImages = [];\r\n            let tmpKeyImagesURLs = [];\r\n            for (let i = 0; i < count; i++) {\r\n                tmpKeysArr.push(\"\");\r\n                tmpKeysCorrectArr.push(false);\r\n                tmpKeyImages.push(null);\r\n                tmpKeyImagesURLs.push(\"\");\r\n            }\r\n            setKeyCorrects(tmpKeysCorrectArr);\r\n            setKeys(tmpKeysArr);\r\n            setKeyImages(tmpKeyImages);\r\n            setKeyImageUrl(tmpKeyImagesURLs);\r\n            keyImageURLs.current = tmpKeyImagesURLs;\r\n        }\r\n    }\r\n\r\n    const handleCorrectKeyChange = (index) => {\r\n        let getKeyCorrectArr = [];\r\n        for (let i = 0; i < keyCorrects.length; i++) {\r\n            getKeyCorrectArr.push(false);\r\n        }\r\n        let item = getKeyCorrectArr[index];\r\n        getKeyCorrectArr[index] = !item;\r\n        setKeyCorrects(getKeyCorrectArr);\r\n    }\r\n\r\n    const handleKeyChange = (index, value) => {\r\n        let emptyArr = [];\r\n        for (let i = 0; i < keys.length; i++) {\r\n            if (i === index) {\r\n                emptyArr.push(value);\r\n            } else {\r\n                emptyArr.push(keys[i]);\r\n            }\r\n        }\r\n        setKeys(emptyArr);\r\n    }\r\n\r\n    const handleKeyImage = (index, file) => {\r\n        let emptyArr = [];\r\n        for (let i = 0; i < keyImages.length; i++) {\r\n            if (i === index) {\r\n                emptyArr.push(file);\r\n            } else {\r\n                emptyArr.push(keyImages[i]);\r\n            }\r\n        }\r\n        setKeyImages(emptyArr);\r\n        console.log(keyImages);\r\n    }\r\n\r\n    const setImageNull = (i) => {\r\n        let emptyArr = [...keyImages];\r\n        emptyArr[i] = null;\r\n        let emptyArr1 = [...keyImageUrl];\r\n        emptyArr1[i] = \"\";\r\n        setKeyImages(emptyArr);\r\n        setKeyImageUrl(emptyArr1);\r\n    }\r\n\r\n    const prepareFormSubmit = async(e) => {\r\n        e.preventDefault();\r\n        console.log(keys);\r\n\r\n        //Validate info\r\n        if (question === \"\") {\r\n            setValidateError(\"Vui lòng nhập nội dung câu hỏi.\");\r\n            return;\r\n        } \r\n        \r\n        if (questionType === 0) {\r\n            if (!keyCorrects.includes(true)) {\r\n                setValidateError(\"Vui lòng chọn 1 đáp án đúng.\");\r\n                return;\r\n            }\r\n            for (let i = 0; i < keys.length; i++) {\r\n                if (keys[i] === \"\" && !keyImages[i]) {\r\n                    setValidateError(\"Phương án không hợp lệ.\");\r\n                    return;\r\n                }\r\n            }\r\n        } else if (questionType === 1) {\r\n            if (keyType1Choices.length === 0) {\r\n                setValidateError(\"Vui lòng nhập ít nhất 1 đáp án cho câu hỏi.\");\r\n                return;\r\n            }\r\n        }\r\n        \r\n        if (!props.useQuizTime && isNaN(parseInt(time))) {\r\n            setValidateError(\"Thời gian trả lời không hợp lệ.\");\r\n            return;\r\n        } else if (isNaN(parseInt(point))) {\r\n            setValidateError(\"Điểm số câu không hợp lệ.\");\r\n            return;\r\n        }\r\n\r\n        let getCount = 0;\r\n        for (let i = 0; i < keyImages.length; i++) {\r\n            if (keyImages[i])\r\n                getCount++;\r\n        }\r\n        if (file)\r\n            getCount++;\r\n\r\n        //Upload to firebase and retrieve URL \r\n        if (getCount != 0) {\r\n            if (file) {\r\n                let fileName = file.name + \"-\" + Date.now();\r\n                //questions_images\r\n                storage.ref(`questions_images/${fileName}`).put(file)\r\n                .on(\"state_changed\", (snapshot) => {}, \r\n                (error) => {console.log(error)}, \r\n                () => {\r\n                    storage.ref(`questions_images/`).child(`${fileName}`).getDownloadURL()\r\n                    .then(\r\n                        (url) => {\r\n                            imageURL.current = url;\r\n                            check();\r\n                        },\r\n                        (error) => {\r\n                            console.log(error);\r\n                        }\r\n                    );\r\n                });\r\n            }\r\n\r\n            for (let i = 0; i < keyImages.length; i++) {\r\n                if (keyImages[i]) {\r\n                    let keyFileName = keyImages[i].name + \"-\" + Date.now();\r\n                    //questions_images\r\n                    storage.ref(`questions_images/${keyFileName}`).put(keyImages[i])\r\n                    .on(\"state_changed\", (snapshot) => {}, \r\n                    (error) => {console.log(error)}, \r\n                    () => {\r\n                        storage.ref(`questions_images/`).child(`${keyFileName}`).getDownloadURL()\r\n                        .then(\r\n                            (url) => {\r\n                                setImageURL(i, url);  \r\n                            },\r\n                            (error) => {\r\n                                console.log(error);\r\n                            }\r\n                        );\r\n                    });\r\n                }\r\n            }\r\n        } else {\r\n            callParentSubmit();\r\n        }\r\n    }\r\n\r\n    const setImageURL = (index, path) => {\r\n        // let arrays = [...keyImagesURLs];\r\n        // arrays[index] = path;\r\n        // setKeyImagesURLs(arrays);\r\n\r\n        let getArray = keyImageURLs.current;\r\n        getArray[index] = path;\r\n        keyImageURLs.current = getArray;\r\n        check();\r\n    }\r\n\r\n    const callParentSubmit = () => {\r\n        let output = {};\r\n        output[\"question\"] = question;\r\n        output[\"questionType\"] = questionType;\r\n        output[\"numberOfChoices\"] = numberOfChoices;\r\n        output[\"keyCorrects\"] = keyCorrects;\r\n        output[\"explain\"] = explain;\r\n        output[\"time\"] = time === \"\"? 0 : parseInt(time);\r\n        output[\"point\"] = point;\r\n        output[\"image\"] = imageURL.current;\r\n        output[\"keyImages\"] = keyImageURLs.current;\r\n        output[\"questIndex\"] = props.questionEditGet[\"questIndex\"];\r\n\r\n        if (questionType === 0) {\r\n            output[\"keys\"] = keys;\r\n        } else {\r\n            output[\"keys\"] = [\"\"];\r\n            \r\n            for (let i = 0; i < keyType1Choices.length - 1; i++) {\r\n                output[\"keys\"][0] += keyType1Choices[i] + \"~>\";\r\n            }\r\n            output[\"keys\"][0] += keyType1Choices[keyType1Choices.length - 1];\r\n        }\r\n\r\n        //Refresh\r\n        setValidateError(\"\");\r\n        setQuestion(\"\");\r\n        setQuestionType(0);\r\n        setNumberOfChoicesError(\"\");\r\n        setNumberOfChoices(0);\r\n        setKeys([]);\r\n        setKeyCorrects([]);\r\n        setExplain(\"\");\r\n        setFile(null);\r\n        setTime(\"\");\r\n        setPoint(\"\");\r\n        keyImageURLs.current = [];\r\n        imageURL.current = \"\";\r\n        setKeyImages([]);\r\n        setKeyImageUrl([]);\r\n        setKeyType1Choices([]);\r\n        setType1CurrentInput(\"\");\r\n\r\n        props.onEditQuestionSubmit(output);\r\n    }\r\n\r\n    const keyBoxKeyDown = (e) => {\r\n        if (e.key == \"Enter\") {\r\n            e.preventDefault();\r\n            setKeyType1Choices([...keyType1Choices, e.target.value]);\r\n            setType1CurrentInput(\"\");\r\n        }\r\n    }\r\n\r\n    const deleteKeyType1Choice = (index) => {\r\n        let cloneArray = [...keyType1Choices];\r\n        cloneArray.splice(index, 1);\r\n        setKeyType1Choices(cloneArray);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (props.questionEditGet) {\r\n            setQuestion(props.questionEditGet[\"question\"]);\r\n            setQuestionType(props.questionEditGet[\"questionType\"]);\r\n            setNumberOfChoices(props.questionEditGet[\"keys\"].length);\r\n            setKeys(props.questionEditGet[\"keys\"]);\r\n            setKeyCorrects(props.questionEditGet[\"keyCorrects\"]);\r\n            setTime(props.questionEditGet[\"time\"]);\r\n            setExplain(props.questionEditGet[\"explain\"]);\r\n            setURL(props.questionEditGet[\"image\"]);\r\n            keyImageURLs.current = [];\r\n            imageURL.current = \"\";\r\n            setPoint(props.questionEditGet[\"point\"]);\r\n            setKeyImageUrl(props.questionEditGet[\"keyImages\"]);\r\n            setType1CurrentInput(\"\");\r\n            if (props.questionEditGet[\"questionType\"] === 1) {\r\n                setKeyType1Choices(props.questionEditGet[\"keys\"][0].split(\"~>\"))\r\n            }\r\n\r\n            let emptyArr = [];\r\n            for (let i = 0; i < props.questionEditGet[\"keys\"].length; i++) {\r\n                emptyArr.push(null);\r\n            }\r\n\r\n            setKeyImages(emptyArr);\r\n        }\r\n    }, []);\r\n\r\n    return (        \r\n        <Modal\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n            {...props}\r\n        >\r\n            <Modal.Header>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Sửa câu hỏi (câu {props.questionEditGet? props.questionEditGet[\"questIndex\"] + 1 : \"\"})\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            <Row>\r\n                    <Col md={10} sm={12} className=\"offset-md-1 offset-sm-0\">\r\n                        <Form id=\"questionAddForm\" onSubmit={prepareFormSubmit}>\r\n                            <Form.Group className=\"\">\r\n                                <Form.Label>Câu hỏi</Form.Label>\r\n                                <Form.Control as=\"textarea\" required validate=\"Quiz name is not valid!\"\r\n                                value={question}\r\n                                onChange={(e) => setQuestion(e.target.value)}/>\r\n                            </Form.Group>\r\n                            <Form.Group className=\"\">\r\n                            <fieldset>\r\n                                <Form.Group as={Row} className=\"mb-3\">\r\n                                <Form.Label as=\"legend\" column sm={2}>\r\n                                    Loại:\r\n                                </Form.Label>\r\n                                <Col sm={12}>\r\n                                    <Form.Check\r\n                                        type=\"radio\"\r\n                                        label=\"Trắc nghiệm\"\r\n                                        name=\"question-type\"\r\n                                        checked={questionType === 0}\r\n                                        onChange={() => handleQuestionTypeChange(0)}\r\n                                    />\r\n                                    <Form.Check\r\n                                        type=\"radio\"\r\n                                        label=\"Trả lời ngắn\"\r\n                                        name=\"question-type\"\r\n                                        checked={questionType === 1}\r\n                                        onChange={() => handleQuestionTypeChange(1)}\r\n                                    />\r\n                                </Col>\r\n                                </Form.Group>\r\n                            </fieldset>\r\n                            </Form.Group>\r\n                            {questionType === 0 && \r\n                                (<Form.Group className=\"\">\r\n                                <Form.Label>Số phương án</Form.Label>\r\n                                <Form.Control \r\n                                    type=\"number\"\r\n                                    validate=\"Phải là giá trị từ 2 đến 5\" \r\n                                    min={2} max={5}\r\n                                    value={numberOfChoices}\r\n                                    onChange={(e) => handleChoicesCountChange(e.target.value)}\r\n                                />\r\n                                <p className=\"error\">{numberOfChoicesError}</p>\r\n                                </Form.Group>)\r\n                            }\r\n                            {\r\n                                numberOfChoicesError === \"\" && (questionType === 0 && [...Array(parseInt(numberOfChoices))].map((x, i) => {\r\n                                    let getClassName = `question-${numberOfChoices}-answer`;\r\n                                    let idImageName = `file-${i}`\r\n                                    return (\r\n                                        <Form.Group className=\"mt-2\">\r\n                                            <Form.Label>Phương án {i + 1}\r\n                                            <Form.Check\r\n                                                type=\"radio\"\r\n                                                label=\"Đúng\"\r\n                                                name={getClassName}\r\n                                                checked={keyCorrects[i]}\r\n                                                onChange={() => handleCorrectKeyChange(i)}\r\n                                            />\r\n                                            </Form.Label>\r\n                                            <Form.Control type=\"text\" validate=\"Không hợp lệ!\" minLength={1}\r\n                                            value={keys[i]}\r\n                                            onChange={(e) => handleKeyChange(i, e.target.value)}/>\r\n                                            <Form.Group className=\"mb-3 mt-3\">\r\n                                                <Form.Label>Ảnh phương án (nếu có)</Form.Label><br></br>\r\n                                                <label htmlFor={idImageName} className=\"shareOption\" style={{cursor: \"pointer\"}}>\r\n                                                    <PermMedia htmlColor=\"green\" className=\"shareIcon\"/>\r\n                                                    <Form.Control style={{display: \"none\"}} type=\"file\" id={idImageName} accept=\".png, .jpeg, .jpg\" size=\"sm\" onChange={(e) => handleKeyImage(i, e.target.files[0])}/>\r\n                                                </label>\r\n                                            </Form.Group>\r\n                                            { keyImages[i] && (\r\n                                                <div className=\"keyImgContainer\">\r\n                                                    <img className=\"shareImg\" src={keyImages[i] && URL.createObjectURL(keyImages[i])} alt=\"\"/>\r\n                                                    <Cancel className=\"shareCancelImg\" onClick={() => setImageNull(i)}></Cancel>\r\n                                                </div>\r\n                                            ) || !keyImages[i] && keyImageUrl[i] !== \"\" && (\r\n                                                <div className=\"keyImgContainer\">\r\n                                                    <img className=\"shareImg\" src={keyImageUrl[i]} alt=\"\"/>\r\n                                                    <Cancel className=\"shareCancelImg\" onClick={() => setImageNull(i)}></Cancel>\r\n                                                </div>\r\n                                            )}\r\n                                        </Form.Group>\r\n                                    )\r\n                                })) || \r\n                                (questionType === 1 && \r\n                                    <>\r\n                                    <Form.Group className=\"\">\r\n                                        <Form.Label>Đáp án</Form.Label>\r\n                                        <Form.Control type=\"text\" validate=\"Đáp án không hợp lệ!\" minLength={1}\r\n                                        value={type1CurrentInput}\r\n                                        onChange={(e) => handleKeyChange(0, e.target.value)}\r\n                                        onKeyPress={(e) => keyBoxKeyDown(e)}\r\n                                        />\r\n                                    </Form.Group>\r\n                                    {keyType1Choices.length > 0 && \r\n                                    <Paper component=\"ul\">\r\n                                        {keyType1Choices.map((choice, index) => {\r\n                                            return (\r\n                                                <li key={index}>\r\n                                                    <Chip\r\n                                                        label={choice}\r\n                                                        onDelete={() => deleteKeyType1Choice(index)}\r\n                                                    />\r\n                                                </li>\r\n                                            )\r\n                                        })}\r\n                                    </Paper>\r\n                                    }\r\n                                    </>\r\n                                )\r\n                            }\r\n                            <Form.Group className=\"mt-2\">\r\n                                <Form.Label>Giải thích (nếu có)</Form.Label>\r\n                                <Form.Control as=\"textarea\" validate=\"Không hợp lệ!\"\r\n                                value={explain}\r\n                                onChange={(e) => setExplain(e.target.value)}/>\r\n                            </Form.Group>\r\n                            <Form.Group className=\"mt-2\">\r\n                                <Form.Label>Điểm số</Form.Label>\r\n                                <Form.Control validate=\"Không hợp lệ!\"\r\n                                value={point} type=\"number\" min={0} \r\n                                onChange={(e) => setPoint(e.target.value)}/>\r\n                            </Form.Group>\r\n                            {!props.useQuizTime && <Form.Group className=\"mb-3 mt-3\">\r\n                                <Form.Label>Thời gian trả lời (giây): </Form.Label><br></br>\r\n                                <Form.Control \r\n                                    type=\"number\"\r\n                                    min = {1}\r\n                                    value={time}\r\n                                    onChange={(e) => setTime(e.target.value)} \r\n                                />\r\n                            </Form.Group>}\r\n                            <Form.Group className=\"mb-3 mt-3\">\r\n                                <Form.Label>Ảnh (nếu có)</Form.Label><br></br>\r\n                                <label htmlFor=\"file\" className=\"shareOption\" style={{cursor: \"pointer\"}}>\r\n                                    <PermMedia htmlColor=\"green\" className=\"shareIcon\"/>\r\n                                    <Form.Control style={{display: \"none\"}} type=\"file\" id=\"file\" accept=\".png, .jpeg, .jpg\" size=\"sm\" onChange={(e) => setFile(e.target.files[0])}/>\r\n                                </label>\r\n\r\n                            </Form.Group>\r\n                            </Form>\r\n                            {\r\n                                file && (\r\n                                    <div className=\"shareImgContainer\">\r\n                                        <img className=\"shareImg\" src={file && URL.createObjectURL(file)} alt=\"\"/>\r\n                                        <Cancel className=\"shareCancelImg\" onClick={() => {\r\n                                            setFile(null);\r\n                                            setURL(\"\");\r\n                                        }}></Cancel>\r\n                                    </div>\r\n                                )\r\n                                || \r\n                                !file && url !== \"\" && (\r\n                                    <div className=\"shareImgContainer\">\r\n                                        <img className=\"shareImg\" src={url} alt=\"\"/>\r\n                                        <Cancel className=\"shareCancelImg\" onClick={() => {\r\n                                            setFile(null);\r\n                                            setURL(\"\");\r\n                                        }}></Cancel>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                    </Col>\r\n                </Row>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n            <p className=\"error\">{validateError}</p>\r\n            <Button variant=\"warning\" type=\"submit\" form=\"questionAddForm\">Sửa</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default QuestionEditModal\r\n","D:\\Coding\\Quiz Generator Project\\Client\\online-quiz-system\\src\\pages\\quiz-main\\QuizMain.jsx",["99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143"],"import {React, useState, useEffect, useContext, useRef} from 'react'\r\nimport \"./quizmain.css\";\r\nimport axios from \"axios\";\r\nimport {AuthContext} from \"../../context/AuthContext\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport {Row, Col, Container, ProgressBar, Button, Form} from \"react-bootstrap\";\r\nimport QuizReview from \"./../../components/quiz-review/QuizReview\";\r\n\r\nfunction QuizMain(props) {\r\n    const {user} = useContext(AuthContext);\r\n    const [questions, setQuestions] = useState([]);\r\n    const [quizInfo, setQuizInfo] = useState([]);\r\n    const [point, setPoint] = useState(0);\r\n    const [currentQuest, setCurrentQuest] = useState(0);\r\n    const [quizTime, setQuizTime] = useState(false)\r\n    const [time, setTime] = useState(0);\r\n    const timerCount = useRef(0);\r\n    const [currentAnswersSet, setCurrentAnswersSet] = useState([]);\r\n    const [timeCountDown, setTimeCountDown] = useState(\"\");\r\n    const [timerCountInterval, setTimerCountInterval] = useState(0);\r\n    const [answerFieldClass, setAnswerFieldClass] = useState(false);\r\n    const [answers, setAnswers] = useState([]);\r\n    const [answersOld, setAnswersOld] = useState([]);\r\n    const [currentAnswerField, setCurrentAnswerField] = useState(\"\");\r\n    const [answered, setAnswered] = useState(false);\r\n    const [answerDisplay, setAnswerDisplay] = useState(\"\");\r\n    const [correctQuestCount, setCorrectQuestCount] = useState(0);\r\n    const [answerBoxContent, setAnswerBoxContent] = useState(\"\");\r\n    const [markCompleted, setMarkCompleted] = useState(false);\r\n    const [quizReviewModalShow, setQuizReviewModalShow] = useState(false);\r\n    const [quizReviewModal, setQuizReviewModal] = useState(false);\r\n\r\n    const shuffleArray = (array) => {\r\n        for (var i = array.length - 1; i > 0; i--) {\r\n            var j = Math.floor(Math.random() * (i + 1));\r\n            var temp = array[i];\r\n            array[i] = array[j];\r\n            array[j] = temp;\r\n        }\r\n        return array\r\n    }\r\n\r\n    const toHHMMSS = (secs) => {\r\n        var sec_num = parseInt(secs, 10)\r\n        var hours   = Math.floor(sec_num / 3600)\r\n        var minutes = Math.floor(sec_num / 60) % 60\r\n        var seconds = sec_num % 60\r\n    \r\n        return [hours,minutes,seconds]\r\n            .map(v => v < 10 ? \"0\" + v : v)\r\n            .filter((v,i) => v !== \"00\" || i > 0)\r\n            .join(\":\")\r\n    }\r\n\r\n    const nextQuest = () => {\r\n        if (quizTime && questions[currentQuest].question_time != null)\r\n        {\r\n            setTime(questions[currentQuest].question_time)\r\n        }\r\n        setCurrentQuest(currentQuest + 1)\r\n    }\r\n\r\n    const lastQuest = () => {\r\n        setCurrentQuest(currentQuest - 1)\r\n    }\r\n\r\n    const finish = async(mode) => {\r\n        if (mode === 1) {\r\n            const info = {\r\n                user_id: user.id,\r\n                quiz_id: props.location.state.id,\r\n                point: point, \r\n                time: null,\r\n                correct: correctQuestCount,\r\n                details: answersOld\r\n            }\r\n            setQuizReviewModal(true);\r\n            await axios.post(\"/quiz/attempt\", info)\r\n            .then(res => {\r\n                console.log(\"Done\");\r\n                setQuizReviewModalShow(true);\r\n            })\r\n            .catch(err => {\r\n\r\n            })\r\n        } else {\r\n            if (!answered) {\r\n                //Check answers\r\n                let point = 0;\r\n                let correctQuestCount = 0;\r\n                let getTmpOldAnswers = [];\r\n                for (let i = 0; i < answers.length; i++) {\r\n                    if (questions[i].question_type === 0) {\r\n                        //MCQ question\r\n                        getTmpOldAnswers.push({\r\n                            answer: answers[i],\r\n                            mark: false,\r\n                            question_id: questions[i].id,\r\n                            point: 0\r\n                        })\r\n                        for (let j = 0; j < questions[i].answers.length; j++) {\r\n                            let getAnswer = questions[i].answers[j];\r\n                            if (getAnswer.id === answers[i]) {\r\n                                if (getAnswer.is_correct === 1) {\r\n                                    getTmpOldAnswers[i].mark = true;\r\n                                    getTmpOldAnswers[i].point = questions[i].question_point;\r\n                                    point += questions[i].question_point\r\n                                    correctQuestCount++;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        getTmpOldAnswers.push({\r\n                            answer: answers[i],\r\n                            mark: false,\r\n                            question_id: questions[i].id,\r\n                            point: 0\r\n                        })\r\n                        let markResult = checkTextAnswer(answers[i], Buffer(questions[i].answers[0].answer_content, \"base64\").toString(\"utf-8\"));\r\n                        if (markResult) {\r\n                            getTmpOldAnswers[i].mark = true;\r\n                            getTmpOldAnswers[i].point = questions[i].question_point;\r\n                            point += questions[i].question_point\r\n                            correctQuestCount++;\r\n                        }\r\n                    }\r\n                }\r\n                setAnswersOld(getTmpOldAnswers);\r\n                setPoint(point);\r\n                setCorrectQuestCount(correctQuestCount);\r\n                setAnswered(true);\r\n                clearInterval(timerCountInterval);\r\n                setAnswerFieldClass(true);\r\n                setMarkCompleted(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(async() => {\r\n        if (!quizTime && markCompleted) {\r\n            const info = {\r\n                user_id: user.id,\r\n                quiz_id: props.location.state.id,\r\n                point: point, \r\n                time: quizInfo[\"quiz_time\"] - timerCount.current < 0? 0 : quizInfo[\"quiz_time\"] - timerCount.current,\r\n                correct: correctQuestCount,\r\n                details: answersOld\r\n            }\r\n            setQuizReviewModal(true);\r\n            await axios.post(\"/quiz/attempt\", info)\r\n            .then(res => {\r\n                console.log(\"Done\");\r\n                setQuizReviewModalShow(true);\r\n            })\r\n            .catch(err => {\r\n\r\n            })\r\n        }\r\n    }, [markCompleted])\r\n\r\n    useEffect(() => {\r\n        console.log(questions);\r\n    }, [questions])\r\n\r\n    const getQuizInfo = async() => {\r\n        let thisQuizInfo = await axios.get(`/quiz/info/${props.location.state.id}`);\r\n        console.log(thisQuizInfo);\r\n        thisQuizInfo = JSON.parse(thisQuizInfo.request.response);\r\n        setQuizInfo(thisQuizInfo[0]);\r\n        setQuizTime(thisQuizInfo[0][\"quiz_time\"] == null);\r\n        if (thisQuizInfo[0][\"quiz_time\"] != null) {\r\n            setTime(parseInt(thisQuizInfo[0][\"quiz_time\"]))\r\n            timerCount.current = parseInt(thisQuizInfo[0][\"quiz_time\"])\r\n            setTimeCountDown(toHHMMSS(timerCount.current));\r\n        }\r\n\r\n        let listOfQuestions = await axios.get(`/quiz/join/${props.location.state.id}`);\r\n        listOfQuestions = JSON.parse(listOfQuestions.request.response);\r\n        if (thisQuizInfo[0][\"raw_order\"] == 0) {\r\n            listOfQuestions = await shuffleArray(listOfQuestions);\r\n        }\r\n        setQuestions(listOfQuestions);\r\n\r\n        if (!quizTime) {\r\n            for (let i = 0; i < listOfQuestions.length; i++) {\r\n                answers.push(\"\");\r\n            }\r\n            setAnswers(answers);\r\n        }\r\n    }\r\n\r\n    const checkAnswerMCQ = (answer_id) => {\r\n        if (!answered) {\r\n            if (quizTime) {\r\n                let getTmpOldAnswers = answersOld;\r\n                getTmpOldAnswers.push({\r\n                    answer: answer_id,\r\n                    mark: false,\r\n                    question_id: questions[currentQuest - 1].id,\r\n                    point: 0\r\n                }) \r\n                setAnswered(true);\r\n                for (let i = 0; i < questions[currentQuest - 1].answers.length; i++) {\r\n                    let getAnswer = questions[currentQuest - 1].answers[i];\r\n                    if (getAnswer.id === answer_id) {\r\n                        if (getAnswer.is_correct === 1) {\r\n                            setPoint(point + questions[currentQuest - 1].question_point);\r\n                            setCorrectQuestCount(correctQuestCount + 1);\r\n                            getTmpOldAnswers[currentQuest - 1].mark = true;\r\n                            getTmpOldAnswers[currentQuest - 1].point = questions[currentQuest - 1].question_point;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                setAnswersOld(getTmpOldAnswers);\r\n                console.log(timerCountInterval);\r\n                clearInterval(timerCountInterval);\r\n            }\r\n        }\r\n        if (!quizTime) {\r\n            let getTmpAnswer = answers;\r\n            getTmpAnswer[currentQuest - 1] = answer_id;\r\n            setAnswers(getTmpAnswer);\r\n        }\r\n    }\r\n\r\n    const checkAnswerText = (e) => {\r\n        if (!answered) {\r\n            if (quizTime) {\r\n                if (e.key == \"Enter\") {\r\n                    e.preventDefault();\r\n                    setAnswered(true);\r\n                    let getTmpOldAnswers = answersOld;\r\n                    getTmpOldAnswers.push({\r\n                        answer: e.target.value,\r\n                        mark: false,\r\n                        question_id: questions[currentQuest - 1].id,\r\n                        point: 0\r\n                    })\r\n                    let answersList = Buffer(questions[currentQuest - 1].answers[0].answer_content, \"base64\").toString(\"utf-8\");\r\n                    answersList = answersList.split(\"~|\")\r\n                    setAnswerDisplay(answersList[0].replace(\"~>\", \", \").replace(\"~+\", \", \"));\r\n                    let markResult = checkTextAnswer(e.target.value, Buffer(questions[currentQuest - 1].answers[0].answer_content, \"base64\").toString(\"utf-8\"));\r\n                    if (markResult) {\r\n                        setPoint(point + questions[currentQuest - 1].question_point);\r\n                        setCorrectQuestCount(correctQuestCount + 1);\r\n                        getTmpOldAnswers[currentQuest - 1].mark = true;\r\n                        getTmpOldAnswers[currentQuest - 1].point = questions[currentQuest - 1].question_point;\r\n                    }\r\n                    setAnswersOld(getTmpOldAnswers);\r\n                    setAnswerFieldClass(true);\r\n                    clearInterval(timerCountInterval);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const checkTextAnswer = (answer, key) => {\r\n        key = key.replaceAll(\"~|\", \"|\");\r\n        let keyArr = key.split(\"|\");\r\n        let mark = false;\r\n        for (let i = 0; i < keyArr.length; i++) {\r\n            let tmpAnswer = answer.trim().toUpperCase();\r\n            let tmpAnswer1 = tmpAnswer;\r\n            console.log(tmpAnswer1);\r\n            console.log(keyArr[i].toUpperCase());\r\n            console.log(tmpAnswer1 == keyArr[i].toUpperCase())\r\n            if (tmpAnswer1 == keyArr[i].toUpperCase()) {\r\n                mark = true;\r\n            } else if (keyArr[i].includes(\"~>\")) {\r\n                let tmpMark = true;\r\n                let tmpStr = keyArr[i].replaceAll(\"~>\", \"|\");\r\n                let tmpKeyArr = tmpStr.split(\"|\");\r\n                let tmpAnswerForModify = tmpAnswer1;\r\n                if (tmpAnswerForModify.includes(\" , \")) tmpAnswerForModify = tmpAnswer1.replaceAll(\" , \", \"|\");\r\n                if (tmpAnswerForModify.includes(\" ,\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\" ,\", \"|\");\r\n                if (tmpAnswerForModify.includes(\", \")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\", \", \"|\");\r\n                if (tmpAnswerForModify.includes(\",\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\",\", \"|\");\r\n                if (tmpAnswerForModify.includes(\" - \")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\" - \", \"|\");\r\n                if (tmpAnswerForModify.includes(\"- \")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\"- \", \"|\");\r\n                if (tmpAnswerForModify.includes(\" -\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\" -\", \"|\");\r\n                if (tmpAnswerForModify.includes(\"-\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\"-\", \"|\");\r\n                if (tmpAnswerForModify.includes(\"|\")) {\r\n                    let tmpSubAnswerArr = tmpAnswerForModify.Split('|');\r\n                    if (tmpSubAnswerArr.length != tmpKeyArr.length) {\r\n                        tmpMark = false;\r\n                    } else {\r\n                        let tmp = true;\r\n                        for (let a = 0; a < tmpSubAnswerArr.length; a++) {\r\n                            if (tmpSubAnswerArr[a] != tmpKeyArr[a].toUpperCase()) {\r\n                                tmp = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (!tmp) {\r\n                            tmpMark = false;\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (tmpAnswerForModify.length != tmpKeyArr.length) {\r\n                        tmpMark = false;\r\n                    } else {\r\n                        let tmp = true;\r\n                        for (let a = 0; a < tmpAnswerForModify.length; a++) {\r\n                            if (tmpAnswerForModify[a].toString() != tmpKeyArr[a].toUpperCase()) {\r\n                                tmp = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (!tmp) {\r\n                            tmpMark = false;\r\n                        }\r\n                    }\r\n                }\r\n                mark = tmpMark;\r\n            } else if (keyArr[i].includes(\"~+\")) {\r\n                let tmpMark = true;\r\n                let tmpStr = keyArr[i].replaceAll(\"~+\", \"|\");\r\n                let tmpKeyArr = tmpStr.split(\"|\");\r\n                let tmpAnswerForModify = tmpAnswer1;\r\n                if (tmpAnswerForModify.includes(\" , \")) tmpAnswerForModify = tmpAnswer1.replaceAll(\" , \", \"|\");\r\n                if (tmpAnswerForModify.includes(\" ,\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\" ,\", \"|\");\r\n                if (tmpAnswerForModify.includes(\", \")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\", \", \"|\");\r\n                if (tmpAnswerForModify.includes(\",\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\",\", \"|\");\r\n                if (tmpAnswerForModify.includes(\" - \")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\" - \", \"|\");\r\n                if (tmpAnswerForModify.includes(\"- \")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\"- \", \"|\");\r\n                if (tmpAnswerForModify.includes(\" -\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\" -\", \"|\");\r\n                if (tmpAnswerForModify.includes(\"-\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\"-\", \"|\");\r\n                if (tmpAnswerForModify.includes(\"|\")) {\r\n                    let tmpSubAnswerArr = tmpAnswerForModify.Split('|');\r\n                    if (tmpSubAnswerArr.length != tmpKeyArr.length) {\r\n                        tmpMark = false;\r\n                    } else {\r\n                        for (let a = 0; a < tmpSubAnswerArr.length; a++) {\r\n                            let found = false;\r\n                            for (let b = 0; b < tmpKeyArr.length; b++)\r\n                            {\r\n                                if (tmpSubAnswerArr[a] == tmpKeyArr[b].toUpperCase()) \r\n                                {\r\n                                    found = true;\r\n                                    break;\r\n                                }\r\n\r\n                            }\r\n                            if (!found)\r\n                            {\r\n                                tmpMark = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (tmpAnswerForModify.length != tmpKeyArr.length) {\r\n                        tmpMark = false;\r\n                    } else {\r\n                        for (let a = 0; a < tmpAnswerForModify.length; a++)\r\n                        {\r\n                            let found = false;\r\n                            for (let b = 0; b < tmpKeyArr.length; b++)\r\n                            {\r\n                                if (tmpAnswerForModify[a].toString() == tmpKeyArr[b].toUpperCase())\r\n                                {\r\n                                    found = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            if (!found)\r\n                            {\r\n                                tmpMark = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                mark = tmpMark;\r\n            }\r\n            if (mark)\r\n                break;\r\n        }\r\n        return mark;\r\n    }\r\n\r\n    const handleBoxChange = (e) => {\r\n        if (!quizTime) {\r\n            let getAnswers = [...answers];\r\n            getAnswers[currentQuest - 1] = e.target.value;\r\n            setCurrentAnswerField(e.target.value);\r\n            setAnswers(getAnswers);\r\n        } else {\r\n            setAnswerBoxContent(e.target.value);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (quizInfo.length == 0) {\r\n            getQuizInfo();\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (quizTime) {\r\n            clearInterval(timerCountInterval);\r\n            setAnswered(false);\r\n            setAnswerDisplay(\"\");\r\n            setAnswerFieldClass(false);\r\n            setAnswerBoxContent(\"\");\r\n        }\r\n\r\n        if (currentQuest != 0) {\r\n            let getAnswers = questions[currentQuest - 1].answers;\r\n            getAnswers = shuffleArray(getAnswers);\r\n            setCurrentAnswersSet(getAnswers);\r\n\r\n            if (!quizTime) {\r\n                setCurrentAnswerField(answers[currentQuest - 1]);\r\n            }\r\n        }\r\n        if (currentQuest == 1) {\r\n            if (quizTime && questions[currentQuest - 1].question_time != null)\r\n            {\r\n                console.log(questions[currentQuest - 1].question_time)\r\n                setTime(questions[currentQuest].question_time)\r\n                timerCount.current = questions[currentQuest].question_time;\r\n                setTimeCountDown(toHHMMSS(timerCount.current));\r\n            }\r\n\r\n            let getTime = quizTime? questions[currentQuest - 1].question_time : time;\r\n\r\n            if (quizTime)\r\n            {\r\n                timerCount.current = getTime;\r\n                setTimeCountDown(toHHMMSS(timerCount.current));\r\n            }\r\n            let timerCountInterval = setInterval(() => {\r\n                timerCount.current = timerCount.current - 1;\r\n                setTimeCountDown(toHHMMSS(timerCount.current));\r\n                if (timerCount.current == 0) {\r\n                    clearInterval(timerCountInterval);\r\n                    timerCount.current = 0;\r\n                    setTimeCountDown(\"00:00\");\r\n                    setAnswerFieldClass(true);\r\n                    if (quizTime) {\r\n                        let getTmpOldAnswers = answersOld;\r\n                        getTmpOldAnswers.push({\r\n                            answer: \"\",\r\n                            mark: false,\r\n                            question_id: questions[currentQuest - 1].id\r\n                        });\r\n                        setAnswersOld(getTmpOldAnswers);\r\n                    }\r\n                }\r\n            }, 1000);\r\n            setTimerCountInterval(timerCountInterval);\r\n            console.log(timerCountInterval);\r\n        } \r\n        if (currentQuest != 0 && currentQuest != 1 && quizTime) {\r\n            let getTime = quizTime? questions[currentQuest - 1].question_time : time;\r\n\r\n            if (quizTime)\r\n            {\r\n                timerCount.current = getTime;\r\n                setTimeCountDown(toHHMMSS(timerCount.current));\r\n            }\r\n            let timerCountInterval = setInterval(() => {\r\n                timerCount.current = timerCount.current - 1;\r\n                setTimeCountDown(toHHMMSS(timerCount.current));\r\n                if (timerCount.current == 0) {\r\n                    clearInterval(timerCountInterval);\r\n                    timerCount.current = 0;\r\n                    setTimeCountDown(\"00:00\");\r\n                    setAnswerFieldClass(true);\r\n                    if (quizTime) {\r\n                        let getTmpOldAnswers = answersOld;\r\n                        getTmpOldAnswers[currentQuest - 1] = {\r\n                            answer: \"\",\r\n                            mark: false,\r\n                            question_id: questions[currentQuest - 1].id\r\n                        };\r\n                        setAnswersOld(getTmpOldAnswers);\r\n                    }\r\n                }\r\n            }, 1000);\r\n            setTimerCountInterval(timerCountInterval);\r\n        }\r\n    }, [currentQuest])\r\n\r\n    return (\r\n        <>\r\n            {!quizReviewModal && questions.length == 0 && (<p>Loading Questions</p>)}\r\n            {!quizReviewModal && questions.length != 0 && (\r\n                <Container className=\"mt-3 mb-3\">\r\n                    <h1 className=\"text-center\">{quizInfo.quiz_title}</h1>\r\n                    <h3 className=\"text-center\">Tạo bởi: {quizInfo.creator}</h3>\r\n                    <Row className=\"\">\r\n                        <Col lg={4} md={12} sm={12}>\r\n                            <h5 className=\"text-center\">{user.username}</h5>\r\n                        </Col>\r\n                        <Col lg={4} md={6} sm={12}>\r\n                            <h5 className=\"text-center\">Câu hỏi: {currentQuest}/{questions.length}</h5>\r\n                        </Col>\r\n                        <Col lg={4} md={6} sm={12}>\r\n                            <h5 className=\"text-center\">Điểm: {point}</h5>\r\n                        </Col>\r\n                    </Row>\r\n                    <h5 className=\"text-center\">\r\n                        Thời gian: {timeCountDown}\r\n                    </h5>\r\n                    {/* <div className=\"progress mb-2\">\r\n                        <ProgressBar \r\n                            variant=\"info\"\r\n                            striped \r\n                            now={progressBarWidth}\r\n                            style={{width: '100%'}}\r\n                        ></ProgressBar>\r\n                        \r\n                    </div> */}\r\n                    <div className=\"text-center\">\r\n                        \r\n                    </div>\r\n                    {currentQuest == 0 && (\r\n                        <div className=\"text-center\">\r\n                            <Button onClick={() => setCurrentQuest(1)} variant=\"info\" className=\"text-white text-center\">Bắt đầu</Button>\r\n                        </div>\r\n                    )}\r\n                    {currentQuest != 0 && \r\n                        <>\r\n                        <div className=\"question-box d-flex justify-content-center align-items-center\">\r\n                            <h5 className=\"txt-quest\">{questions[currentQuest - 1].question_content}</h5>\r\n                        </div>\r\n                        {questions[currentQuest - 1].media != \"\" && <div className=\"text-center mt-2\">\r\n                            <img className=\"img-quest\" src={questions[currentQuest - 1].media}></img>\r\n                        </div>}\r\n                        {questions[currentQuest - 1].question_type == 1 && \r\n                        <div>\r\n                            {\r\n                                \r\n                                !quizTime && \r\n                                (<Form.Control value={currentAnswerField} disabled={answerFieldClass} type=\"text\" className=\"mt-2\" placeholder=\"Câu trả lời\" onKeyPress={(e) => checkAnswerText(e)} onChange={(e) => handleBoxChange(e)}>\r\n                                </Form.Control>)\r\n                            }\r\n                            {\r\n                                quizTime && (\r\n                                    <Form.Control value={answerBoxContent} disabled={answerFieldClass} type=\"text\" className=\"mt-2\" placeholder=\"Câu trả lời\" onKeyPress={(e) => checkAnswerText(e)} onChange={(e) => handleBoxChange(e)}>\r\n                                    </Form.Control>\r\n                                )\r\n                            }\r\n                        </div>}\r\n                        {questions[currentQuest - 1].question_type == 0 && \r\n                            <Row className=\"mt-2\">\r\n                                {\r\n                                    currentAnswersSet.map((answer, i) => {\r\n                                        let chosen = !quizTime && answers[currentQuest - 1] == answer.id? \"answer-content text-center chosen\": \"answer-content text-center\";\r\n                                        if (quizTime && answered) {\r\n                                            if (answer.is_correct == 1)\r\n                                                chosen = \"answer-content text-center correct\"\r\n                                            else \r\n                                                chosen = \"answer-content text-center wrong\"\r\n                                        }\r\n                                        return (\r\n                                            <Col lg={6} md={6} sm={12} className=\"p-1 answer\">\r\n                                                <div className={chosen} onClick={() => checkAnswerMCQ(answer.id)}>\r\n                                                    {answer.media != \"\" && <img className=\"img-answer\" src={answer.media}></img>}\r\n                                                    {Buffer(answer.answer_content, \"base64\").toString(\"utf-8\")}\r\n                                                </div>\r\n                                            </Col>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </Row>\r\n                        }\r\n                        {\r\n                            quizTime && answered && (\r\n                                <div className=\"text-center mt-1\">\r\n                                    {\r\n                                        questions[currentQuest - 1].answers.length == 1 && (\r\n                                            <h5>Đáp án: {answerDisplay}</h5>\r\n                                        )\r\n                                    }\r\n                                    <h5>{Buffer(questions[currentQuest - 1].explanation, \"base64\").toString(\"utf-8\")}</h5>\r\n                                </div>\r\n                            )\r\n                        }\r\n                        </>\r\n                    }\r\n                </Container>\r\n            )}\r\n            {!quizReviewModal && !quizTime && currentQuest != 0 && (\r\n                <>\r\n                {!answered && (\r\n                    <div className=\"text-center\">\r\n                    {currentQuest != 1 && (<Button onClick={() => lastQuest()} variant=\"info\" className=\"text-white text-center\" style={{marginRight: \"5px\"}}>Trước</Button>)}\r\n                    {currentQuest != questions.length && (<Button onClick={() => nextQuest()} variant=\"info\" className=\"text-white text-center ml-1\">Tiếp</Button>)}\r\n                    </div>\r\n                )}\r\n                <div className=\"text-center mt-2\">\r\n                    <Button onClick={() => finish(0)} variant=\"info\" className=\"text-white text-center\">Hoàn thành</Button>\r\n                </div>\r\n                </>\r\n            )}\r\n            {\r\n                !quizReviewModal && quizTime && currentQuest != 0 && currentQuest != answers.length && answered && (\r\n                    <div className=\"text-center\">\r\n                        <Button onClick={() => nextQuest()} variant=\"info\" className=\"text-white text-center\">Tiếp</Button>\r\n                    </div>\r\n                )\r\n            }\r\n            {\r\n                !quizReviewModal && quizTime && answered && currentQuest != 0 && currentQuest == answers.length && (\r\n                    <div className=\"text-center mt-2\">\r\n                        <Button onClick={() => finish(1)} variant=\"info\" className=\"text-white text-center\">Hoàn thành</Button>\r\n                    </div>\r\n                )\r\n            }\r\n\r\n            {\r\n                quizReviewModal && <QuizReview\r\n                    show={quizReviewModalShow}\r\n                    onHide={() => setQuizReviewModalShow(false)}\r\n                    reviewContent={answersOld}\r\n                    questions={questions}\r\n                    quizInfo={quizInfo}\r\n                >\r\n\r\n                </QuizReview>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default QuizMain\r\n","D:\\Coding\\Quiz Generator Project\\Client\\online-quiz-system\\src\\components\\quiz-review\\QuizReview.jsx",["144","145","146","147","148"],"import \"./quiz-review.css\";\r\nimport {React, useState, useEffect, useRef} from 'react'\r\nimport {Container, Row, Col} from \"react-bootstrap\";\r\n\r\nfunction QuizReview(props) {\r\n    const [markContent, setMarkContent] = useState([]);\r\n    const [questions, setQuestions] = useState([]);\r\n    const [quizInfo, setQuizInfo] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setMarkContent(props.reviewContent);\r\n        setQuestions(props.questions);\r\n        setQuizInfo(props.quizInfo);\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        console.log(markContent);\r\n    }, [markContent])\r\n\r\n    return (\r\n        <>\r\n            <Container className=\"mt-3 mb-3\">\r\n                <h1 className=\"text-center\">{quizInfo.quiz_title}</h1>\r\n                <h3 className=\"text-center\">Tạo bởi: {quizInfo.creator}</h3>\r\n\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default QuizReview\r\n",{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","severity":1,"message":"154","line":2,"column":9,"nodeType":"155","messageId":"156","endLine":2,"endColumn":17},{"ruleId":"153","severity":1,"message":"157","line":3,"column":8,"nodeType":"155","messageId":"156","endLine":3,"endColumn":13},{"ruleId":"153","severity":1,"message":"158","line":8,"column":8,"nodeType":"155","messageId":"156","endLine":8,"endColumn":24},{"ruleId":"153","severity":1,"message":"159","line":9,"column":8,"nodeType":"155","messageId":"156","endLine":9,"endColumn":16},{"ruleId":"153","severity":1,"message":"160","line":78,"column":24,"nodeType":"155","messageId":"156","endLine":78,"endColumn":37},{"ruleId":"153","severity":1,"message":"161","line":1,"column":37,"nodeType":"155","messageId":"156","endLine":1,"endColumn":46},{"ruleId":"153","severity":1,"message":"162","line":8,"column":8,"nodeType":"155","messageId":"156","endLine":8,"endColumn":18},{"ruleId":"153","severity":1,"message":"163","line":13,"column":12,"nodeType":"155","messageId":"156","endLine":13,"endColumn":16},{"ruleId":"153","severity":1,"message":"164","line":13,"column":18,"nodeType":"155","messageId":"156","endLine":13,"endColumn":25},{"ruleId":"153","severity":1,"message":"165","line":15,"column":12,"nodeType":"155","messageId":"156","endLine":15,"endColumn":22},{"ruleId":"153","severity":1,"message":"166","line":18,"column":12,"nodeType":"155","messageId":"156","endLine":18,"endColumn":21},{"ruleId":"153","severity":1,"message":"167","line":18,"column":23,"nodeType":"155","messageId":"156","endLine":18,"endColumn":35},{"ruleId":"168","severity":1,"message":"169","line":55,"column":51,"nodeType":"170","messageId":"171","endLine":55,"endColumn":52,"fix":"172"},{"ruleId":"173","severity":1,"message":"174","line":96,"column":66,"nodeType":"175","messageId":"176","endLine":96,"endColumn":68},{"ruleId":"153","severity":1,"message":"177","line":2,"column":49,"nodeType":"155","messageId":"156","endLine":2,"endColumn":55},{"ruleId":"173","severity":1,"message":"178","line":101,"column":45,"nodeType":"175","messageId":"176","endLine":101,"endColumn":47},{"ruleId":"173","severity":1,"message":"174","line":187,"column":22,"nodeType":"175","messageId":"176","endLine":187,"endColumn":24},{"ruleId":"173","severity":1,"message":"178","line":289,"column":19,"nodeType":"175","messageId":"176","endLine":289,"endColumn":21},{"ruleId":"179","severity":1,"message":"180","line":361,"column":61,"nodeType":"181","messageId":"182","endLine":361,"endColumn":63},{"ruleId":"179","severity":1,"message":"180","line":389,"column":37,"nodeType":"181","messageId":"182","endLine":389,"endColumn":39},{"ruleId":"153","severity":1,"message":"183","line":27,"column":12,"nodeType":"155","messageId":"156","endLine":27,"endColumn":22},{"ruleId":"153","severity":1,"message":"184","line":27,"column":24,"nodeType":"155","messageId":"156","endLine":27,"endColumn":37},{"ruleId":"173","severity":1,"message":"174","line":190,"column":22,"nodeType":"175","messageId":"176","endLine":190,"endColumn":24},{"ruleId":"173","severity":1,"message":"178","line":294,"column":19,"nodeType":"175","messageId":"176","endLine":294,"endColumn":21},{"ruleId":"185","severity":1,"message":"186","line":333,"column":8,"nodeType":"187","endLine":333,"endColumn":10,"suggestions":"188"},{"ruleId":"179","severity":1,"message":"180","line":396,"column":61,"nodeType":"181","messageId":"182","endLine":396,"endColumn":63},{"ruleId":"179","severity":1,"message":"180","line":420,"column":60,"nodeType":"181","messageId":"182","endLine":420,"endColumn":62},{"ruleId":"179","severity":1,"message":"180","line":425,"column":47,"nodeType":"181","messageId":"182","endLine":425,"endColumn":49},{"ruleId":"179","severity":1,"message":"189","line":425,"column":47,"nodeType":"181","messageId":"182","endLine":425,"endColumn":49},{"ruleId":"179","severity":1,"message":"189","line":425,"column":89,"nodeType":"181","messageId":"182","endLine":425,"endColumn":91},{"ruleId":"179","severity":1,"message":"180","line":433,"column":37,"nodeType":"181","messageId":"182","endLine":433,"endColumn":39},{"ruleId":"179","severity":1,"message":"180","line":492,"column":38,"nodeType":"181","messageId":"182","endLine":492,"endColumn":40},{"ruleId":"179","severity":1,"message":"180","line":501,"column":33,"nodeType":"181","messageId":"182","endLine":501,"endColumn":35},{"ruleId":"179","severity":1,"message":"189","line":501,"column":33,"nodeType":"181","messageId":"182","endLine":501,"endColumn":35},{"ruleId":"179","severity":1,"message":"189","line":502,"column":53,"nodeType":"181","messageId":"182","endLine":502,"endColumn":55},{"ruleId":"153","severity":1,"message":"190","line":6,"column":5,"nodeType":"155","messageId":"156","endLine":6,"endColumn":14},{"ruleId":"153","severity":1,"message":"191","line":8,"column":30,"nodeType":"155","messageId":"156","endLine":8,"endColumn":41},{"ruleId":"185","severity":1,"message":"192","line":142,"column":15,"nodeType":"193","endLine":162,"endColumn":6},{"ruleId":"185","severity":1,"message":"194","line":162,"column":8,"nodeType":"187","endLine":162,"endColumn":23,"suggestions":"195"},{"ruleId":"173","severity":1,"message":"178","line":182,"column":42,"nodeType":"175","messageId":"176","endLine":182,"endColumn":44},{"ruleId":"173","severity":1,"message":"178","line":233,"column":27,"nodeType":"175","messageId":"176","endLine":233,"endColumn":29},{"ruleId":"173","severity":1,"message":"178","line":270,"column":36,"nodeType":"175","messageId":"176","endLine":270,"endColumn":38},{"ruleId":"173","severity":1,"message":"178","line":271,"column":28,"nodeType":"175","messageId":"176","endLine":271,"endColumn":30},{"ruleId":"173","severity":1,"message":"174","line":288,"column":48,"nodeType":"175","messageId":"176","endLine":288,"endColumn":50},{"ruleId":"173","severity":1,"message":"174","line":293,"column":52,"nodeType":"175","messageId":"176","endLine":293,"endColumn":54},{"ruleId":"173","severity":1,"message":"174","line":303,"column":51,"nodeType":"175","messageId":"176","endLine":303,"endColumn":53},{"ruleId":"173","severity":1,"message":"174","line":308,"column":66,"nodeType":"175","messageId":"176","endLine":308,"endColumn":68},{"ruleId":"173","severity":1,"message":"174","line":334,"column":48,"nodeType":"175","messageId":"176","endLine":334,"endColumn":50},{"ruleId":"173","severity":1,"message":"178","line":341,"column":56,"nodeType":"175","messageId":"176","endLine":341,"endColumn":58},{"ruleId":"173","severity":1,"message":"174","line":356,"column":51,"nodeType":"175","messageId":"176","endLine":356,"endColumn":53},{"ruleId":"173","severity":1,"message":"178","line":364,"column":70,"nodeType":"175","messageId":"176","endLine":364,"endColumn":72},{"ruleId":"173","severity":1,"message":"178","line":398,"column":29,"nodeType":"175","messageId":"176","endLine":398,"endColumn":31},{"ruleId":"185","severity":1,"message":"196","line":401,"column":8,"nodeType":"187","endLine":401,"endColumn":10,"suggestions":"197"},{"ruleId":"173","severity":1,"message":"174","line":412,"column":26,"nodeType":"175","messageId":"176","endLine":412,"endColumn":28},{"ruleId":"173","severity":1,"message":"178","line":421,"column":26,"nodeType":"175","messageId":"176","endLine":421,"endColumn":28},{"ruleId":"173","severity":1,"message":"178","line":440,"column":40,"nodeType":"175","messageId":"176","endLine":440,"endColumn":42},{"ruleId":"173","severity":1,"message":"174","line":459,"column":26,"nodeType":"175","messageId":"176","endLine":459,"endColumn":28},{"ruleId":"173","severity":1,"message":"174","line":459,"column":47,"nodeType":"175","messageId":"176","endLine":459,"endColumn":49},{"ruleId":"173","severity":1,"message":"178","line":470,"column":40,"nodeType":"175","messageId":"176","endLine":470,"endColumn":42},{"ruleId":"185","severity":1,"message":"198","line":488,"column":8,"nodeType":"187","endLine":488,"endColumn":22,"suggestions":"199"},{"ruleId":"173","severity":1,"message":"178","line":492,"column":51,"nodeType":"175","messageId":"176","endLine":492,"endColumn":53},{"ruleId":"173","severity":1,"message":"174","line":493,"column":51,"nodeType":"175","messageId":"176","endLine":493,"endColumn":53},{"ruleId":"173","severity":1,"message":"178","line":523,"column":35,"nodeType":"175","messageId":"176","endLine":523,"endColumn":37},{"ruleId":"173","severity":1,"message":"174","line":528,"column":35,"nodeType":"175","messageId":"176","endLine":528,"endColumn":37},{"ruleId":"173","severity":1,"message":"174","line":533,"column":60,"nodeType":"175","messageId":"176","endLine":533,"endColumn":62},{"ruleId":"200","severity":1,"message":"201","line":534,"column":29,"nodeType":"202","endLine":534,"endColumn":96},{"ruleId":"173","severity":1,"message":"178","line":536,"column":68,"nodeType":"175","messageId":"176","endLine":536,"endColumn":70},{"ruleId":"173","severity":1,"message":"178","line":551,"column":68,"nodeType":"175","messageId":"176","endLine":551,"endColumn":70},{"ruleId":"173","severity":1,"message":"178","line":555,"column":93,"nodeType":"175","messageId":"176","endLine":555,"endColumn":95},{"ruleId":"173","severity":1,"message":"178","line":557,"column":67,"nodeType":"175","messageId":"176","endLine":557,"endColumn":69},{"ruleId":"173","severity":1,"message":"174","line":565,"column":67,"nodeType":"175","messageId":"176","endLine":565,"endColumn":69},{"ruleId":"200","severity":1,"message":"201","line":565,"column":76,"nodeType":"202","endLine":565,"endColumn":123},{"ruleId":"173","severity":1,"message":"178","line":578,"column":84,"nodeType":"175","messageId":"176","endLine":578,"endColumn":86},{"ruleId":"173","severity":1,"message":"174","line":590,"column":60,"nodeType":"175","messageId":"176","endLine":590,"endColumn":62},{"ruleId":"173","severity":1,"message":"174","line":594,"column":35,"nodeType":"175","messageId":"176","endLine":594,"endColumn":37},{"ruleId":"173","severity":1,"message":"174","line":595,"column":35,"nodeType":"175","messageId":"176","endLine":595,"endColumn":37},{"ruleId":"173","severity":1,"message":"174","line":604,"column":62,"nodeType":"175","messageId":"176","endLine":604,"endColumn":64},{"ruleId":"173","severity":1,"message":"174","line":604,"column":83,"nodeType":"175","messageId":"176","endLine":604,"endColumn":85},{"ruleId":"173","severity":1,"message":"174","line":611,"column":74,"nodeType":"175","messageId":"176","endLine":611,"endColumn":76},{"ruleId":"173","severity":1,"message":"178","line":611,"column":95,"nodeType":"175","messageId":"176","endLine":611,"endColumn":97},{"ruleId":"153","severity":1,"message":"177","line":2,"column":37,"nodeType":"155","messageId":"156","endLine":2,"endColumn":43},{"ruleId":"153","severity":1,"message":"203","line":3,"column":20,"nodeType":"155","messageId":"156","endLine":3,"endColumn":23},{"ruleId":"153","severity":1,"message":"204","line":3,"column":25,"nodeType":"155","messageId":"156","endLine":3,"endColumn":28},{"ruleId":"153","severity":1,"message":"205","line":7,"column":12,"nodeType":"155","messageId":"156","endLine":7,"endColumn":21},{"ruleId":"185","severity":1,"message":"206","line":14,"column":8,"nodeType":"187","endLine":14,"endColumn":10,"suggestions":"207"},"no-native-reassign",["208"],"no-negated-in-lhs",["209"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Modal' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'setLoginError' is assigned a value but never used.","'useEffect' is defined but never used.","'QuizCreate' is defined but never used.","'mode' is assigned a value but never used.","'setMode' is assigned a value but never used.","'quizChosen' is assigned a value but never used.","'quizValid' is assigned a value but never used.","'setQuizValid' is assigned a value but never used.","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"210","text":"211"},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'useRef' is defined but never used.","Expected '===' and instead saw '=='.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'renderBool' is assigned a value but never used.","'setRenderBool' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.questionEditGet'. Either include it or remove the dependency array. If 'setQuestion' needs the current value of 'props.questionEditGet', you can also switch to useReducer instead of useState and read 'props.questionEditGet' in the reducer.","ArrayExpression",["212"],"Unexpected mix of '||' and '&&'.","'useParams' is defined but never used.","'ProgressBar' is defined but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'answersOld', 'correctQuestCount', 'point', 'props.location.state.id', 'quizInfo', 'quizTime', and 'user.id'. Either include them or remove the dependency array.",["213"],"React Hook useEffect has missing dependencies: 'getQuizInfo' and 'quizInfo.length'. Either include them or remove the dependency array.",["214"],"React Hook useEffect has missing dependencies: 'answers', 'answersOld', 'questions', 'quizTime', 'time', and 'timerCountInterval'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setTime' needs the current value of 'questions'.",["215"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Row' is defined but never used.","'Col' is defined but never used.","'questions' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.questions', 'props.quizInfo', and 'props.reviewContent'. Either include them or remove the dependency array. If 'setMarkContent' needs the current value of 'props.reviewContent', you can also switch to useReducer instead of useState and read 'props.reviewContent' in the reducer.",["216"],"no-global-assign","no-unsafe-negation",[1820,1835],"\r\n            .",{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},{"desc":"223","fix":"224"},{"desc":"225","fix":"226"},"Update the dependencies array to be: [props.questionEditGet]",{"range":"227","text":"228"},"Update the dependencies array to be: [answersOld, correctQuestCount, markCompleted, point, props.location.state.id, quizInfo, quizTime, user.id]",{"range":"229","text":"230"},"Update the dependencies array to be: [getQuizInfo, quizInfo.length]",{"range":"231","text":"232"},"Update the dependencies array to be: [answers, answersOld, currentQuest, questions, quizTime, time, timerCountInterval]",{"range":"233","text":"234"},"Update the dependencies array to be: [props.questions, props.quizInfo, props.reviewContent]",{"range":"235","text":"236"},[11498,11500],"[props.questionEditGet]",[6533,6548],"[answersOld, correctQuestCount, markCompleted, point, props.location.state.id, quizInfo, quizTime, user.id]",[17889,17891],"[getQuizInfo, quizInfo.length]",[21454,21468],"[answers, answersOld, currentQuest, questions, quizTime, time, timerCountInterval]",[490,492],"[props.questions, props.quizInfo, props.reviewContent]"]