[{"D:\\Coding\\Online Quiz System\\online-quiz-system\\Client\\online-quiz-system\\src\\index.js":"1","D:\\Coding\\Online Quiz System\\online-quiz-system\\Client\\online-quiz-system\\src\\App.js":"2","D:\\Coding\\Online Quiz System\\online-quiz-system\\Client\\online-quiz-system\\src\\context\\AuthContext.js":"3","D:\\Coding\\Online Quiz System\\online-quiz-system\\Client\\online-quiz-system\\src\\context\\AuthReducer.js":"4","D:\\Coding\\Online Quiz System\\online-quiz-system\\Client\\online-quiz-system\\src\\pages\\home\\Home.jsx":"5","D:\\Coding\\Online Quiz System\\online-quiz-system\\Client\\online-quiz-system\\src\\pages\\auth\\Auth.jsx":"6","D:\\Coding\\Online Quiz System\\online-quiz-system\\Client\\online-quiz-system\\src\\pages\\quiz-main\\QuizMain.jsx":"7","D:\\Coding\\Online Quiz System\\online-quiz-system\\Client\\online-quiz-system\\src\\apiCalls.js":"8","D:\\Coding\\Online Quiz System\\online-quiz-system\\Client\\online-quiz-system\\src\\pages\\quiz-create\\QuizCreate.jsx":"9","D:\\Coding\\Online Quiz System\\online-quiz-system\\Client\\online-quiz-system\\src\\components\\quiz-review\\QuizReview.jsx":"10","D:\\Coding\\Online Quiz System\\online-quiz-system\\Client\\online-quiz-system\\src\\components\\question-edit-modal\\QuestionEditModal.jsx":"11","D:\\Coding\\Online Quiz System\\online-quiz-system\\Client\\online-quiz-system\\src\\components\\question-add-modal\\QuestionAddModal.jsx":"12","D:\\Coding\\Online Quiz System\\online-quiz-system\\Client\\online-quiz-system\\src\\firebase.js":"13","D:\\Coding\\Online Quiz System\\online-quiz-system\\Client\\online-quiz-system\\src\\pages\\quiz-attempts\\QuizAttempts.jsx":"14","D:\\Coding\\Online Quiz System\\online-quiz-system\\Client\\online-quiz-system\\src\\pages\\my-attempts\\MyAttempts.jsx":"15","D:\\Coding\\Online Quiz System\\online-quiz-system\\Client\\online-quiz-system\\src\\components\\headbar\\Headbar.jsx":"16"},{"size":430,"mtime":1630674053133,"results":"17","hashOfConfig":"18"},{"size":2999,"mtime":1630740813926,"results":"19","hashOfConfig":"18"},{"size":871,"mtime":1630745428979,"results":"20","hashOfConfig":"18"},{"size":659,"mtime":1627139889414,"results":"21","hashOfConfig":"18"},{"size":10054,"mtime":1630747080933,"results":"22","hashOfConfig":"18"},{"size":11277,"mtime":1630745346720,"results":"23","hashOfConfig":"18"},{"size":34884,"mtime":1630739795287,"results":"24","hashOfConfig":"18"},{"size":416,"mtime":1630739802699,"results":"25","hashOfConfig":"18"},{"size":17988,"mtime":1630739797496,"results":"26","hashOfConfig":"18"},{"size":5693,"mtime":1630680380582,"results":"27","hashOfConfig":"18"},{"size":23280,"mtime":1627827091959,"results":"28","hashOfConfig":"18"},{"size":19717,"mtime":1630505304054,"results":"29","hashOfConfig":"18"},{"size":474,"mtime":1627569937289,"results":"30","hashOfConfig":"18"},{"size":17583,"mtime":1630739799203,"results":"31","hashOfConfig":"18"},{"size":16594,"mtime":1630739800570,"results":"32","hashOfConfig":"18"},{"size":2219,"mtime":1630679596837,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},"1ljb60e",{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":43,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Coding\\Online Quiz System\\online-quiz-system\\Client\\online-quiz-system\\src\\index.js",["76"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {AuthContextProvider} from \"./context/AuthContext\"\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport {BrowserRouter} from 'react-router-dom';\n\nconst render = Component => {\n  ReactDOM.render(\n    <AuthContextProvider>\n      <App />\n    </AuthContextProvider>,\n    document.getElementById('root')\n  );  \n}\n\nrender(App)","D:\\Coding\\Online Quiz System\\online-quiz-system\\Client\\online-quiz-system\\src\\App.js",["77","78"],"import Auth from \"./pages/auth/Auth\";\nimport Home from \"./pages/home/Home\";\nimport QuizMain from \"./pages/quiz-main/QuizMain\";\nimport QuizAttempts from \"./pages/quiz-attempts/QuizAttempts\";\nimport MyAttempts from \"./pages/my-attempts/MyAttempts\";\nimport Headbar from \"./components/headbar/Headbar\";\nimport QuizCreate from \"./pages/quiz-create/QuizCreate\";\nimport \"./assets/css/index.css\";\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Redirect\n} from \"react-router-dom\";\nimport { useContext, useEffect } from \"react\";\nimport { AuthContext } from \"./context/AuthContext\";\n\nfunction App() {\n    const {user} = useContext(AuthContext);\n\n    useEffect(() => {\n        switch (window.location.pathname) {\n            case \"/\":\n                document.title = \"Online Quiz System\";\n                break;\n            case \"/home\":\n                document.title = \"Online Quiz System | Home\";\n                break;\n            case \"/attempts\":\n                document.title = \"Online Quiz System | My Records\";\n                break;\n            case \"/join\":\n                document.title = \"Online Quiz System | Quiz\";\n                break;\n            case \"/create\":\n                document.title = \"Online Quiz System | Create\";\n                break;\n            case \"/dashboard\":\n                document.title = \"Online Quiz System | Quiz Records\";\n                break;\n        }\n    }, [window.location.pathname])\n\n    return (\n        <div>\n        {window.location.pathname !== \"/join\" && user && <Headbar></Headbar>}\n\n\n        <Router>\n            <Switch>\n            <Route exact path=\"/\">\n                {user? <Redirect to=\"/home\"></Redirect> : <Auth></Auth>}\n            </Route>\n            <Route exact path=\"/home\">\n                {user? <Home></Home> : <Redirect to=\"/\"></Redirect>}\n            </Route>\n            <Route exact path=\"/create\">\n                {user && user.role === 1? <QuizCreate></QuizCreate> : <Redirect to=\"/\"></Redirect>}\n            </Route>\n            {\n                user && \n                <>\n                <Route exact path=\"/join\" \n                    render={(props) => <QuizMain {...props}/>}\n                />\n                <Route exact path=\"/dashboard\" \n                    render={(props) => <QuizAttempts {...props}></QuizAttempts>}\n                />\n                <Route exact path=\"/attempts\" \n                    render={(props) => <MyAttempts {...props}></MyAttempts>}\n                />\n                </>\n            }\n            {\n                !user && \n                <>\n                <Route exact path=\"/join\" \n                ><Redirect to=\"/\"></Redirect></Route>\n                <Route exact path=\"/dashboard\" \n                ><Redirect to=\"/\"></Redirect></Route>\n                <Route exact path=\"/attempts\" \n                ><Redirect to=\"/\"></Redirect></Route>\n                </>\n            }\n            </Switch>\n        </Router>\n        </div>\n    );\n}\n\nexport default App;\n","D:\\Coding\\Online Quiz System\\online-quiz-system\\Client\\online-quiz-system\\src\\context\\AuthContext.js",[],"D:\\Coding\\Online Quiz System\\online-quiz-system\\Client\\online-quiz-system\\src\\context\\AuthReducer.js",[],"D:\\Coding\\Online Quiz System\\online-quiz-system\\Client\\online-quiz-system\\src\\pages\\home\\Home.jsx",["79","80","81","82","83","84","85"],"D:\\Coding\\Online Quiz System\\online-quiz-system\\Client\\online-quiz-system\\src\\pages\\auth\\Auth.jsx",["86","87","88","89","90","91","92","93"],"import React from 'react';\r\nimport {useState, useRef, useContext} from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\"\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Dialog, DialogTitle, DialogContent, makeStyles } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport \"./auth.css\";\r\nimport axios from \"axios\";\r\nimport {loginCall} from \"../../apiCalls\";\r\nimport {AuthContext} from \"../../context/AuthContext\";\r\nimport Logo from \"./../../assets/images/ncn.png\";\r\nimport Cover from \"./../../assets/images/cover.png\";\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            {'Copyright © '}\r\n            <Link color=\"inherit\" href=\"https://nhannc.site/\">\r\n            Nguyen Cao Nhan\r\n            </Link>{' '}\r\n            {new Date().getFullYear()}\r\n            {'.'}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100vh',\r\n    },\r\n    image: {\r\n        backgroundImage: `url(${Cover})`,\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundColor:\r\n        theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\r\n        backgroundSize: 'cover',\r\n        backgroundPosition: 'center',\r\n    },\r\n    paper: {\r\n        margin: theme.spacing(8, 4),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    dialogWrapper: {\r\n        padding: theme.spacing(2),\r\n        position: 'absolute',\r\n        top: theme.spacing(5)\r\n    },\r\n    dialogTitle: {\r\n        paddingRight: '0px'\r\n    }\r\n}));\r\n\r\nexport default function Auth() {\r\n    const classes = useStyles();\r\n    const [openPopup, setOpenPopup ] = React.useState(false);\r\n    const [loginError, setLoginError] = React.useState(\"\");\r\n    const [registerError, setRegisterError] = React.useState(\"\");\r\n    const {dispatch} = useContext(AuthContext);\r\n    \r\n    //Login refs\r\n    const username = useRef();\r\n    const password = useRef();\r\n    \r\n    //Register refs\r\n    const usernameCreate = useRef();\r\n    const fullnameCreate = useRef();\r\n    const passwordCreate = useRef();\r\n    const passwordConfirm = useRef();\r\n\r\n    const handleLogin = async(e) => {\r\n        e.preventDefault();\r\n        loginCall({username: username.current.value, password: password.current.value}, dispatch);\r\n    }\r\n\r\n    const handleRegister = async(e) => {\r\n        e.preventDefault();\r\n        if (passwordConfirm.current.value !== passwordCreate.current.value) {\r\n            setRegisterError(\"Xác nhận mật khẩu không đúng\");\r\n        } else {\r\n            const user = {\r\n                username: usernameCreate.current.value,\r\n                fullname: fullnameCreate.current.value,\r\n                password: passwordCreate.current.value\r\n            }\r\n            try {\r\n                await axios.post(\"https://online-quiz-system-server.herokuapp.com/api/auth/register\", user);\r\n                //Perform login\r\n                loginCall({username: usernameCreate.current.value, password: passwordCreate.current.value}, dispatch);\r\n            } catch (err) {\r\n                console.log(err);\r\n                setRegisterError(\"Có lỗi xảy ra, vui lòng thử lại sau!\");\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container component=\"main\" className={classes.root}>\r\n                <CssBaseline />\r\n                <Grid item xs={false} sm={6} md={7} className={classes.image} />\r\n                <Grid item xs={12} sm={6} md={5} component={Paper} elevation={12} square style={{display: \"flex\", alignItems: \"center\"}}>\r\n                    <div className={classes.paper} style={{width: \"100%\"}}>\r\n                        <div className=\"text-center logo-container\">\r\n                            <img src={Logo}>\r\n                            </img>\r\n                        </div>\r\n                        <Typography component=\"h1\" variant=\"h5\">\r\n                            Đăng nhập\r\n                        </Typography>\r\n                        <form onSubmit={handleLogin} className={classes.form}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"username\"\r\n                                label=\"Tên đăng nhập\"\r\n                                name=\"username\"\r\n                                autoFocus\r\n                                inputRef={username}\r\n                            />\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"password\"\r\n                                label=\"Mật khẩu\"\r\n                                name=\"password\"\r\n                                type=\"password\"\r\n                                inputRef={password}\r\n                            />\r\n                            <p style={{margin: 0, padding: 0, color: \"red\", fontStyle: \"italic\"}}>{loginError}</p>\r\n                            <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                            >\r\n                            Đăng nhập\r\n                            </Button>\r\n                            <Grid container>\r\n                            <Grid item xs>\r\n                                <Link href=\"#\" variant=\"body2\" style={{opacity: 0}}>\r\n                                    Quên mật khẩu?\r\n                                </Link>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Link href=\"#\" onClick={() => setOpenPopup(true)}>\r\n                                    Tạo tài khoản\r\n                                </Link>\r\n                            </Grid>\r\n                            </Grid>\r\n                            <Box mt={5}>\r\n                            <Copyright />\r\n                            </Box>\r\n                        </form>\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n            <Dialog open={openPopup} maxWidth=\"sm\" fullWidth=\"true\" classes={{ paper: classes.dialogWrapper }}>\r\n                <DialogTitle className={classes.dialogTitle}>\r\n                    <div style={{ display: 'flex' }}>\r\n                        <Typography variant=\"h6\" component=\"div\" style={{ flexGrow: 1 }}>\r\n                            Đăng ký\r\n                        </Typography>\r\n                        <Button\r\n                            color=\"primary\"\r\n                            onClick={()=>{setOpenPopup(false)}}>\r\n                            <CloseIcon />\r\n                        </Button>\r\n                    </div>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <form onSubmit={handleRegister} className={classes.form}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"username-create\"\r\n                            label=\"Tên đăng nhập\"\r\n                            name=\"username-create\"\r\n                            inputProps={{ minLength: 6 }}\r\n                            inputRef={usernameCreate}\r\n                        />\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"fullname\"\r\n                            label=\"Tên đầy đủ\"\r\n                            name=\"fullname\"\r\n                            type=\"text\"\r\n                            inputRef={fullnameCreate}\r\n                        />\r\n                        <Grid container>\r\n                            <Grid item md={6} xs={12} className=\"leftSubGrid\">\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"password-create\"\r\n                                    label=\"Mật khẩu\"\r\n                                    name=\"password-create\"\r\n                                    type=\"password\"\r\n                                    inputProps={{ minLength: 6 }}\r\n                                    inputRef={passwordCreate}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={6} xs={12} className=\"rightSubGrid\">\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"password-confirm\"\r\n                                    label=\"Xác nhận mật khẩu\"\r\n                                    name=\"password-confirm\"\r\n                                    type=\"password\"\r\n                                    inputRef={passwordConfirm}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <p style={{margin: 0, padding: 0, color: \"red\", fontStyle: \"italic\"}}>{registerError}</p>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            className={classes.submit}>\r\n                                Đăng ký tài khoản\r\n                        </Button>\r\n                    </form>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n","D:\\Coding\\Online Quiz System\\online-quiz-system\\Client\\online-quiz-system\\src\\pages\\quiz-main\\QuizMain.jsx",["94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136"],"import {React, useState, useEffect, useContext, useRef} from 'react'\r\nimport \"./quizmain.css\";\r\nimport axios from \"axios\";\r\nimport {AuthContext} from \"../../context/AuthContext\";\r\nimport {\r\n    Redirect\r\n} from \"react-router-dom\";\r\nimport {Row, Col, Container, ProgressBar, Button, Form} from \"react-bootstrap\";\r\nimport QuizReview from \"./../../components/quiz-review/QuizReview\";\r\nimport PageVisibility from 'react-page-visibility';\r\n\r\n//Audio\r\nimport correctAudio from \"./../../assets/sounds/right.mp3\";\r\nimport wrongAudio from \"./../../assets/sounds/wrong.mp3\";\r\nimport invalidAudio from \"./../../assets/sounds/invalid.mp3\";\r\nimport timeThinking from \"./../../assets/sounds/time.wav\";\r\n\r\nfunction QuizMain(props) {\r\n    const {user} = useContext(AuthContext);\r\n    const [questions, setQuestions] = useState([]);\r\n    const [quizInfo, setQuizInfo] = useState([]);\r\n    const [point, setPoint] = useState(0);\r\n    const [currentQuest, setCurrentQuest] = useState(0);\r\n    const [quizTime, setQuizTime] = useState(false)\r\n    const [time, setTime] = useState(0);\r\n    const [quizStarted, setQuizStarted] = useState(false);\r\n    const [quizFinished, setQuizFinished] = useState(false);\r\n    const timerCount = useRef(0);\r\n    const [currentAnswersSet, setCurrentAnswersSet] = useState([]);\r\n    const [timeCountDown, setTimeCountDown] = useState(\"\");\r\n    const [timerCountInterval, setTimerCountInterval] = useState(0);\r\n    const [answerFieldClass, setAnswerFieldClass] = useState(false);\r\n    const [answers, setAnswers] = useState([]);\r\n    const [acceptingAnswers, setAcceptingAnswers] = useState([]);\r\n    const [answersOld, setAnswersOld] = useState([]);\r\n    const [currentAnswerField, setCurrentAnswerField] = useState(\"\");\r\n    const [answered, setAnswered] = useState(false);\r\n    const [answerDisplay, setAnswerDisplay] = useState(\"\");\r\n    const [correctQuestCount, setCorrectQuestCount] = useState(0);\r\n    const [answerBoxContent, setAnswerBoxContent] = useState(\"\");\r\n    const [markCompleted, setMarkCompleted] = useState(false);\r\n    const [quizReviewModalShow, setQuizReviewModalShow] = useState(false);\r\n    const [quizReviewModal, setQuizReviewModal] = useState(false);\r\n    const [directToHome, setDirectToHome] = useState(false);\r\n    const [thinkingAudio, setThinkingAudio] = useState(null);\r\n    const [isVisible, setIsVisible] = useState(true);\r\n\r\n    const shuffleArray = (array) => {\r\n        for (var i = array.length - 1; i > 0; i--) {\r\n            var j = Math.floor(Math.random() * (i + 1));\r\n            var temp = array[i];\r\n            array[i] = array[j];\r\n            array[j] = temp;\r\n        }\r\n        return array\r\n    }\r\n\r\n    const toHHMMSS = (secs) => {\r\n        var sec_num = parseInt(secs, 10)\r\n        var hours   = Math.floor(sec_num / 3600)\r\n        var minutes = Math.floor(sec_num / 60) % 60\r\n        var seconds = sec_num % 60\r\n    \r\n        return [hours,minutes,seconds]\r\n            .map(v => v < 10 ? \"0\" + v : v)\r\n            .filter((v,i) => v !== \"00\" || i > 0)\r\n            .join(\":\")\r\n    }\r\n\r\n    const nextQuest = () => {\r\n        if (quizTime && questions[currentQuest].question_time != null)\r\n        {\r\n            setTime(questions[currentQuest].question_time)\r\n        }\r\n        setCurrentQuest(currentQuest + 1)\r\n    }\r\n\r\n    const lastQuest = () => {\r\n        setCurrentQuest(currentQuest - 1)\r\n    }\r\n\r\n    const finish = async(mode) => {\r\n        if (mode === 1) {\r\n            const info = {\r\n                user_id: user.id,\r\n                quiz_id: props.location.state.id,\r\n                point: point, \r\n                time: null,\r\n                correct: correctQuestCount,\r\n                details: answersOld\r\n            }\r\n            setQuizReviewModal(true);\r\n            await axios.post(\"https://online-quiz-system-server.herokuapp.com/api/quiz/attempt\", info)\r\n            .then(res => {\r\n                setQuizReviewModalShow(true);\r\n            })\r\n            .catch(err => {\r\n\r\n            })\r\n        } else {\r\n            if (!answered) {\r\n                //Check answers\r\n                let point = 0;\r\n                let correctQuestCount = 0;\r\n                let getTmpOldAnswers = [];\r\n                for (let i = 0; i < answers.length; i++) {\r\n                    if (questions[i].question_type === 0) {\r\n                        //MCQ question\r\n                        getTmpOldAnswers.push({\r\n                            answer: answers[i],\r\n                            mark: false,\r\n                            question_id: questions[i].id,\r\n                            point: 0\r\n                        })\r\n                        for (let j = 0; j < questions[i].answers.length; j++) {\r\n                            let getAnswer = questions[i].answers[j];\r\n                            if (getAnswer.id === answers[i]) {\r\n                                if (getAnswer.is_correct === 1) {\r\n                                    getTmpOldAnswers[i].mark = true;\r\n                                    getTmpOldAnswers[i].point = questions[i].question_point;\r\n                                    point += questions[i].question_point\r\n                                    correctQuestCount++;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        getTmpOldAnswers.push({\r\n                            answer: answers[i],\r\n                            mark: false,\r\n                            question_id: questions[i].id,\r\n                            point: 0\r\n                        })\r\n                        let markResult = checkTextAnswer(answers[i], Buffer(questions[i].answers[0].answer_content, \"base64\").toString(\"utf-8\"));\r\n                        if (markResult) {\r\n                            getTmpOldAnswers[i].mark = true;\r\n                            getTmpOldAnswers[i].point = questions[i].question_point;\r\n                            point += questions[i].question_point\r\n                            correctQuestCount++;\r\n                        }\r\n                    }\r\n                }\r\n                setAnswersOld(getTmpOldAnswers);\r\n                setPoint(point);\r\n                setCorrectQuestCount(correctQuestCount);\r\n                setAnswered(true);\r\n                clearInterval(timerCountInterval);\r\n                setTimerCountInterval(null);\r\n                setAnswerFieldClass(true);\r\n                setMarkCompleted(true);\r\n            }\r\n        }\r\n        thinkingAudio.pause();\r\n        setQuizFinished(true);\r\n    }\r\n\r\n    useEffect(async() => {\r\n        if (!quizTime && markCompleted) {\r\n            const info = {\r\n                user_id: user.id,\r\n                quiz_id: props.location.state.id,\r\n                point: point, \r\n                time: quizInfo[\"quiz_time\"] - timerCount.current < 0? 0 : quizInfo[\"quiz_time\"] - timerCount.current,\r\n                correct: correctQuestCount,\r\n                details: answersOld\r\n            }\r\n            setQuizReviewModal(true);\r\n            await axios.post(\"https://online-quiz-system-server.herokuapp.com/api/quiz/attempt\", info)\r\n            .then(res => {\r\n                setQuizReviewModalShow(true);\r\n            })\r\n            .catch(err => {\r\n\r\n            })\r\n        }\r\n    }, [markCompleted])\r\n\r\n    const getQuizInfo = async() => {\r\n        await axios.get(`https://online-quiz-system-server.herokuapp.com/api/quiz/info/${props.location.state.id}`)\r\n        .then(async(res) => {\r\n            let thisQuizInfo = res.data;\r\n            setQuizInfo(thisQuizInfo[0]);\r\n            setQuizTime(thisQuizInfo[0][\"quiz_time\"] == null);\r\n            if (thisQuizInfo[0][\"quiz_time\"] != null) {\r\n                setTime(parseInt(thisQuizInfo[0][\"quiz_time\"]))\r\n                timerCount.current = parseInt(thisQuizInfo[0][\"quiz_time\"])\r\n                setTimeCountDown(toHHMMSS(timerCount.current));\r\n            }\r\n\r\n            await axios.get(`https://online-quiz-system-server.herokuapp.com/api/quiz/join/${props.location.state.id}`)\r\n            .then(async(res1) => {\r\n                let listOfQuestions = res1.data;\r\n                if (thisQuizInfo[0][\"raw_order\"] == 0) {\r\n                    listOfQuestions = await shuffleArray(listOfQuestions);\r\n                }\r\n                setQuestions(listOfQuestions);\r\n\r\n                if (!quizTime) {\r\n                    let tmpValidArray = [];\r\n                    for (let i = 0; i < listOfQuestions.length; i++) {\r\n                        answers.push(\"\");\r\n                        tmpValidArray.push(true);\r\n                    }\r\n                    setAnswers(answers);\r\n                    setAcceptingAnswers(tmpValidArray);\r\n                }\r\n            })\r\n            .catch(err1 => {\r\n                console.log(err1);\r\n            });\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n        \r\n    }\r\n\r\n    const checkAnswerMCQ = (answer_id) => {\r\n        if (!answered) {\r\n            if (quizTime) {\r\n                let getTmpOldAnswers = answersOld;\r\n                getTmpOldAnswers.push({\r\n                    answer: answer_id,\r\n                    mark: false,\r\n                    question_id: questions[currentQuest - 1].id,\r\n                    point: 0\r\n                }) \r\n                setAnswered(true);\r\n                for (let i = 0; i < questions[currentQuest - 1].answers.length; i++) {\r\n                    let getAnswer = questions[currentQuest - 1].answers[i];\r\n                    if (getAnswer.id === answer_id) {\r\n                        if (getAnswer.is_correct === 1) {\r\n                            setPoint(point + questions[currentQuest - 1].question_point);\r\n                            setCorrectQuestCount(correctQuestCount + 1);\r\n                            getTmpOldAnswers[currentQuest - 1].mark = true;\r\n                            getTmpOldAnswers[currentQuest - 1].point = questions[currentQuest - 1].question_point;\r\n                            new Audio(correctAudio).play();\r\n                        } else {\r\n                            new Audio(wrongAudio).play();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                setAnswersOld(getTmpOldAnswers);\r\n                clearInterval(timerCountInterval);\r\n                setTimerCountInterval(null);\r\n            }\r\n        }\r\n        if (!quizTime) {\r\n            if (acceptingAnswers[currentQuest - 1]) {\r\n                let getTmpAnswer = answers;\r\n                getTmpAnswer[currentQuest - 1] = answer_id;\r\n                setAnswers(getTmpAnswer);\r\n            }\r\n        }\r\n    }\r\n\r\n    const checkAnswerText = (e) => {\r\n        if (!answered) {\r\n            if (quizTime) {\r\n                if (e.key == \"Enter\") {\r\n                    e.preventDefault();\r\n                    setAnswered(true);\r\n                    let getTmpOldAnswers = answersOld;\r\n                    getTmpOldAnswers.push({\r\n                        answer: e.target.value,\r\n                        mark: false,\r\n                        question_id: questions[currentQuest - 1].id,\r\n                        point: 0\r\n                    })\r\n                    let answersList = Buffer(questions[currentQuest - 1].answers[0].answer_content, \"base64\").toString(\"utf-8\");\r\n                    answersList = answersList.split(\"~|\")\r\n                    setAnswerDisplay(answersList[0].replace(\"~>\", \", \").replace(\"~+\", \", \"));\r\n                    let markResult = checkTextAnswer(e.target.value, Buffer(questions[currentQuest - 1].answers[0].answer_content, \"base64\").toString(\"utf-8\"));\r\n                    if (markResult) {\r\n                        setPoint(point + questions[currentQuest - 1].question_point);\r\n                        setCorrectQuestCount(correctQuestCount + 1);\r\n                        getTmpOldAnswers[currentQuest - 1].mark = true;\r\n                        getTmpOldAnswers[currentQuest - 1].point = questions[currentQuest - 1].question_point;\r\n                        new Audio(correctAudio).play();\r\n                    } else {\r\n                        new Audio(wrongAudio).play();\r\n                    }\r\n                    setAnswersOld(getTmpOldAnswers);\r\n                    setAnswerFieldClass(true);\r\n                    clearInterval(timerCountInterval);\r\n                    setTimerCountInterval(null);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const checkAnswerTextFromTimeOut = (mode, answer) => {\r\n        if (mode === 0) {\r\n            let getTmpOldAnswers = answersOld;\r\n            getTmpOldAnswers.push({\r\n                answer: answer,\r\n                mark: false,\r\n                question_id: questions[currentQuest - 1].id,\r\n                point: 0\r\n            }) \r\n            setAnswered(true);\r\n            setAnswersOld(getTmpOldAnswers);\r\n        } else {\r\n            setAnswered(true);\r\n            let getTmpOldAnswers = answersOld;\r\n            getTmpOldAnswers.push({\r\n                answer: answer,\r\n                mark: false,\r\n                question_id: questions[currentQuest - 1].id,\r\n                point: 0\r\n            })\r\n            setAnswersOld(getTmpOldAnswers);\r\n            let answersList = Buffer(questions[currentQuest - 1].answers[0].answer_content, \"base64\").toString(\"utf-8\");\r\n            answersList = answersList.split(\"~|\")\r\n            setAnswerDisplay(answersList[0].replace(\"~>\", \", \").replace(\"~+\", \", \"));\r\n            setAnswerFieldClass(true);\r\n        }\r\n    }\r\n\r\n    const checkTextAnswer = (answer, key) => {\r\n        key = key.replaceAll(\"~|\", \"|\");\r\n        let keyArr = key.split(\"|\");\r\n        let mark = false;\r\n        for (let i = 0; i < keyArr.length; i++) {\r\n            let tmpAnswer = answer.trim().toUpperCase();\r\n            let tmpAnswer1 = tmpAnswer;\r\n            if (tmpAnswer1 == keyArr[i].toUpperCase()) {\r\n                mark = true;\r\n            } else if (keyArr[i].includes(\"~>\")) {\r\n                let tmpMark = true;\r\n                let tmpStr = keyArr[i].replaceAll(\"~>\", \"|\");\r\n                let tmpKeyArr = tmpStr.split(\"|\");\r\n                let tmpAnswerForModify = tmpAnswer1;\r\n                if (tmpAnswerForModify.includes(\" , \")) tmpAnswerForModify = tmpAnswer1.replaceAll(\" , \", \"|\");\r\n                if (tmpAnswerForModify.includes(\" ,\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\" ,\", \"|\");\r\n                if (tmpAnswerForModify.includes(\", \")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\", \", \"|\");\r\n                if (tmpAnswerForModify.includes(\",\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\",\", \"|\");\r\n                if (tmpAnswerForModify.includes(\" - \")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\" - \", \"|\");\r\n                if (tmpAnswerForModify.includes(\"- \")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\"- \", \"|\");\r\n                if (tmpAnswerForModify.includes(\" -\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\" -\", \"|\");\r\n                if (tmpAnswerForModify.includes(\"-\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\"-\", \"|\");\r\n                if (tmpAnswerForModify.includes(\"|\")) {\r\n                    let tmpSubAnswerArr = tmpAnswerForModify.Split('|');\r\n                    if (tmpSubAnswerArr.length != tmpKeyArr.length) {\r\n                        tmpMark = false;\r\n                    } else {\r\n                        let tmp = true;\r\n                        for (let a = 0; a < tmpSubAnswerArr.length; a++) {\r\n                            if (tmpSubAnswerArr[a] != tmpKeyArr[a].toUpperCase()) {\r\n                                tmp = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (!tmp) {\r\n                            tmpMark = false;\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (tmpAnswerForModify.length != tmpKeyArr.length) {\r\n                        tmpMark = false;\r\n                    } else {\r\n                        let tmp = true;\r\n                        for (let a = 0; a < tmpAnswerForModify.length; a++) {\r\n                            if (tmpAnswerForModify[a].toString() != tmpKeyArr[a].toUpperCase()) {\r\n                                tmp = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (!tmp) {\r\n                            tmpMark = false;\r\n                        }\r\n                    }\r\n                }\r\n                mark = tmpMark;\r\n            } else if (keyArr[i].includes(\"~+\")) {\r\n                let tmpMark = true;\r\n                let tmpStr = keyArr[i].replaceAll(\"~+\", \"|\");\r\n                let tmpKeyArr = tmpStr.split(\"|\");\r\n                let tmpAnswerForModify = tmpAnswer1;\r\n                if (tmpAnswerForModify.includes(\" , \")) tmpAnswerForModify = tmpAnswer1.replaceAll(\" , \", \"|\");\r\n                if (tmpAnswerForModify.includes(\" ,\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\" ,\", \"|\");\r\n                if (tmpAnswerForModify.includes(\", \")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\", \", \"|\");\r\n                if (tmpAnswerForModify.includes(\",\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\",\", \"|\");\r\n                if (tmpAnswerForModify.includes(\" - \")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\" - \", \"|\");\r\n                if (tmpAnswerForModify.includes(\"- \")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\"- \", \"|\");\r\n                if (tmpAnswerForModify.includes(\" -\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\" -\", \"|\");\r\n                if (tmpAnswerForModify.includes(\"-\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\"-\", \"|\");\r\n                if (tmpAnswerForModify.includes(\"|\")) {\r\n                    let tmpSubAnswerArr = tmpAnswerForModify.Split('|');\r\n                    if (tmpSubAnswerArr.length != tmpKeyArr.length) {\r\n                        tmpMark = false;\r\n                    } else {\r\n                        for (let a = 0; a < tmpSubAnswerArr.length; a++) {\r\n                            let found = false;\r\n                            for (let b = 0; b < tmpKeyArr.length; b++)\r\n                            {\r\n                                if (tmpSubAnswerArr[a] == tmpKeyArr[b].toUpperCase()) \r\n                                {\r\n                                    found = true;\r\n                                    break;\r\n                                }\r\n\r\n                            }\r\n                            if (!found)\r\n                            {\r\n                                tmpMark = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (tmpAnswerForModify.length != tmpKeyArr.length) {\r\n                        tmpMark = false;\r\n                    } else {\r\n                        for (let a = 0; a < tmpAnswerForModify.length; a++)\r\n                        {\r\n                            let found = false;\r\n                            for (let b = 0; b < tmpKeyArr.length; b++)\r\n                            {\r\n                                if (tmpAnswerForModify[a].toString() == tmpKeyArr[b].toUpperCase())\r\n                                {\r\n                                    found = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            if (!found)\r\n                            {\r\n                                tmpMark = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                mark = tmpMark;\r\n            }\r\n            if (mark)\r\n                break;\r\n        }\r\n        return mark;\r\n    }\r\n\r\n    const handleBoxChange = (e) => {\r\n        if (!quizTime) {\r\n            let getAnswers = [...answers];\r\n            getAnswers[currentQuest - 1] = e.target.value;\r\n            setCurrentAnswerField(e.target.value);\r\n            setAnswers(getAnswers);\r\n        } else {\r\n            setAnswerBoxContent(e.target.value);\r\n        }\r\n    }\r\n\r\n    const visibilityChange = () => {\r\n        let getCurrent = isVisible;\r\n        setIsVisible(!isVisible);\r\n        if (getCurrent) {\r\n            //Case move to other page\r\n            if (quizTime && !answered && timerCountInterval && quizStarted && !quizFinished) { \r\n                if (questions[currentQuest - 1].question_type === 0)\r\n                    checkAnswerTextFromTimeOut(0, -1);\r\n                else\r\n                    checkAnswerTextFromTimeOut(1, \"\");\r\n                let tmpAudio = new Audio(invalidAudio);\r\n                tmpAudio.volume = 0.3;\r\n                tmpAudio.play();\r\n                clearInterval(timerCountInterval);\r\n                setTimerCountInterval(null);\r\n            } else if (!quizTime && quizStarted && !quizFinished) {\r\n                let tmpArray = acceptingAnswers;\r\n                acceptingAnswers[currentQuest - 1] = false;\r\n                setAcceptingAnswers(tmpArray);\r\n                setAnswerFieldClass(true);\r\n                let getAnswers = [...answers];\r\n                if (questions[currentQuest - 1].question_type === 1) {\r\n                    getAnswers[currentQuest - 1] = \"\";\r\n                } else {\r\n                    getAnswers[currentQuest - 1] = -1;\r\n                }\r\n                setAnswers(getAnswers);\r\n                let tmpAudio = new Audio(invalidAudio);\r\n                tmpAudio.volume = 0.3;\r\n                tmpAudio.play();\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (quizInfo.length == 0) {\r\n            getQuizInfo();\r\n        }\r\n        if (thinkingAudio == null) {\r\n            setThinkingAudio(new Audio(timeThinking));\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (thinkingAudio != null) {\r\n            thinkingAudio.volume = 0.25;\r\n            thinkingAudio.addEventListener('ended', function () {\r\n                this.currentTime = 0;\r\n                setTimeout(() => {\r\n                    this.play();\r\n                }, 1000);\r\n            }, false);\r\n        }\r\n    }, [thinkingAudio])\r\n\r\n    useEffect(() => {\r\n        if (quizTime) {\r\n            clearInterval(timerCountInterval);\r\n            setTimerCountInterval(null);\r\n            setAnswered(false);\r\n            setAnswerDisplay(\"\");\r\n            setAnswerFieldClass(false);\r\n            setAnswerBoxContent(\"\");\r\n        }\r\n\r\n        if (currentQuest != 0) {\r\n            let getAnswers = questions[currentQuest - 1].answers;\r\n            getAnswers = shuffleArray(getAnswers);\r\n            setCurrentAnswersSet(getAnswers);\r\n\r\n            if (!quizTime) {\r\n                if (acceptingAnswers[currentQuest - 1]) {\r\n                    setCurrentAnswerField(answers[currentQuest - 1]);\r\n                    setAnswerFieldClass(false);\r\n                } else {\r\n                    setAnswerFieldClass(true);\r\n                }\r\n            }\r\n        }\r\n        if (currentQuest == 1) {\r\n            setQuizStarted(true);\r\n            if (quizTime && questions[currentQuest - 1].question_time != null)\r\n            {\r\n                setTime(questions[currentQuest].question_time)\r\n                timerCount.current = questions[currentQuest].question_time;\r\n                setTimeCountDown(toHHMMSS(timerCount.current));\r\n            }\r\n\r\n            let getTime = quizTime? questions[currentQuest - 1].question_time : time;\r\n            thinkingAudio.play();\r\n\r\n            if (quizTime)\r\n            {\r\n                timerCount.current = getTime;\r\n                setTimeCountDown(toHHMMSS(timerCount.current));\r\n            }\r\n            if (!timerCountInterval) {\r\n                let timerCountInterval = setInterval(() => {\r\n                    timerCount.current = timerCount.current - 1;\r\n                    setTimeCountDown(toHHMMSS(timerCount.current));\r\n                    if (timerCount.current == 0) {\r\n                        clearInterval(timerCountInterval);\r\n                        setTimerCountInterval(null);\r\n                        timerCount.current = 0;\r\n                        setTimeCountDown(\"00:00\");\r\n                        setAnswerFieldClass(true);\r\n                        if (quizTime) {\r\n                            if (questions[currentQuest - 1].question_type === 0)\r\n                                checkAnswerTextFromTimeOut(0, -1);\r\n                            else\r\n                                checkAnswerTextFromTimeOut(1, \"\");\r\n                        } else {\r\n                            finish(0);\r\n                        }\r\n                    }\r\n                }, 1000);\r\n                setTimerCountInterval(timerCountInterval);\r\n            }\r\n        } \r\n        if (currentQuest != 0 && currentQuest != 1 && quizTime) {\r\n            let getTime = quizTime? questions[currentQuest - 1].question_time : time;\r\n\r\n            if (quizTime)\r\n            {\r\n                timerCount.current = getTime;\r\n                setTimeCountDown(toHHMMSS(timerCount.current));\r\n            }\r\n            if (!timerCountInterval) {\r\n                let timerCountInterval = setInterval(() => {\r\n                    timerCount.current = timerCount.current - 1;\r\n                    setTimeCountDown(toHHMMSS(timerCount.current));\r\n                    if (timerCount.current == 0) {\r\n                        clearInterval(timerCountInterval);\r\n                        setTimerCountInterval(null);\r\n                        timerCount.current = 0;\r\n                        setTimeCountDown(\"00:00\");\r\n                        setAnswerFieldClass(true);\r\n                        if (quizTime) {\r\n                            if (questions[currentQuest - 1].question_type === 0)\r\n                                checkAnswerTextFromTimeOut(0, -1);\r\n                            else\r\n                                checkAnswerTextFromTimeOut(1, \"\");\r\n                        }\r\n                    }\r\n                }, 1000);\r\n                setTimerCountInterval(timerCountInterval);\r\n            }\r\n        }\r\n    }, [currentQuest])\r\n\r\n    return (\r\n        <PageVisibility onChange={() => visibilityChange()}>\r\n        <>\r\n            {!quizReviewModal && questions.length == 0 && (<p>Loading Questions</p>)}\r\n            {!quizReviewModal && questions.length != 0 && (\r\n                <Container className=\"mt-3 mb-3 quiz-container\">\r\n                    <h2 className=\"text-center\">{quizInfo.quiz_title}</h2>\r\n                    <p className=\"text-center m-1\">Tạo bởi: {quizInfo.creator}</p>\r\n                    <div className=\"info-block\">\r\n                        <Row className=\"text-left\">\r\n                            <p className=\"info\">Điểm: {point}</p>\r\n                            <p className=\"info\">Thời gian: {timeCountDown}</p>\r\n                        </Row>\r\n                    </div>\r\n                    {currentQuest !== 0 && <h5 className=\"text-center\">\r\n                        Câu hỏi: {currentQuest}/{questions.length}\r\n                    </h5>}\r\n                    {/* <div className=\"progress mb-2\">\r\n                        <ProgressBar \r\n                            variant=\"info\"\r\n                            striped \r\n                            now={progressBarWidth}\r\n                            style={{width: '100%'}}\r\n                        ></ProgressBar>\r\n                        \r\n                    </div> */}\r\n                    <div className=\"text-center\">\r\n                        \r\n                    </div>\r\n                    {currentQuest == 0 && (\r\n                        <div className=\"text-center\">\r\n                            <Button onClick={() => setCurrentQuest(1)} variant=\"info\" className=\"btn-rounded text-white text-center\">Bắt đầu</Button>\r\n                        </div>\r\n                    )}\r\n                    {currentQuest != 0 && \r\n                        <>\r\n                        {!acceptingAnswers[currentQuest - 1] && \r\n                            <div className=\"mt-1 mb-1 text-center\">\r\n                                <p className=\"error\">Câu hỏi phạm vi. Câu trả lời sẽ không được tính</p>\r\n                            </div>\r\n                        }\r\n                        <div className=\"question-box d-flex justify-content-center align-items-center\">\r\n                            <h5 className=\"txt-quest\">{questions[currentQuest - 1].question_content}</h5>\r\n                        </div>\r\n                        {questions[currentQuest - 1].media != \"\" && <div className=\"text-center mt-2\">\r\n                            <img className=\"img-quest\" src={questions[currentQuest - 1].media}></img>\r\n                        </div>}\r\n                        {questions[currentQuest - 1].question_type == 1 && \r\n                        <div>\r\n                            {\r\n                                \r\n                                !quizTime && \r\n                                (<Form.Control value={currentAnswerField} disabled={answerFieldClass} type=\"text\" className=\"mt-2\" placeholder=\"Câu trả lời\" onKeyPress={(e) => checkAnswerText(e)} onChange={(e) => handleBoxChange(e)}>\r\n                                </Form.Control>)\r\n                            }\r\n                            {\r\n                                quizTime && (\r\n                                    <Form.Control value={answerBoxContent} disabled={answerFieldClass} type=\"text\" className=\"mt-2\" placeholder=\"Câu trả lời\" onKeyPress={(e) => checkAnswerText(e)} onChange={(e) => handleBoxChange(e)}>\r\n                                    </Form.Control>\r\n                                )\r\n                            }\r\n                        </div>}\r\n                        {questions[currentQuest - 1].question_type == 0 && \r\n                            <Row className=\"mt-2\">\r\n                                {\r\n                                    currentAnswersSet.map((answer, i) => {\r\n                                        let chosen = !quizTime && answers[currentQuest - 1] == answer.id? \"answer-content text-center chosen\": \"answer-content text-center\";\r\n                                        if (quizTime && answered) {\r\n                                            if (answer.is_correct == 1)\r\n                                                chosen = \"answer-content text-center correct\"\r\n                                            else \r\n                                                chosen = \"answer-content text-center wrong\"\r\n                                        }\r\n                                        return (\r\n                                            <Col lg={6} md={6} sm={12} className=\"p-1 answer\">\r\n                                                <div className={chosen} onClick={() => checkAnswerMCQ(answer.id)}>\r\n                                                    {answer.media != \"\" && <img className=\"img-answer\" src={answer.media}></img>}\r\n                                                    {Buffer(answer.answer_content, \"base64\").toString(\"utf-8\")}\r\n                                                </div>\r\n                                            </Col>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </Row>\r\n                        }\r\n                        {\r\n                            quizTime && answered && (\r\n                                <div className=\"text-center mt-1\">\r\n                                    {\r\n                                        questions[currentQuest - 1].answers.length == 1 && (\r\n                                            <h5>Đáp án: {answerDisplay}</h5>\r\n                                        )\r\n                                    }\r\n                                    <h5>{Buffer(questions[currentQuest - 1].explanation, \"base64\").toString(\"utf-8\")}</h5>\r\n                                </div>\r\n                            )\r\n                        }\r\n                        </>\r\n                    }\r\n                </Container>\r\n            )}\r\n            {!quizReviewModal && !quizTime && currentQuest != 0 && (\r\n                <>\r\n                {!answered && (\r\n                    <div className=\"text-center\">\r\n                    {currentQuest != 1 && (<Button onClick={() => lastQuest()} variant=\"info\" className=\"btn-rounded text-white text-center btn-mr\" style={{marginRight: \"5px\"}}>Trước</Button>)}\r\n                    {currentQuest != questions.length && (<Button onClick={() => nextQuest()} variant=\"info\" className=\"btn-rounded text-white text-center ml-1\">Tiếp</Button>)}\r\n                    </div>\r\n                )}\r\n                <div className=\"text-center mt-2 complete-block\">\r\n                    <Button onClick={() => finish(0)} variant=\"success\" className=\"btn-rounded text-white text-center\">Hoàn thành</Button>\r\n                </div>\r\n                </>\r\n            )}\r\n            {\r\n                !quizReviewModal && quizTime && currentQuest != 0 && currentQuest != answers.length && answered && (\r\n                    <div className=\"text-center\">\r\n                        <Button onClick={() => nextQuest()} variant=\"info\" className=\"btn-rounded text-white text-center\">Tiếp</Button>\r\n                    </div>\r\n                )\r\n            }\r\n            {\r\n                !quizReviewModal && quizTime && answered && currentQuest != 0 && currentQuest == answers.length && (\r\n                    <div className=\"text-center mt-2 complete-block\">\r\n                        <Button onClick={() => finish(1)} variant=\"success\" className=\"btn-rounded text-white text-center\">Hoàn thành</Button>\r\n                    </div>\r\n                )\r\n            }\r\n\r\n            {\r\n                quizReviewModal && <><QuizReview\r\n                    show={quizReviewModalShow}\r\n                    onHide={() => setQuizReviewModalShow(false)}\r\n                    reviewContent={answersOld}\r\n                    questions={questions}\r\n                    quizInfo={quizInfo}\r\n                    \r\n                >\r\n\r\n                </QuizReview>\r\n                <div className=\"mt-3 text-center mb-3\">\r\n                    <Button variant=\"info\" className=\"text-white\" onClick={() => setDirectToHome(true)}>Kết thúc</Button>\r\n                </div>\r\n                </>\r\n            }\r\n\r\n            {\r\n                directToHome && <Redirect to=\"/home\"></Redirect>\r\n            }\r\n        </>\r\n        </PageVisibility>\r\n    )\r\n}\r\n\r\nexport default QuizMain\r\n","D:\\Coding\\Online Quiz System\\online-quiz-system\\Client\\online-quiz-system\\src\\apiCalls.js",[],"D:\\Coding\\Online Quiz System\\online-quiz-system\\Client\\online-quiz-system\\src\\pages\\quiz-create\\QuizCreate.jsx",["137","138","139","140"],"import \"./quizcreate.css\";\r\nimport {React, useState, useEffect, useContext, useRef} from 'react'\r\nimport QuestionAddModal from \"./../../components/question-add-modal/QuestionAddModal\";\r\nimport QuestionEditModal from \"./../../components/question-edit-modal/QuestionEditModal\";\r\nimport {AuthContext} from \"../../context/AuthContext\";\r\nimport axios from \"axios\";\r\nimport {Paper, Chip} from \"@material-ui/core\";\r\nimport {\r\n    Redirect\r\n} from \"react-router-dom\";\r\n\r\n//Bootstrap\r\nimport {Container, Col, Row, Form, Button, Modal} from \"react-bootstrap\";\r\n\r\n//Material UI icons\r\nimport {Add} from \"@material-ui/icons\";  \r\n\r\nexport default function QuizCreate() {\r\n    const {user} = useContext(AuthContext);\r\n    const [quizTitle, setQuizTitle] = useState(\"\");\r\n    const [quizCode, setQuizCode] = useState(\"\");\r\n    const [quizMode, setQuizMode] = useState(0);\r\n    const [quizTime, setQuizTime] = useState(\"\");\r\n    const [numberOfQuest, setNumberOfQuest] = useState(0)\r\n    const [useQuizTime, setUseQuizTime] = useState(false);\r\n    const [questionList, setQuestionList] = useState([]);\r\n    const [addQuestionModalShow, setAddQuestionModalShow] = useState(false);\r\n    const [submittedQuizDetails, setSubmittedQuizDetails] = useState(false);\r\n    const [quizDetailError, setQuizDetailError] = useState(\"\");\r\n    const [timeUnit, setTimeUnit] = useState(0);\r\n    const [editQuestionModalShow, setEditQuestionModalShow] = useState(false);\r\n    const [questionEditGet, setQuestionEditGet] = useState(null);\r\n    const [rawOrder, setRawOrder] = useState(false);\r\n    const [errorModalShowing, setErrorModalShowing] = useState(false);\r\n    const [error, setError] = useState(\"\");\r\n    const [redirect, setRedirect] = useState(false);\r\n\r\n    const onQuizModeChange = (type) => {\r\n        setQuizMode(type);\r\n    }\r\n\r\n    const onAddQuestionSubmit = (input) => {\r\n        setQuestionList([...questionList, input]);\r\n        setAddQuestionModalShow(false);\r\n    }\r\n\r\n    const onEditQuestionSubmit = (input) => {\r\n        let cloneArray = [...questionList];\r\n        let {questIndex, ...content} = input;\r\n        cloneArray[input[\"questIndex\"]] = content;\r\n        setQuestionList(cloneArray);\r\n        setEditQuestionModalShow(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setNumberOfQuest(questionList.length);\r\n    }, [questionList])\r\n\r\n    useEffect(async() => {\r\n        //Check if is admin\r\n        await axios.post(\"https://online-quiz-system-server.herokuapp.com/api/auth/check-admin\", user)\r\n        .then(res => {\r\n            \r\n        })\r\n        .catch(err => {\r\n            setRedirect(true);\r\n        })\r\n    }, []);\r\n\r\n    const submitQuizDetails = () => {\r\n        //Validate info\r\n        if (quizTitle === \"\") {\r\n            setQuizDetailError(\"Vui lòng nhập tiêu đề Quiz.\");\r\n            return;\r\n        }\r\n        if (quizMode === 1 && quizCode === \"\") {\r\n            setQuizDetailError(\"Vui lòng nhập mật khẩu Quiz.\");\r\n            return;\r\n        }\r\n        if (useQuizTime && isNaN(parseInt(quizTime))) {\r\n            setQuizDetailError(\"Thời gian quiz không hợp lệ.\");\r\n            return;\r\n        }\r\n\r\n        //Pass validation\r\n        setSubmittedQuizDetails(true);\r\n    }\r\n\r\n    const editQuestion = (index) => {\r\n        let getQuest = questionList[index];\r\n        getQuest[\"questIndex\"] = index;\r\n        setQuestionEditGet(getQuest);\r\n        setEditQuestionModalShow(true);\r\n    }\r\n\r\n    const addQuiz = async() => {\r\n        const newQuiz = {\r\n            quiz_title: quizTitle, \r\n            quiz_mode: quizMode,\r\n            quiz_creator: user.id,\r\n            raw_order: rawOrder\r\n        }\r\n\r\n        let cloneQuestionList = [...questionList];\r\n        for (let i = 0; i < cloneQuestionList.length; i++) {\r\n            cloneQuestionList[i][\"questIndex\"] = i;\r\n        }\r\n\r\n        //Quiz code\r\n        if (quizCode !== \"\")\r\n            newQuiz[\"quiz_code\"] = quizCode;\r\n\r\n        //Quiz time\r\n        if (useQuizTime)\r\n        {\r\n            newQuiz[\"quiz_time\"] = timeUnit == 0? quizTime * 60 : quizTime;\r\n        }\r\n\r\n        newQuiz[\"questions\"] = cloneQuestionList;\r\n\r\n        axios.post(\"https://online-quiz-system-server.herokuapp.com/api/quiz/create\", newQuiz)\r\n        .then(res => {\r\n            //Do nothing\r\n            setRedirect(true);\r\n        })\r\n        .catch(err => {\r\n            if (err.response.status === 403) {\r\n                setError(\"Mã trận đã tồn tại. Vui lòng sử dụng mã khác\");\r\n                setErrorModalShowing(true);\r\n            } else if (err.response.status === 500) {\r\n                setError(\"Đã có lỗi xảy ra. Vui lòng thử lại sau\");\r\n                setErrorModalShowing(true);\r\n            }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Container className=\"p-4\">\r\n                <h2 className=\"text-center\">Tạo Quiz</h2>\r\n\r\n                <Row>\r\n                    <Col md={8} sm={12} className=\"offset-md-2 offset-sm-0\">\r\n                        <Form id=\"quizDetailForm\">\r\n                            <fieldset disabled={submittedQuizDetails? \"disabled\" : \"\"}>\r\n                                <Form.Group className=\"mb-2\" controlId=\"formBasicEmail\">\r\n                                    <Form.Label>Tiêu đề</Form.Label>\r\n                                    <Form.Control type=\"text\" required validate=\"Quiz name is not valid!\"\r\n                                    onChange={(e) => setQuizTitle(e.target.value)}/>\r\n                                </Form.Group>\r\n                                <fieldset>\r\n                                    <Form.Group as={Row} className=\"mb-2\">\r\n                                    <Form.Label as=\"legend\" column sm={12}>\r\n                                        Chế độ:\r\n                                    </Form.Label>\r\n                                    <Col sm={12}>\r\n                                        <Form.Check\r\n                                            type=\"radio\"\r\n                                            label=\"Công khai\"\r\n                                            name=\"quiz-mode\"\r\n                                            checked={quizMode === 0}\r\n                                            onChange={() => onQuizModeChange(0)}\r\n                                        />\r\n                                        <Form.Check\r\n                                            type=\"radio\"\r\n                                            label=\"Riêng tư\"\r\n                                            name=\"quiz-mode\"\r\n                                            checked={quizMode === 1}\r\n                                            onChange={() => onQuizModeChange(1)}\r\n                                        />\r\n                                    </Col>\r\n                                    </Form.Group>\r\n                                </fieldset>\r\n                                <Form.Group className=\"mb-2\" controlId=\"formBasicEmail\">\r\n                                    <Form.Label>Mật khẩu</Form.Label>\r\n                                    <Form.Control \r\n                                        type=\"text\"\r\n                                        validate=\"Quiz password is not valid!\" \r\n                                        minLength={6} maxLength={10}\r\n                                        disabled = {quizMode === 0 && \"disabled\"}\r\n                                        onChange = {(e) => setQuizCode(e.target.value)}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group className=\"mb-2\" controlId=\"formBasicEmail\">\r\n                                    <Form.Check \r\n                                        label=\"Thời gian\" \r\n                                        onChange = {() => setUseQuizTime(!useQuizTime)} \r\n                                    />\r\n                                    <Form.Text muted>\r\n                                        Lựa chọn và nhập thời gian làm bài cho toàn bộ quiz hoặc không lựa chọn và đặt thời gian riêng lẻ cho từng câu hỏi.\r\n                                    </Form.Text>\r\n                                    <Row>\r\n                                        <Col sm={9}>\r\n                                            <Form.Control \r\n                                                type=\"number\"\r\n                                                min = {1}\r\n                                                validate=\"Quiz password is not valid!\" \r\n                                                disabled = {!useQuizTime && \"disabled\"}\r\n                                                onChange = {(e) => {setQuizTime(e.target.value)}}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col sm={3} className=\"d-flex align-items-center\">\r\n                                            <Form.Check \r\n                                                type=\"radio\"\r\n                                                inline\r\n                                                label=\"phút\" \r\n                                                name=\"time-mode\"\r\n                                                disabled = {!useQuizTime && \"disabled\"}\r\n                                                checked = {useQuizTime && timeUnit === 0}\r\n                                                onChange = {() => setTimeUnit(0)}\r\n                                            />\r\n                                            <Form.Check \r\n                                                type=\"radio\"\r\n                                                inline\r\n                                                label=\"giây\" \r\n                                                name=\"time-mode\"\r\n                                                disabled = {!useQuizTime && \"disabled\"}\r\n                                                checked = {useQuizTime && timeUnit === 1}\r\n                                                onChange = {() => setTimeUnit(1)}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Check \r\n                                        label=\"Giữ thứ tự câu hỏi\" \r\n                                        checked={rawOrder}\r\n                                        onChange={() => setRawOrder(!rawOrder)}\r\n                                    />\r\n                                    <Form.Text muted>\r\n                                        Nếu không chọn, câu hỏi sẽ được sắp xếp ngẫu nhiên.\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n                                {!submittedQuizDetails && (<div className=\"text-center mt-3\">\r\n                                    <p className=\"error\">{quizDetailError}</p>\r\n                                    <Button variant=\"success\" onClick={() => submitQuizDetails()}>\r\n                                        Xác nhận thông tin Quiz\r\n                                    </Button>\r\n                                </div>)}\r\n                            </fieldset>\r\n                        </Form>\r\n                        {submittedQuizDetails && (<Row className=\"mt-2\">\r\n                            <h4 className=\"text-center\">Câu hỏi</h4>\r\n                            <div className=\"text-center\">\r\n                                <Button className=\"btn-rounded\" variant=\"info\" style={{paddingLeft: 15, paddingRight: 15}} onClick={() => setAddQuestionModalShow(true)}>\r\n                                    <Add fontSize=\"small\" style={{ color: \"white\"}}></Add>\r\n                                </Button>\r\n                            </div>\r\n                            <p className=\"mt-2 text-center\" >Số lượng câu hỏi: {numberOfQuest}</p>\r\n                            {\r\n                                questionList.map((quest, index) => {\r\n                                    return ( \r\n                                        <div className=\"mt-2 mb-2 questionBox\" key={quest[\"question\"]}>\r\n                                            <p className=\"quest-title\"><b>Câu {index + 1}: </b>{quest[\"question\"]}</p>\r\n                                            {quest[\"time\"] !== 0 && <p className=\"quest-title\">Thời gian: {quest[\"time\"]} giây</p> }\r\n                                            <p className=\"quest-title\">Điểm số: {quest[\"point\"]}</p>\r\n                                            {quest[\"image\"] !== \"\" &&\r\n                                                <img className=\"question-image\" alt=\"\" src={quest[\"image\"]}></img>\r\n                                            }\r\n                                            <div className=\"quest-content\">\r\n                                                {quest[\"questionType\"] === 1 && (\r\n                                                    <>\r\n                                                        <p className=\"mb-1\">Đáp án:</p>\r\n                                                        <Paper component=\"ul\">\r\n                                                            {quest[\"keys\"][0].split(\"~>\").map((choice, index) => {\r\n                                                                return (\r\n                                                                    <li key={index}>\r\n                                                                        <Chip\r\n                                                                            label={choice}\r\n                                                                        />\r\n                                                                    </li>\r\n                                                                )\r\n                                                            })}\r\n                                                        </Paper>\r\n                                                    </>\r\n                                                )}\r\n                                                {quest[\"questionType\"] === 0 && (\r\n                                                    quest[\"keys\"].map((key, index) => {\r\n                                                        return (\r\n                                                        <>\r\n                                                        <p className={quest[\"keyCorrects\"][index]? \"correct-key\" : \"incorrect-key\"}>\r\n                                                            Phương án {index + 1}: {key}\r\n                                                        </p>\r\n                                                        {quest[\"keyImages\"][index] !== \"\" &&\r\n                                                            <div className=\"text-center\">\r\n                                                                <img className=\"key-image\" alt=\"\" src={quest[\"keyImages\"][index]}></img>\r\n                                                            </div>\r\n                                                        }\r\n                                                        </>)\r\n                                                    })\r\n                                                )}\r\n                                                {quest[\"explain\"] !== \"\" && (\r\n                                                    <p>Giải thích: {quest[\"explain\"]}</p>\r\n                                                )}\r\n                                            </div>\r\n                                            <Button className=\"mt-1\" variant=\"warning\" onClick={() => editQuestion(index)}>Chỉnh sửa</Button>\r\n                                        </div>\r\n                                     )\r\n                                })\r\n                            }\r\n                        </Row>)}\r\n                        {submittedQuizDetails && (\r\n                            <div className=\"text-center\">\r\n                                <Button variant=\"success\" onClick={() => addQuiz()}>Xác nhận</Button>\r\n                            </div>\r\n                        )}\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n\r\n            <QuestionAddModal\r\n                show={addQuestionModalShow}\r\n                onHide={() => setAddQuestionModalShow(false)}\r\n                numberOfQuest={numberOfQuest}\r\n                onAddQuestionSubmit={onAddQuestionSubmit}\r\n                useQuizTime={useQuizTime}\r\n            >\r\n\r\n            </QuestionAddModal>\r\n\r\n            {\r\n                questionEditGet && <QuestionEditModal\r\n                    show={editQuestionModalShow}\r\n                    onHide={() => setEditQuestionModalShow(false)}\r\n                    onEditQuestionSubmit={onEditQuestionSubmit}\r\n                    useQuizTime={useQuizTime}\r\n                    questionEditGet={questionEditGet}\r\n                >\r\n\r\n                </QuestionEditModal>\r\n            }\r\n\r\n            {\r\n                errorModalShowing && (<Modal\r\n                    size=\"lg\"\r\n                    aria-labelledby=\"contained-modal-title-vcenter\"\r\n                    centered\r\n                    show={errorModalShowing}\r\n                    >\r\n                    <Modal.Header>  \r\n                        Lỗi\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        {error}\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button onClick={() => setErrorModalShowing(false)}>Đóng</Button>\r\n                    </Modal.Footer>\r\n                </Modal>)\r\n            }\r\n\r\n            {\r\n                redirect && <Redirect to=\"/home\"></Redirect>\r\n            }\r\n        </div>\r\n    )\r\n}","D:\\Coding\\Online Quiz System\\online-quiz-system\\Client\\online-quiz-system\\src\\components\\quiz-review\\QuizReview.jsx",["141","142","143","144","145","146","147","148","149"],"import \"./quiz-review.css\";\r\nimport {React, useState, useEffect, useRef} from 'react'\r\nimport {Container, Row, Col, Form} from \"react-bootstrap\";\r\nimport {Chip, Paper} from '@material-ui/core';\r\n\r\nfunction QuizReview(props) {\r\n    const [markContent, setMarkContent] = useState([]);\r\n    const [questions, setQuestions] = useState([]);\r\n    const [quizInfo, setQuizInfo] = useState([]);\r\n    const [loaded, setLoaded] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setMarkContent(props.reviewContent);\r\n        setQuestions(props.questions);\r\n        setQuizInfo(props.quizInfo);\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (questions.length > 0) {\r\n            setLoaded(true);\r\n        }\r\n    }, [markContent])\r\n\r\n    return (\r\n        <>\r\n            {loaded && <Container className=\"mt-3 mb-3\">\r\n                <h2 className=\"text-center\">{quizInfo.quiz_title}</h2>\r\n                <p className=\"text-center m-1\">Tạo bởi: {quizInfo.creator}</p>\r\n                {props.name && <h5 className=\"text-center\">{props.name}</h5>}\r\n                {questions.map((question, i) => {\r\n                    return (\r\n                    <div key={i} class=\"mt-3 mb-3 question-review-box\">\r\n                        <h5 style={{color: markContent[i].point === question.question_point? \"green\" : \"red\"}}>Câu {i + 1} - {markContent[i].point}/{question.question_point}</h5>\r\n                        <div className=\"question-box d-flex justify-content-center align-items-center\">\r\n                            <h5 className=\"txt-quest\">{question.question_content}</h5>\r\n                        </div>\r\n                        {question.media != \"\" && <div className=\"text-center mt-2\">\r\n                            <img className=\"img-quest\" src={question.media}></img>\r\n                        </div>}\r\n                        {question.question_type == 1 && \r\n                        <div>\r\n                            <Form.Control value={markContent[i].answer} disabled=\"true\" type=\"text\" className=\"mt-2\" placeholder=\"Câu trả lời\">\r\n                            </Form.Control>\r\n                            <div className=\"text-center mt-1\">\r\n                                {\r\n                                    <>\r\n                                    <h5>Đáp án:</h5>\r\n                                    <Paper component=\"ul\" className=\"paper\">\r\n                                        {Buffer(question.answers[0].answer_content, \"base64\").toString(\"utf-8\").split(\"~|\")\r\n                                        .map((choice, index) => {\r\n                                            return (\r\n                                                <li key={index}>\r\n                                                    <Chip\r\n                                                        label={choice}\r\n                                                    />\r\n                                                </li>\r\n                                            )\r\n                                        })}\r\n                                    </Paper>\r\n                                    </>\r\n                                }\r\n                                <p style={{fontStyle: \"italic\"}}>Giải thích: {Buffer(question.explanation, \"base64\").toString(\"utf-8\")}</p>\r\n                            </div>\r\n                        </div>}\r\n                        {question.question_type == 0 && \r\n                            <>\r\n                            <Row className=\"mt-2\">\r\n                                {\r\n                                    question.answers.map((answer, j) => {\r\n                                        let chosen = \"\";\r\n                                        if (answer.id !== markContent[i].answer) {\r\n                                            if (answer.is_correct === 1) {\r\n                                                chosen = \"answer-content text-center correct\";\r\n                                            } else {\r\n                                                chosen = \"answer-content text-center\";\r\n                                            }\r\n                                        } else {\r\n                                            if (answer.is_correct === 1) {\r\n                                                chosen = \"answer-content text-center correct\";\r\n                                            } else {\r\n                                                chosen = \"answer-content text-center wrong\";\r\n                                            }\r\n                                        }\r\n                                        return (\r\n                                            <Col lg={6} md={6} sm={12} className=\"p-1 answer\">\r\n                                                <div className={chosen}>\r\n                                                    {answer.media != \"\" && <img className=\"img-answer\" src={answer.media}></img>}\r\n                                                    {Buffer(answer.answer_content, \"base64\").toString(\"utf-8\")}\r\n                                                </div>\r\n                                            </Col>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </Row>\r\n                            <p style={{fontStyle: \"italic\"}} className=\"text-center\">Giải thích: {Buffer(question.explanation, \"base64\").toString(\"utf-8\")}</p>\r\n                            </>\r\n                        }\r\n                    </div>)\r\n                })\r\n                }\r\n            </Container>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default QuizReview\r\n\r\n/*\r\n                        \r\n*/","D:\\Coding\\Online Quiz System\\online-quiz-system\\Client\\online-quiz-system\\src\\components\\question-edit-modal\\QuestionEditModal.jsx",["150","151","152","153","154","155","156","157","158","159","160","161","162","163","164"],"import \"./question-edit-modal.css\";\r\nimport {React, useState, useEffect, useRef} from 'react'\r\nimport {Form, Button, Modal, Row, Col} from \"react-bootstrap\";\r\nimport {Cancel, PermMedia} from \"@material-ui/icons\";\r\nimport {Chip, Paper} from '@material-ui/core';\r\nimport storage from './../../firebase';\r\n\r\nfunction QuestionEditModal(props) {\r\n    const [question, setQuestion] = useState(\"\");\r\n    const [questionType, setQuestionType] = useState(0);\r\n    const [numberOfChoices, setNumberOfChoices] = useState(0);\r\n    const [numberOfChoicesError, setNumberOfChoicesError] = useState(\"\");\r\n    const [keys, setKeys] = useState([]);\r\n    const [keyCorrects, setKeyCorrects] = useState([]);\r\n    const [keyImages, setKeyImages] = useState([]);\r\n    const [keyImageUrl, setKeyImageUrl] = useState([]);\r\n    const [keyType1Choices, setKeyType1Choices] = useState([]);\r\n    const [type1CurrentInput, setType1CurrentInput] = useState(\"\");\r\n    const [explain, setExplain] = useState(\"\");\r\n    const [file, setFile] = useState(null);\r\n    const [url, setURL] = useState(\"\"); //This only be used in case of passing a Firebase URL from QuizCreate\r\n    const [time, setTime] = useState(\"\");\r\n    const [point, setPoint] = useState(\"\");\r\n    const [validateError, setValidateError] = useState(\"\");\r\n    const keyImageURLs = useRef();\r\n    const imageURL = useRef(); \r\n    const [renderBool, setRenderBool] = useState(false);\r\n\r\n    const check = () => {\r\n        //Count target\r\n        let getCount = 0;\r\n        for (let i = 0; i < keyImages.length; i++) {\r\n            if (keyImages[i])\r\n                getCount++;\r\n        }\r\n        if (file)\r\n            getCount++;\r\n\r\n        let count = 0;\r\n        if (imageURL.current !== \"\" && file)\r\n        {\r\n            count++;\r\n        }\r\n        for (let i = 0; i < keyImageURLs.current.length; i++) {\r\n            if (keyImageURLs.current[i] !== \"\")\r\n            {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        if (count === getCount && getCount > 0) {\r\n            callParentSubmit();\r\n        }\r\n    }\r\n\r\n    const handleQuestionTypeChange = (type) => {\r\n        setQuestionType(type);\r\n        if (type === 1) \r\n        {\r\n            setNumberOfChoices(1);\r\n            setNumberOfChoicesError(\"\");\r\n            setKeyCorrects([true]);\r\n            setKeys([\"\"]);\r\n            setKeyImages([\"\"]);\r\n            setKeyImageUrl([\"\"]);\r\n            keyImageURLs.current = [\"\"];\r\n        } else {\r\n            setNumberOfChoices(0);\r\n            setKeyCorrects([]);\r\n            setKeys([]);\r\n            setKeyImages([]);\r\n            setKeyImageUrl([]);\r\n            keyImageURLs.current = [];\r\n        }\r\n    }\r\n\r\n    const handleChoicesCountChange = (count) => {\r\n        if (count < 2 || count > 5) {\r\n            setNumberOfChoicesError(\"Số lượng phương án phải từ 2 đến 5.\");\r\n        } else {\r\n            setNumberOfChoices(count);\r\n            setNumberOfChoicesError(\"\");\r\n            let tmpKeysArr = []\r\n            let tmpKeysCorrectArr = [] \r\n            let tmpKeyImages = [];\r\n            let tmpKeyImagesURLs = [];\r\n            for (let i = 0; i < count; i++) {\r\n                tmpKeysArr.push(\"\");\r\n                tmpKeysCorrectArr.push(false);\r\n                tmpKeyImages.push(null);\r\n                tmpKeyImagesURLs.push(\"\");\r\n            }\r\n            setKeyCorrects(tmpKeysCorrectArr);\r\n            setKeys(tmpKeysArr);\r\n            setKeyImages(tmpKeyImages);\r\n            setKeyImageUrl(tmpKeyImagesURLs);\r\n            keyImageURLs.current = tmpKeyImagesURLs;\r\n        }\r\n    }\r\n\r\n    const handleCorrectKeyChange = (index) => {\r\n        let getKeyCorrectArr = [];\r\n        for (let i = 0; i < keyCorrects.length; i++) {\r\n            getKeyCorrectArr.push(false);\r\n        }\r\n        let item = getKeyCorrectArr[index];\r\n        getKeyCorrectArr[index] = !item;\r\n        setKeyCorrects(getKeyCorrectArr);\r\n    }\r\n\r\n    const handleKeyChange = (index, value) => {\r\n        let emptyArr = [];\r\n        for (let i = 0; i < keys.length; i++) {\r\n            if (i === index) {\r\n                emptyArr.push(value);\r\n            } else {\r\n                emptyArr.push(keys[i]);\r\n            }\r\n        }\r\n        setKeys(emptyArr);\r\n    }\r\n\r\n    const handleKeyImage = (index, file) => {\r\n        let emptyArr = [];\r\n        for (let i = 0; i < keyImages.length; i++) {\r\n            if (i === index) {\r\n                emptyArr.push(file);\r\n            } else {\r\n                emptyArr.push(keyImages[i]);\r\n            }\r\n        }\r\n        setKeyImages(emptyArr);\r\n        console.log(keyImages);\r\n    }\r\n\r\n    const setImageNull = (i) => {\r\n        let emptyArr = [...keyImages];\r\n        emptyArr[i] = null;\r\n        let emptyArr1 = [...keyImageUrl];\r\n        emptyArr1[i] = \"\";\r\n        setKeyImages(emptyArr);\r\n        setKeyImageUrl(emptyArr1);\r\n    }\r\n\r\n    const prepareFormSubmit = async(e) => {\r\n        e.preventDefault();\r\n        console.log(keys);\r\n\r\n        //Validate info\r\n        if (question === \"\") {\r\n            setValidateError(\"Vui lòng nhập nội dung câu hỏi.\");\r\n            return;\r\n        } \r\n        \r\n        if (questionType === 0) {\r\n            if (!keyCorrects.includes(true)) {\r\n                setValidateError(\"Vui lòng chọn 1 đáp án đúng.\");\r\n                return;\r\n            }\r\n            for (let i = 0; i < keys.length; i++) {\r\n                if (keys[i] === \"\" && !keyImages[i]) {\r\n                    setValidateError(\"Phương án không hợp lệ.\");\r\n                    return;\r\n                }\r\n            }\r\n        } else if (questionType === 1) {\r\n            if (keyType1Choices.length === 0) {\r\n                setValidateError(\"Vui lòng nhập ít nhất 1 đáp án cho câu hỏi.\");\r\n                return;\r\n            }\r\n        }\r\n        \r\n        if (!props.useQuizTime && isNaN(parseInt(time))) {\r\n            setValidateError(\"Thời gian trả lời không hợp lệ.\");\r\n            return;\r\n        } else if (isNaN(parseInt(point))) {\r\n            setValidateError(\"Điểm số câu không hợp lệ.\");\r\n            return;\r\n        }\r\n\r\n        let getCount = 0;\r\n        for (let i = 0; i < keyImages.length; i++) {\r\n            if (keyImages[i])\r\n                getCount++;\r\n        }\r\n        if (file)\r\n            getCount++;\r\n\r\n        //Upload to firebase and retrieve URL \r\n        if (getCount != 0) {\r\n            if (file) {\r\n                let fileName = file.name + \"-\" + Date.now();\r\n                //questions_images\r\n                storage.ref(`questions_images/${fileName}`).put(file)\r\n                .on(\"state_changed\", (snapshot) => {}, \r\n                (error) => {console.log(error)}, \r\n                () => {\r\n                    storage.ref(`questions_images/`).child(`${fileName}`).getDownloadURL()\r\n                    .then(\r\n                        (url) => {\r\n                            imageURL.current = url;\r\n                            check();\r\n                        },\r\n                        (error) => {\r\n                            console.log(error);\r\n                        }\r\n                    );\r\n                });\r\n            }\r\n\r\n            for (let i = 0; i < keyImages.length; i++) {\r\n                if (keyImages[i]) {\r\n                    let keyFileName = keyImages[i].name + \"-\" + Date.now();\r\n                    //questions_images\r\n                    storage.ref(`questions_images/${keyFileName}`).put(keyImages[i])\r\n                    .on(\"state_changed\", (snapshot) => {}, \r\n                    (error) => {console.log(error)}, \r\n                    () => {\r\n                        storage.ref(`questions_images/`).child(`${keyFileName}`).getDownloadURL()\r\n                        .then(\r\n                            (url) => {\r\n                                setImageURL(i, url);  \r\n                            },\r\n                            (error) => {\r\n                                console.log(error);\r\n                            }\r\n                        );\r\n                    });\r\n                }\r\n            }\r\n        } else {\r\n            callParentSubmit();\r\n        }\r\n    }\r\n\r\n    const setImageURL = (index, path) => {\r\n        // let arrays = [...keyImagesURLs];\r\n        // arrays[index] = path;\r\n        // setKeyImagesURLs(arrays);\r\n\r\n        let getArray = keyImageURLs.current;\r\n        getArray[index] = path;\r\n        keyImageURLs.current = getArray;\r\n        check();\r\n    }\r\n\r\n    const callParentSubmit = () => {\r\n        let output = {};\r\n        output[\"question\"] = question;\r\n        output[\"questionType\"] = questionType;\r\n        output[\"numberOfChoices\"] = numberOfChoices;\r\n        output[\"keyCorrects\"] = keyCorrects;\r\n        output[\"explain\"] = explain;\r\n        output[\"time\"] = time === \"\"? 0 : parseInt(time);\r\n        output[\"point\"] = point;\r\n        output[\"image\"] = imageURL.current;\r\n        output[\"keyImages\"] = keyImageURLs.current;\r\n        output[\"questIndex\"] = props.questionEditGet[\"questIndex\"];\r\n\r\n        if (questionType === 0) {\r\n            output[\"keys\"] = keys;\r\n        } else {\r\n            output[\"keys\"] = [\"\"];\r\n            \r\n            for (let i = 0; i < keyType1Choices.length - 1; i++) {\r\n                output[\"keys\"][0] += keyType1Choices[i] + \"~>\";\r\n            }\r\n            output[\"keys\"][0] += keyType1Choices[keyType1Choices.length - 1];\r\n        }\r\n\r\n        //Refresh\r\n        setValidateError(\"\");\r\n        setQuestion(\"\");\r\n        setQuestionType(0);\r\n        setNumberOfChoicesError(\"\");\r\n        setNumberOfChoices(0);\r\n        setKeys([]);\r\n        setKeyCorrects([]);\r\n        setExplain(\"\");\r\n        setFile(null);\r\n        setTime(\"\");\r\n        setPoint(\"\");\r\n        keyImageURLs.current = [];\r\n        imageURL.current = \"\";\r\n        setKeyImages([]);\r\n        setKeyImageUrl([]);\r\n        setKeyType1Choices([]);\r\n        setType1CurrentInput(\"\");\r\n\r\n        props.onEditQuestionSubmit(output);\r\n    }\r\n\r\n    const keyBoxKeyDown = (e) => {\r\n        if (e.key == \"Enter\") {\r\n            e.preventDefault();\r\n            setKeyType1Choices([...keyType1Choices, e.target.value]);\r\n            setType1CurrentInput(\"\");\r\n        }\r\n    }\r\n\r\n    const deleteKeyType1Choice = (index) => {\r\n        let cloneArray = [...keyType1Choices];\r\n        cloneArray.splice(index, 1);\r\n        setKeyType1Choices(cloneArray);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (props.questionEditGet) {\r\n            setQuestion(props.questionEditGet[\"question\"]);\r\n            setQuestionType(props.questionEditGet[\"questionType\"]);\r\n            setNumberOfChoices(props.questionEditGet[\"keys\"].length);\r\n            setKeys(props.questionEditGet[\"keys\"]);\r\n            setKeyCorrects(props.questionEditGet[\"keyCorrects\"]);\r\n            setTime(props.questionEditGet[\"time\"]);\r\n            setExplain(props.questionEditGet[\"explain\"]);\r\n            setURL(props.questionEditGet[\"image\"]);\r\n            keyImageURLs.current = [];\r\n            imageURL.current = \"\";\r\n            setPoint(props.questionEditGet[\"point\"]);\r\n            setKeyImageUrl(props.questionEditGet[\"keyImages\"]);\r\n            setType1CurrentInput(\"\");\r\n            if (props.questionEditGet[\"questionType\"] === 1) {\r\n                setKeyType1Choices(props.questionEditGet[\"keys\"][0].split(\"~>\"))\r\n            }\r\n\r\n            let emptyArr = [];\r\n            for (let i = 0; i < props.questionEditGet[\"keys\"].length; i++) {\r\n                emptyArr.push(null);\r\n            }\r\n\r\n            setKeyImages(emptyArr);\r\n        }\r\n    }, []);\r\n\r\n    return (        \r\n        <Modal\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n            {...props}\r\n        >\r\n            <Modal.Header>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Sửa câu hỏi (câu {props.questionEditGet? props.questionEditGet[\"questIndex\"] + 1 : \"\"})\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            <Row>\r\n                    <Col md={10} sm={12} className=\"offset-md-1 offset-sm-0\">\r\n                        <Form id=\"questionAddForm\" onSubmit={prepareFormSubmit}>\r\n                            <Form.Group className=\"\">\r\n                                <Form.Label>Câu hỏi</Form.Label>\r\n                                <Form.Control as=\"textarea\" required validate=\"Quiz name is not valid!\"\r\n                                value={question}\r\n                                onChange={(e) => setQuestion(e.target.value)}/>\r\n                            </Form.Group>\r\n                            <Form.Group className=\"\">\r\n                            <fieldset>\r\n                                <Form.Group as={Row} className=\"mb-3\">\r\n                                <Form.Label as=\"legend\" column sm={2}>\r\n                                    Loại:\r\n                                </Form.Label>\r\n                                <Col sm={12}>\r\n                                    <Form.Check\r\n                                        type=\"radio\"\r\n                                        label=\"Trắc nghiệm\"\r\n                                        name=\"question-type\"\r\n                                        checked={questionType === 0}\r\n                                        onChange={() => handleQuestionTypeChange(0)}\r\n                                    />\r\n                                    <Form.Check\r\n                                        type=\"radio\"\r\n                                        label=\"Trả lời ngắn\"\r\n                                        name=\"question-type\"\r\n                                        checked={questionType === 1}\r\n                                        onChange={() => handleQuestionTypeChange(1)}\r\n                                    />\r\n                                </Col>\r\n                                </Form.Group>\r\n                            </fieldset>\r\n                            </Form.Group>\r\n                            {questionType === 0 && \r\n                                (<Form.Group className=\"\">\r\n                                <Form.Label>Số phương án</Form.Label>\r\n                                <Form.Control \r\n                                    type=\"number\"\r\n                                    validate=\"Phải là giá trị từ 2 đến 5\" \r\n                                    min={2} max={5}\r\n                                    value={numberOfChoices}\r\n                                    onChange={(e) => handleChoicesCountChange(e.target.value)}\r\n                                />\r\n                                <p className=\"error\">{numberOfChoicesError}</p>\r\n                                </Form.Group>)\r\n                            }\r\n                            {\r\n                                numberOfChoicesError === \"\" && (questionType === 0 && [...Array(parseInt(numberOfChoices))].map((x, i) => {\r\n                                    let getClassName = `question-${numberOfChoices}-answer`;\r\n                                    let idImageName = `file-${i}`\r\n                                    return (\r\n                                        <Form.Group className=\"mt-2\">\r\n                                            <Form.Label>Phương án {i + 1}\r\n                                            <Form.Check\r\n                                                type=\"radio\"\r\n                                                label=\"Đúng\"\r\n                                                name={getClassName}\r\n                                                checked={keyCorrects[i]}\r\n                                                onChange={() => handleCorrectKeyChange(i)}\r\n                                            />\r\n                                            </Form.Label>\r\n                                            <Form.Control type=\"text\" validate=\"Không hợp lệ!\" minLength={1}\r\n                                            value={keys[i]}\r\n                                            onChange={(e) => handleKeyChange(i, e.target.value)}/>\r\n                                            <Form.Group className=\"mb-3 mt-3\">\r\n                                                <Form.Label>Ảnh phương án (nếu có)</Form.Label><br></br>\r\n                                                <label htmlFor={idImageName} className=\"shareOption\" style={{cursor: \"pointer\"}}>\r\n                                                    <PermMedia htmlColor=\"green\" className=\"shareIcon\"/>\r\n                                                    <Form.Control style={{display: \"none\"}} type=\"file\" id={idImageName} accept=\".png, .jpeg, .jpg\" size=\"sm\" onChange={(e) => handleKeyImage(i, e.target.files[0])}/>\r\n                                                </label>\r\n                                            </Form.Group>\r\n                                            { keyImages[i] && (\r\n                                                <div className=\"keyImgContainer\">\r\n                                                    <img className=\"shareImg\" src={keyImages[i] && URL.createObjectURL(keyImages[i])} alt=\"\"/>\r\n                                                    <Cancel className=\"shareCancelImg\" onClick={() => setImageNull(i)}></Cancel>\r\n                                                </div>\r\n                                            ) || !keyImages[i] && keyImageUrl[i] !== \"\" && (\r\n                                                <div className=\"keyImgContainer\">\r\n                                                    <img className=\"shareImg\" src={keyImageUrl[i]} alt=\"\"/>\r\n                                                    <Cancel className=\"shareCancelImg\" onClick={() => setImageNull(i)}></Cancel>\r\n                                                </div>\r\n                                            )}\r\n                                        </Form.Group>\r\n                                    )\r\n                                })) || \r\n                                (questionType === 1 && \r\n                                    <>\r\n                                    <Form.Group className=\"\">\r\n                                        <Form.Label>Đáp án</Form.Label>\r\n                                        <Form.Control type=\"text\" validate=\"Đáp án không hợp lệ!\" minLength={1}\r\n                                        value={type1CurrentInput}\r\n                                        onChange={(e) => handleKeyChange(0, e.target.value)}\r\n                                        onKeyPress={(e) => keyBoxKeyDown(e)}\r\n                                        />\r\n                                    </Form.Group>\r\n                                    {keyType1Choices.length > 0 && \r\n                                    <Paper component=\"ul\">\r\n                                        {keyType1Choices.map((choice, index) => {\r\n                                            return (\r\n                                                <li key={index}>\r\n                                                    <Chip\r\n                                                        label={choice}\r\n                                                        onDelete={() => deleteKeyType1Choice(index)}\r\n                                                    />\r\n                                                </li>\r\n                                            )\r\n                                        })}\r\n                                    </Paper>\r\n                                    }\r\n                                    </>\r\n                                )\r\n                            }\r\n                            <Form.Group className=\"mt-2\">\r\n                                <Form.Label>Giải thích (nếu có)</Form.Label>\r\n                                <Form.Control as=\"textarea\" validate=\"Không hợp lệ!\"\r\n                                value={explain}\r\n                                onChange={(e) => setExplain(e.target.value)}/>\r\n                            </Form.Group>\r\n                            <Form.Group className=\"mt-2\">\r\n                                <Form.Label>Điểm số</Form.Label>\r\n                                <Form.Control validate=\"Không hợp lệ!\"\r\n                                value={point} type=\"number\" min={0} \r\n                                onChange={(e) => setPoint(e.target.value)}/>\r\n                            </Form.Group>\r\n                            {!props.useQuizTime && <Form.Group className=\"mb-3 mt-3\">\r\n                                <Form.Label>Thời gian trả lời (giây): </Form.Label><br></br>\r\n                                <Form.Control \r\n                                    type=\"number\"\r\n                                    min = {1}\r\n                                    value={time}\r\n                                    onChange={(e) => setTime(e.target.value)} \r\n                                />\r\n                            </Form.Group>}\r\n                            <Form.Group className=\"mb-3 mt-3\">\r\n                                <Form.Label>Ảnh (nếu có)</Form.Label><br></br>\r\n                                <label htmlFor=\"file\" className=\"shareOption\" style={{cursor: \"pointer\"}}>\r\n                                    <PermMedia htmlColor=\"green\" className=\"shareIcon\"/>\r\n                                    <Form.Control style={{display: \"none\"}} type=\"file\" id=\"file\" accept=\".png, .jpeg, .jpg\" size=\"sm\" onChange={(e) => setFile(e.target.files[0])}/>\r\n                                </label>\r\n\r\n                            </Form.Group>\r\n                            </Form>\r\n                            {\r\n                                file && (\r\n                                    <div className=\"shareImgContainer\">\r\n                                        <img className=\"shareImg\" src={file && URL.createObjectURL(file)} alt=\"\"/>\r\n                                        <Cancel className=\"shareCancelImg\" onClick={() => {\r\n                                            setFile(null);\r\n                                            setURL(\"\");\r\n                                        }}></Cancel>\r\n                                    </div>\r\n                                )\r\n                                || \r\n                                !file && url !== \"\" && (\r\n                                    <div className=\"shareImgContainer\">\r\n                                        <img className=\"shareImg\" src={url} alt=\"\"/>\r\n                                        <Cancel className=\"shareCancelImg\" onClick={() => {\r\n                                            setFile(null);\r\n                                            setURL(\"\");\r\n                                        }}></Cancel>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                    </Col>\r\n                </Row>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n            <p className=\"error\">{validateError}</p>\r\n            <Button variant=\"warning\" type=\"submit\" form=\"questionAddForm\">Sửa</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default QuestionEditModal\r\n","D:\\Coding\\Online Quiz System\\online-quiz-system\\Client\\online-quiz-system\\src\\components\\question-add-modal\\QuestionAddModal.jsx",["165","166"],"import \"./question-add-modal.css\";\r\nimport {React, useState, useEffect, useRef} from 'react'\r\nimport {Form, Button, Modal, Row, Col} from \"react-bootstrap\";\r\nimport {Cancel, PermMedia} from \"@material-ui/icons\"\r\nimport {Chip, Paper} from '@material-ui/core';\r\nimport storage from './../../firebase';\r\n\r\nfunction QuestionAddModal(props) {\r\n    const [question, setQuestion] = useState(\"\");\r\n    const [questionType, setQuestionType] = useState(0);\r\n    const [numberOfChoices, setNumberOfChoices] = useState(0);\r\n    const [numberOfChoicesError, setNumberOfChoicesError] = useState(\"\");\r\n    const [keys, setKeys] = useState([]);\r\n    const [keyCorrects, setKeyCorrects] = useState([]);\r\n    const [keyImages, setKeyImages] = useState([]);\r\n    const [keyType1Choices, setKeyType1Choices] = useState([]);\r\n    const [type1CurrentInput, setType1CurrentInput] = useState(\"\");\r\n    const [explain, setExplain] = useState(\"\");\r\n    const [file, setFile] = useState(null);\r\n    const [time, setTime] = useState(\"\");\r\n    const [point, setPoint] = useState(\"\");\r\n    const [validateError, setValidateError] = useState(\"\");\r\n    const keyImageURLs = useRef();\r\n    const imageURL = useRef();\r\n\r\n    useEffect(() => {\r\n        keyImageURLs.current = [];\r\n        imageURL.current = \"\";\r\n    }, []);\r\n\r\n    const check = () => {\r\n        //Count target\r\n        let getCount = 0;\r\n        for (let i = 0; i < keyImages.length; i++) {\r\n            if (keyImages[i])\r\n                getCount++;\r\n        }\r\n        if (file)\r\n            getCount++;\r\n\r\n        let count = 0;\r\n        if (imageURL.current !== \"\" && file)\r\n        {\r\n            count++;\r\n        }\r\n        for (let i = 0; i < keyImageURLs.current.length; i++) {\r\n            if (keyImageURLs.current[i] !== \"\")\r\n            {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        if (count === getCount && getCount > 0) {\r\n            callParentSubmit();\r\n        }\r\n    }\r\n\r\n    const handleQuestionTypeChange = (type) => {\r\n        setQuestionType(type);\r\n        setKeyType1Choices([]);\r\n        setType1CurrentInput(\"\");\r\n        if (type === 1) \r\n        {\r\n            setNumberOfChoices(1);\r\n            setNumberOfChoicesError(\"\");\r\n            setKeyCorrects([true]);\r\n            setKeys([\"\"]);\r\n            setKeyImages([\"\"]);\r\n            keyImageURLs.current = [\"\"];\r\n        } else {\r\n            setNumberOfChoices(0);\r\n            setKeyCorrects([]);\r\n            setKeys([]);\r\n            setKeyImages([]);\r\n            keyImageURLs.current = [];\r\n        }\r\n    }\r\n\r\n    const handleChoicesCountChange = (count) => {\r\n        if (count < 2 || count > 5) {\r\n            setNumberOfChoicesError(\"Số lượng phương án phải từ 2 đến 5.\");\r\n        } else {\r\n            setNumberOfChoices(count);\r\n            setNumberOfChoicesError(\"\");\r\n            let tmpKeysArr = []\r\n            let tmpKeysCorrectArr = [] \r\n            let tmpKeyImages = [];\r\n            let tmpKeyImagesURLs = [];\r\n            for (let i = 0; i < count; i++) {\r\n                tmpKeysArr.push(\"\");\r\n                tmpKeysCorrectArr.push(false);\r\n                tmpKeyImages.push(null);\r\n                tmpKeyImagesURLs.push(\"\");\r\n            }\r\n            setKeyCorrects(tmpKeysCorrectArr);\r\n            setKeys(tmpKeysArr);\r\n            setKeyImages(tmpKeyImages);\r\n            keyImageURLs.current = tmpKeyImagesURLs;\r\n        }\r\n    }\r\n\r\n    const handleCorrectKeyChange = (index) => {\r\n        let getKeyCorrectArr = [];\r\n        for (let i = 0; i < keyCorrects.length; i++) {\r\n            getKeyCorrectArr.push(false);\r\n        }\r\n        let item = getKeyCorrectArr[index];\r\n        getKeyCorrectArr[index] = !item;\r\n        setKeyCorrects(getKeyCorrectArr);\r\n    }\r\n\r\n    const handleKeyChange = (index, value) => {\r\n        let emptyArr = [];\r\n        for (let i = 0; i < keys.length; i++) {\r\n            if (i === index) {\r\n                emptyArr.push(value);\r\n            } else {\r\n                emptyArr.push(keys[i]);\r\n            }\r\n        }\r\n        setKeys(emptyArr);\r\n        setType1CurrentInput(value);\r\n    }\r\n\r\n    const handleKeyImage = (index, file) => {\r\n        let emptyArr = [];\r\n        for (let i = 0; i < keyImages.length; i++) {\r\n            if (i === index) {\r\n                emptyArr.push(file);\r\n            } else {\r\n                emptyArr.push(keyImages[i]);\r\n            }\r\n        }\r\n        setKeyImages(emptyArr);\r\n    }\r\n\r\n    const setImageNull = (i) => {\r\n        let emptyArr = [...keyImages];\r\n        emptyArr[i] = null;\r\n        setKeyImages(emptyArr);\r\n    }\r\n\r\n    const prepareFormSubmit = async(e) => {\r\n        e.preventDefault();\r\n\r\n        //Validate info\r\n        if (question === \"\") {\r\n            setValidateError(\"Vui lòng nhập nội dung câu hỏi.\");\r\n            return;\r\n        } \r\n        \r\n        if (questionType === 0) {\r\n            if (!keyCorrects.includes(true)) {\r\n                setValidateError(\"Vui lòng chọn 1 đáp án đúng.\");\r\n                return;\r\n            }\r\n            for (let i = 0; i < keys.length; i++) {\r\n                if (keys[i] === \"\" && !keyImages[i]) {\r\n                    setValidateError(\"Phương án không hợp lệ.\");\r\n                    return;\r\n                }\r\n            }\r\n        } else if (questionType === 1) {\r\n            if (keyType1Choices.length === 0) {\r\n                setValidateError(\"Vui lòng nhập ít nhất 1 đáp án cho câu hỏi.\");\r\n                return;\r\n            }\r\n        }\r\n        \r\n        if (!props.useQuizTime && isNaN(parseInt(time))) {\r\n            setValidateError(\"Thời gian trả lời không hợp lệ.\");\r\n            return;\r\n        } else if (isNaN(parseInt(point))) {\r\n            setValidateError(\"Điểm số câu không hợp lệ.\");\r\n            return;\r\n        }\r\n\r\n        let getCount = 0;\r\n        for (let i = 0; i < keyImages.length; i++) {\r\n            if (keyImages[i])\r\n                getCount++;\r\n        }\r\n        if (file)\r\n            getCount++;\r\n\r\n        //Upload to firebase and retrieve URL \r\n        if (getCount !== 0) {\r\n            if (file) {\r\n                let fileName = file.name + \"-\" + Date.now();\r\n                //questions_images\r\n                storage.ref(`questions_images/${fileName}`).put(file)\r\n                .on(\"state_changed\", (snapshot) => {}, \r\n                (error) => {console.log(error)}, \r\n                () => {\r\n                    storage.ref(`questions_images/`).child(`${fileName}`).getDownloadURL()\r\n                    .then(\r\n                        (url) => {\r\n                            imageURL.current = url;\r\n                            check();\r\n                        },\r\n                        (error) => {\r\n                            console.log(error);\r\n                        }\r\n                    );\r\n                });\r\n            }\r\n\r\n            for (let i = 0; i < keyImages.length; i++) {\r\n                if (keyImages[i]) {\r\n                    let keyFileName = keyImages[i].name + \"-\" + Date.now();\r\n                    //questions_images\r\n                    storage.ref(`questions_images/${keyFileName}`).put(keyImages[i])\r\n                    .on(\"state_changed\", (snapshot) => {}, \r\n                    (error) => {console.log(error)}, \r\n                    () => {\r\n                        storage.ref(`questions_images/`).child(`${keyFileName}`).getDownloadURL()\r\n                        .then(\r\n                            (url) => {\r\n                                setImageURL(i, url);  \r\n                            },\r\n                            (error) => {\r\n                                console.log(error);\r\n                            }\r\n                        );\r\n                    });\r\n                }\r\n            }\r\n        } else {\r\n            callParentSubmit();\r\n        }\r\n    }\r\n\r\n    const setImageURL = (index, path) => {\r\n        // let arrays = [...keyImagesURLs];\r\n        // arrays[index] = path;\r\n        // setKeyImagesURLs(arrays);\r\n\r\n        let getArray = keyImageURLs.current;\r\n        getArray[index] = path;\r\n        keyImageURLs.current = getArray;\r\n        check();\r\n    }\r\n\r\n    const callParentSubmit = () => {\r\n        let output = {};\r\n        output[\"question\"] = question;\r\n        output[\"questionType\"] = questionType;\r\n        output[\"numberOfChoices\"] = numberOfChoices;\r\n        output[\"keyCorrects\"] = keyCorrects;\r\n        output[\"explain\"] = explain;\r\n        output[\"time\"] = time === \"\"? 0 : parseInt(time);\r\n        output[\"point\"] = point;\r\n        output[\"image\"] = imageURL.current;\r\n        output[\"keyImages\"] = keyImageURLs.current;\r\n\r\n        if (questionType === 0) {\r\n            output[\"keys\"] = keys;\r\n        } else {\r\n            output[\"keys\"] = [\"\"];\r\n            \r\n            for (let i = 0; i < keyType1Choices.length - 1; i++) {\r\n                output[\"keys\"][0] += keyType1Choices[i] + \"~>\";\r\n            }\r\n            output[\"keys\"][0] += keyType1Choices[keyType1Choices.length - 1];\r\n        }\r\n\r\n        //Refresh\r\n        setValidateError(\"\");\r\n        setQuestion(\"\");\r\n        setQuestionType(0);\r\n        setNumberOfChoicesError(\"\");\r\n        setNumberOfChoices(0);\r\n        setKeys([]);\r\n        setKeyCorrects([]);\r\n        setExplain(\"\");\r\n        setFile(null);\r\n        setTime(\"\");\r\n        setPoint(\"\");\r\n        keyImageURLs.current = [];\r\n        imageURL.current = \"\";\r\n        setKeyImages([]);\r\n        setKeyType1Choices([]);\r\n        setType1CurrentInput(\"\");\r\n\r\n        props.onAddQuestionSubmit(output);\r\n    }\r\n\r\n    const keyBoxKeyDown = (e) => {\r\n        if (e.key === \"Enter\") {\r\n            e.preventDefault();\r\n            setKeyType1Choices([...keyType1Choices, e.target.value]);\r\n            setType1CurrentInput(\"\");\r\n        }\r\n    }\r\n\r\n    const deleteKeyType1Choice = (index) => {\r\n        let cloneArray = [...keyType1Choices];\r\n        cloneArray.splice(index, 1);\r\n        setKeyType1Choices(cloneArray);\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n            {...props}\r\n        >\r\n            <Modal.Header>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Thêm câu hỏi (câu {props.numberOfQuest + 1})\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            <Row>\r\n                    <Col md={10} sm={12} className=\"offset-md-1 offset-sm-0\">\r\n                        <Form id=\"questionAddForm\" onSubmit={prepareFormSubmit}>\r\n                            <Form.Group className=\"\">\r\n                                <Form.Label>Câu hỏi</Form.Label>\r\n                                <Form.Control as=\"textarea\" required validate=\"Quiz name is not valid!\"\r\n                                onChange={(e) => setQuestion(e.target.value)}/>\r\n                            </Form.Group>\r\n                            <Form.Group className=\"\">\r\n                            <fieldset>\r\n                                <Form.Group as={Row} className=\"mb-3\">\r\n                                <Form.Label as=\"legend\" column sm={2}>\r\n                                    Loại:\r\n                                </Form.Label>\r\n                                <Col sm={12}>\r\n                                    <Form.Check\r\n                                        type=\"radio\"\r\n                                        label=\"Trắc nghiệm\"\r\n                                        name=\"question-type\"\r\n                                        checked={questionType === 0}\r\n                                        onChange={() => handleQuestionTypeChange(0)}\r\n                                    />\r\n                                     <Form.Check\r\n                                        type=\"radio\"\r\n                                        label=\"Trả lời ngắn\"\r\n                                        name=\"question-type\"\r\n                                        checked={questionType === 1}\r\n                                        onChange={() => handleQuestionTypeChange(1)}\r\n                                    />\r\n                                </Col>\r\n                                </Form.Group>\r\n                            </fieldset>\r\n                            </Form.Group>\r\n                            {questionType === 0 && \r\n                                (<Form.Group className=\"\">\r\n                                <Form.Label>Số phương án</Form.Label>\r\n                                <Form.Control \r\n                                    type=\"number\"\r\n                                    validate=\"Phải là giá trị từ 2 đến 5\" \r\n                                    min={2} max={5}\r\n                                    onChange={(e) => handleChoicesCountChange(e.target.value)}\r\n                                />\r\n                                <p className=\"error\">{numberOfChoicesError}</p>\r\n                                </Form.Group>)\r\n                            }\r\n                            {\r\n                                numberOfChoicesError === \"\" && (questionType === 0 && [...Array(parseInt(numberOfChoices))].map((x, i) => {\r\n                                    let getClassName = `question-${numberOfChoices}-answer`;\r\n                                    let idImageName = `file-${i}`\r\n                                    return (\r\n                                        <Form.Group className=\"mt-2\">\r\n                                            <Form.Label>Phương án {i + 1}\r\n                                            <Form.Check\r\n                                                type=\"radio\"\r\n                                                label=\"Đúng\"\r\n                                                name={getClassName}\r\n                                                onChange={() => handleCorrectKeyChange(i)}\r\n                                            />\r\n                                            </Form.Label>\r\n                                            <Form.Control type=\"text\" validate=\"Không hợp lệ!\" minLength={1}\r\n                                            onChange={(e) => handleKeyChange(i, e.target.value)}/>\r\n                                            <Form.Group className=\"mb-3 mt-3\">\r\n                                                <Form.Label>Ảnh phương án (nếu có)</Form.Label><br></br>\r\n                                                <label htmlFor={idImageName} className=\"shareOption\" style={{cursor: \"pointer\"}}>\r\n                                                    <PermMedia htmlColor=\"green\" className=\"shareIcon\"/>\r\n                                                    <Form.Control style={{display: \"none\"}} type=\"file\" id={idImageName} accept=\".png, .jpeg, .jpg\" size=\"sm\" onChange={(e) => handleKeyImage(i, e.target.files[0])}/>\r\n                                                </label>\r\n                                            </Form.Group>\r\n                                            {keyImages[i] && <div className=\"keyImgContainer\">\r\n                                                <img className=\"shareImg\" src={URL.createObjectURL(keyImages[i])} alt=\"\"/>\r\n                                                <Cancel className=\"shareCancelImg\" onClick={() => setImageNull(i)}></Cancel>\r\n                                            </div>}\r\n                                        </Form.Group>\r\n                                    )\r\n                                })) || \r\n                                (questionType === 1 && \r\n                                    <>\r\n                                    <Form.Group className=\"\">\r\n                                        <Form.Label>Đáp án</Form.Label>\r\n                                        <Form.Control type=\"text\" validate=\"Đáp án không hợp lệ!\" minLength={1}\r\n                                        value={type1CurrentInput}\r\n                                        onChange={(e) => handleKeyChange(0, e.target.value)}\r\n                                        onKeyPress={(e) => keyBoxKeyDown(e)}/>\r\n                                    </Form.Group>\r\n                                    {keyType1Choices.length > 0 && \r\n                                    <Paper component=\"ul\">\r\n                                        {keyType1Choices.map((choice, index) => {\r\n                                            return (\r\n                                                <li key={index}>\r\n                                                    <Chip\r\n                                                        label={choice}\r\n                                                        onDelete={() => deleteKeyType1Choice(index)}\r\n                                                    />\r\n                                                </li>\r\n                                            )\r\n                                        })}\r\n                                    </Paper>\r\n                                    }\r\n                                    </>\r\n                                )\r\n                            }\r\n                            <Form.Group className=\"mt-2\">\r\n                                <Form.Label>Giải thích (nếu có)</Form.Label>\r\n                                <Form.Control as=\"textarea\" validate=\"Không hợp lệ!\"\r\n                                onChange={(e) => setExplain(e.target.value)}/>\r\n                            </Form.Group>\r\n                            <Form.Group className=\"mt-2\">\r\n                                <Form.Label>Điểm số</Form.Label>\r\n                                <Form.Control type=\"number\" min={0} validate=\"Không hợp lệ!\"\r\n                                onChange={(e) => setPoint(e.target.value)}/>\r\n                            </Form.Group>\r\n                            {!props.useQuizTime && <Form.Group className=\"mb-3 mt-3\">\r\n                                <Form.Label>Thời gian trả lời (giây): </Form.Label><br></br>\r\n                                <Form.Control \r\n                                    type=\"number\"\r\n                                    min = {1}\r\n                                    onChange={(e) => setTime(e.target.value)} \r\n                                />\r\n                            </Form.Group>}\r\n                            <Form.Group className=\"mb-3 mt-3\">\r\n                                <Form.Label>Ảnh câu hỏi (nếu có)</Form.Label><br></br>\r\n                                <label htmlFor=\"file\" className=\"shareOption\" style={{cursor: \"pointer\"}}>\r\n                                    <PermMedia htmlColor=\"green\" className=\"shareIcon\"/>\r\n                                    <Form.Control style={{display: \"none\"}} type=\"file\" id=\"file\" accept=\".png, .jpeg, .jpg\" size=\"sm\" onChange={(e) => setFile(e.target.files[0])}/>\r\n                                </label>\r\n\r\n                            </Form.Group>\r\n                            </Form>\r\n                            {file && <div className=\"shareImgContainer\">\r\n                                <img className=\"shareImg\" src={URL.createObjectURL(file)} alt=\"\"/>\r\n                                <Cancel className=\"shareCancelImg\" onClick={() => setFile(null)}></Cancel>\r\n                            </div>}\r\n                    </Col>\r\n                </Row>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n            <p className=\"error\">{validateError}</p>\r\n            <Button variant=\"success\" type=\"submit\" form=\"questionAddForm\">Thêm</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default QuestionAddModal","D:\\Coding\\Online Quiz System\\online-quiz-system\\Client\\online-quiz-system\\src\\firebase.js",[],"D:\\Coding\\Online Quiz System\\online-quiz-system\\Client\\online-quiz-system\\src\\pages\\quiz-attempts\\QuizAttempts.jsx",["167","168","169","170","171"],"import \"./quiz-attempts.css\";\r\nimport {React, useState, useEffect, useContext} from 'react'\r\nimport axios from \"axios\";\r\nimport {AuthContext} from \"../../context/AuthContext\";\r\nimport {Row, Col, Container, Button, Form, Table, Pagination} from \"react-bootstrap\";\r\nimport QuizReview from \"./../../components/quiz-review/QuizReview\";\r\n  \r\nfunction QuizAttempts(props) {\r\n    const {user} = useContext(AuthContext);\r\n    const [quizInfo, setQuizInfo] = useState([]);\r\n    const [recordsContent, setRecordsContent] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [currentShowing, setCurrentShowing] = useState([]);\r\n    const [currentShowPerPage, setCurrentShowPerPage] = useState(20);\r\n    const [pageRange, setPageRange] = useState([]);\r\n    const [startEndIndex, setStartEndIndex] = useState([]);\r\n    const [currentCriteria, setCurrentCriteria] = useState(\"5\");\r\n    const [currentSortAsc, setCurrentSortAsc] = useState(\"desc\");\r\n    const [quizReviewReady, setQuizReviewReady] = useState(false);\r\n    const [questions, setQuestions] = useState([]);\r\n    const [details, setDetails] = useState([]);\r\n    const [selectionName, setSelectionName] = useState(\"\");\r\n      \r\n    const initializeTable = (dataLength) => {\r\n        let maxPage = dataLength % currentShowPerPage === 0 ? parseInt(dataLength / currentShowPerPage) : parseInt(dataLength / currentShowPerPage) + 1;\r\n        let buildPageRange = [];\r\n        for (let i = 1; i <= maxPage; i++) {\r\n            buildPageRange.push(i);\r\n        } \r\n        setPageRange(buildPageRange)\r\n        setStartEndIndex([dataLength > 0? 1 : 0, Math.min(currentShowPerPage, dataLength)])\r\n    }\r\n\r\n    const changePage = (pageNumber) => {\r\n        let start = (pageNumber - 1) * currentShowPerPage + 1;\r\n        let end = Math.min(pageNumber * currentShowPerPage, recordsContent.length);\r\n        setCurrentPage(pageNumber);\r\n        setStartEndIndex([start, end]);\r\n        let getArray = recordsContent;\r\n        let getSubArray = getArray.slice(start - 1, end);\r\n        setCurrentShowing(getSubArray);\r\n    }\r\n\r\n    const sortRecord = (array, criteria, isAscending) => {\r\n        let criteriaString = \"\";\r\n        switch (criteria) {\r\n            case 0: //ID\r\n                criteriaString = \"board_id\";\r\n                break;\r\n            case 1: //Name\r\n                criteriaString = \"candidate_name\";\r\n                break;\r\n            case 2: //Time\r\n                criteriaString = \"time\";\r\n                break;\r\n            case 3: //Point\r\n                criteriaString = \"point\";\r\n                break;\r\n            case 4: //Correct\r\n                criteriaString = \"correct\";\r\n                break;\r\n            case 5: //Timestamp\r\n                criteriaString = \"date_created\";\r\n                break;  \r\n        }\r\n        if (criteria !== 5) {\r\n            if (isAscending) {\r\n                array.sort((a,b) => (a[criteriaString] > b[criteriaString]) ? 1 : ((b[criteriaString] > a[criteriaString]) ? -1 : 0))\r\n            } else {\r\n                array.sort((a,b) => (a[criteriaString] < b[criteriaString]) ? 1 : ((b[criteriaString] < a[criteriaString]) ? -1 : 0))\r\n            }\r\n        } else {\r\n            if (isAscending) {\r\n                array.sort((a,b) => (Date.parse(a[\"date_created\"]) > Date.parse(b[\"date_created\"])) ? 1 : ((Date.parse(b[\"date_created\"]) > Date.parse(a[\"date_created\"])) ? -1 : 0))\r\n            } else {\r\n                array.sort((a,b) => (Date.parse(a[\"date_created\"]) < Date.parse(b[\"date_created\"])) ? 1 : ((Date.parse(b[\"date_created\"]) < Date.parse(a[\"date_created\"])) ? -1 : 0))\r\n            }\r\n        }\r\n        return array;\r\n    }\r\n\r\n    const formatTime = (timeInSeconds) => {\r\n        if (!timeInSeconds)\r\n            return \"\";\r\n        let time = \"\";\r\n        if (timeInSeconds >= 3600) {\r\n            let hours = parseInt(timeInSeconds / 3600);\r\n            let minutes = parseInt((timeInSeconds - 3600 * hours) / 60);\r\n            let seconds = timeInSeconds - 3600 * hours - 60 * minutes;\r\n            time = `${hours} giờ`;\r\n            if (minutes > 0)\r\n                time += ` ${minutes} phút`;\r\n            if (seconds > 0)\r\n                time += ` ${seconds} giây`;\r\n        } else if (timeInSeconds >= 60) {\r\n            let minutes = parseInt(timeInSeconds / 60);\r\n            let seconds = timeInSeconds - 60 * minutes;\r\n            time = `${minutes} phút`;\r\n            if (seconds > 0)\r\n                time += ` ${seconds} giây`;\r\n        } else {\r\n            time = (timeInSeconds).toString() + \" giây\";\r\n        }\r\n        return time;\r\n    }\r\n\r\n    Number.prototype.pad = function(size) {\r\n        var s = String(this);\r\n        while (s.length < (size || 2)) {s = \"0\" + s;}\r\n        return s;\r\n    }\r\n\r\n    const formatDate = (d) => {\r\n        return `${d.getDate().pad(2)}/${(d.getMonth()+ 1).pad(2)}/${d.getFullYear()} ${d.getHours().pad(2)}:${d.getMinutes().pad(2)}:${d.getSeconds().pad(2)}`\r\n    }\r\n\r\n    const getInfo = async() => {\r\n        await axios.get(`https://online-quiz-system-server.herokuapp.com/api/quiz/info/${props.location.state.id}`)\r\n        .then(async(res) => {\r\n            let thisQuizInfo = res.data;\r\n            setQuizInfo(thisQuizInfo[0]);\r\n    \r\n            await axios.post(`https://online-quiz-system-server.herokuapp.com/api/quiz/get_attempts`, {\r\n                quiz_id: props.location.state.id,\r\n                user_id: user.id,\r\n            })\r\n            .then(res1 => {\r\n                res1.data = sortRecord(res1.data, 5, false);\r\n                for (let i = 0; i < res1.data.length; i++) {\r\n                    Object.assign(res1.data[i], {\"board_id\": i + 1});\r\n                }\r\n                setRecordsContent(res1.data);\r\n                initializeTable(res1.data.length);\r\n\r\n                let getSubArray = res1.data;\r\n                getSubArray = res1.data.slice(0, Math.min(currentShowPerPage, res1.data.length));\r\n                setCurrentShowing(getSubArray);\r\n            })\r\n            .catch(err1 => {\r\n                console.log(err1);\r\n            });\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n       \r\n        \r\n    }\r\n\r\n    const viewDetail = async(user, quiz, name) => {\r\n        await axios.post(\"https://online-quiz-system-server.herokuapp.com/api/quiz/attempt_detail\", {\r\n            user_id: user,\r\n            quiz_id: quiz\r\n        })\r\n        .then(res => {\r\n            let result = res.data;\r\n            let getDetails = result.slice(0, result.length / 2);\r\n            let getQuestions = result.slice(result.length / 2, result.length);\r\n            for (let i = 0; i < getQuestions.length; i++) {\r\n                if (getQuestions[i].question_type === 0) {\r\n                    getDetails[i].answer = parseInt(getDetails[i].answer);\r\n                }\r\n            }\r\n            setSelectionName(name);\r\n            setDetails(getDetails);\r\n            setQuestions(getQuestions);\r\n        })\r\n        .catch(err => {\r\n\r\n        })\r\n    }\r\n\r\n    const changeCriteria = (mode, value) => {\r\n        if (mode === 0) {\r\n            let getTmpData = recordsContent;\r\n            getTmpData = sortRecord(getTmpData, parseInt(value), currentSortAsc === \"asc\");\r\n            setRecordsContent(getTmpData);\r\n            let getSubArray = getTmpData;\r\n            getSubArray = getTmpData.slice(0, Math.min(currentShowPerPage, getTmpData.length));\r\n            setCurrentShowing(getSubArray);\r\n            setCurrentCriteria(value);\r\n        } else {\r\n            let getTmpData = recordsContent;\r\n            getTmpData = sortRecord(getTmpData, parseInt(currentCriteria), value === \"asc\");\r\n            setRecordsContent(getTmpData);\r\n            let getSubArray = getTmpData;\r\n            getSubArray = getTmpData.slice(0, Math.min(currentShowPerPage, getTmpData.length));\r\n            setCurrentShowing(getSubArray);\r\n            setCurrentSortAsc(value);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        let dataLength = recordsContent.length;\r\n        let maxPage = dataLength % currentShowPerPage === 0 ? parseInt(dataLength / currentShowPerPage) : parseInt(dataLength / currentShowPerPage) + 1;\r\n        let buildPageRange = [];\r\n        for (let i = 1; i <= maxPage; i++) {\r\n            buildPageRange.push(i);\r\n        } \r\n        setPageRange(buildPageRange)\r\n        setStartEndIndex([dataLength > 0? 1 : 0, Math.min(currentShowPerPage, dataLength)])\r\n    }, [currentShowPerPage])\r\n\r\n    useEffect(() => {\r\n        changePage(1);\r\n    }, [recordsContent])\r\n\r\n    useEffect(() => {\r\n        if (quizInfo.length === 0) {\r\n            getInfo();\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (details.length !== 0 && questions.length !== 0 && details.length === questions.length) {\r\n            setQuizReviewReady(true);\r\n        }\r\n    }, [details, questions])\r\n\r\n    return (\r\n        <Container className=\"mt-3 mb-3\">\r\n            {!quizReviewReady && quizInfo.length !== 0 &&\r\n            <>\r\n            <h1 className=\"text-center\">{quizInfo.quiz_title}</h1>\r\n            <h3 className=\"text-center\">Tạo bởi: {quizInfo.creator}</h3>\r\n            <h5 className=\"text-center\">Bảng kết quả</h5>\r\n            <Row className=\"mb-2\">\r\n                <Col lg={3} md={6} sm={12}>\r\n                    <Form.Group>\r\n                        <Form.Label>Sắp xếp theo</Form.Label>\r\n                        <Form.Control inline as=\"select\" onChange={(e) => changeCriteria(0, e.target.value)} value={currentCriteria}>\r\n                            <option value=\"0\">#</option>\r\n                            <option value=\"1\">Tên</option>\r\n                            <option value=\"2\">Thời gian làm bài</option>\r\n                            <option value=\"3\">Điểm</option>\r\n                            <option value=\"4\">Số câu đúng</option>\r\n                            <option value=\"5\">Dấu thời gian</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                </Col>\r\n                <Col lg={3} md={6} sm={12}>\r\n                    <Form.Group>\r\n                        <Form.Label style={{opacity: 0}}> a</Form.Label>\r\n                        <Form.Control inline as=\"select\" onChange={(e) => changeCriteria(1, e.target.value)} value={currentSortAsc}>\r\n                            <option value=\"asc\">Tăng dần</option>\r\n                            <option value=\"desc\">Giảm dần</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                </Col>\r\n            </Row>\r\n            <Table \r\n                responsive\r\n                bordered\r\n                striped\r\n                hover\r\n                variant=\"light\"\r\n            >\r\n                <thead>\r\n                    <tr>\r\n                        <th className=\"text-center\">#</th>\r\n                        <th className=\"text-center\">Tên</th>\r\n                        <th className=\"text-center\">Thời gian làm bài</th>\r\n                        <th className=\"text-center\">Điểm</th>\r\n                        <th className=\"text-center\">Số câu đúng</th>\r\n                        <th className=\"text-center\">Dấu thời gian</th>\r\n                        <th className=\"text-center\">Xem chi tiết</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        currentShowing.map((record, i) => {\r\n                            return (\r\n                                <tr key={i}>\r\n                                    <td>{record.board_id}</td>\r\n                                    <td>{record.candidate_name}</td>\r\n                                    <td>{formatTime(record.time)}</td>\r\n                                    <td>{record.point}</td>\r\n                                    <td>{record.correct}</td>\r\n                                    <td>{formatDate(new Date(record.date_created))}</td>\r\n                                    <td className=\"text-center\">\r\n                                        <Button \r\n                                            variant=\"info\" \r\n                                            className=\"btn-sm text-white\"\r\n                                            onClick={() => {viewDetail(record.user_id, props.location.state.id, record.candidate_name)}}\r\n                                        >Chi tiết</Button>\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        })\r\n                    }\r\n                    {/* <tr>\r\n                    <td>1</td>\r\n                    {Array.from({ length: 6 }).map((_, index) => (\r\n                        <td key={index}>Table cell {index}</td>\r\n                    ))}\r\n                    </tr> */}\r\n                    \r\n                </tbody>\r\n            </Table>\r\n            <div className=\"d-flex justify-content-between\">\r\n                <div>\r\n                    <p>Hiển thị kết quả {startEndIndex[0]} - {startEndIndex[1]} trên tổng số {recordsContent.length} kết quả</p>\r\n                    <Pagination>\r\n                        { \r\n                            currentPage !== 1 && \r\n                            <>\r\n                            <Pagination.Item\r\n                                onClick={() => changePage(1)}\r\n                            >{\"«\"}</Pagination.Item>\r\n                            <Pagination.Item\r\n                                onClick={() => changePage(currentPage - 1)}\r\n                            >{\"‹\"}</Pagination.Item>\r\n                            </>\r\n                        }\r\n                        { \r\n                            currentPage === 1 && \r\n                            <>\r\n                            <Pagination.Item disabled>{\"«\"}</Pagination.Item>\r\n                            <Pagination.Item disabled>{\"‹\"}</Pagination.Item>\r\n                            </>\r\n                        }\r\n                        {\r\n                            pageRange.map((pageNumber) => {\r\n                                let activeClass = pageNumber === currentPage;\r\n                                if (activeClass) {\r\n                                    return (\r\n                                        <Pagination.Item \r\n                                            key={pageNumber} \r\n                                            onClick={() => changePage(pageNumber)} \r\n                                            active \r\n                                            activeLabel=\"\">{pageNumber}</Pagination.Item>    \r\n                                    )\r\n                                } else {\r\n                                    return (\r\n                                        <Pagination.Item \r\n                                            key={pageNumber}\r\n                                            onClick={() => changePage(pageNumber)}>{pageNumber}</Pagination.Item>    \r\n                                    )\r\n                                }\r\n                            })\r\n                        }\r\n                        { \r\n                            currentPage !== pageRange[pageRange.length - 1] && \r\n                            <>\r\n                            <Pagination.Item\r\n                                onClick={() => changePage(currentPage + 1)}\r\n                            >{\"›\"}</Pagination.Item>\r\n                            <Pagination.Item\r\n                                onClick={() => changePage(pageRange[pageRange.length - 1])}\r\n                            >{\"»\"}</Pagination.Item>\r\n                            </>\r\n                        }\r\n                        { \r\n                            currentPage === pageRange[pageRange.length - 1] && \r\n                            <>\r\n                            <Pagination.Item disabled>{\"›\"}</Pagination.Item>\r\n                            <Pagination.Item disabled>{\"»\"}</Pagination.Item>\r\n                            </>\r\n                        }\r\n                    </Pagination>\r\n                </div>\r\n                <div>\r\n                    <Form.Group>\r\n                        <Form.Label>Hiển thị / trang</Form.Label>\r\n                        <Form.Control as=\"select\" onChange={(e) => setCurrentShowPerPage(parseInt(e.target.value))} value={currentShowPerPage}>\r\n                            <option value=\"10\">10</option>\r\n                            <option value=\"20\">20</option>\r\n                            <option value=\"30\">30</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                </div>\r\n            </div>\r\n            \r\n            </>\r\n            }\r\n            {\r\n                quizReviewReady && \r\n                <>\r\n                <QuizReview\r\n                    reviewContent={details}\r\n                    questions={questions}\r\n                    quizInfo={quizInfo}\r\n                    name={selectionName}\r\n                ></QuizReview>\r\n                <div className=\"mt-3 text-center mb-3\">\r\n                    <Button variant=\"success\" className=\"btn-rounded text-white\" onClick={() => {\r\n                        setQuizReviewReady(false);\r\n                        setDetails([]);\r\n                        setQuestions([]);\r\n                        setSelectionName(\"\");\r\n                    }}>Đóng</Button>\r\n                </div>\r\n                </>\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default QuizAttempts\r\n","D:\\Coding\\Online Quiz System\\online-quiz-system\\Client\\online-quiz-system\\src\\pages\\my-attempts\\MyAttempts.jsx",["172","173","174","175","176","177"],"import \"./my-attempts.css\";\r\nimport {React, useState, useEffect, useContext} from 'react'\r\nimport axios from \"axios\";\r\nimport {AuthContext} from \"../../context/AuthContext\";\r\nimport {Row, Col, Container, Button, Form, Table, Pagination} from \"react-bootstrap\";\r\nimport QuizReview from \"./../../components/quiz-review/QuizReview\";\r\n  \r\nfunction MyAttempts(props) {\r\n    const {user} = useContext(AuthContext);\r\n    const [quizInfo, setQuizInfo] = useState([]);\r\n    const [recordsContent, setRecordsContent] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [currentShowing, setCurrentShowing] = useState([]);\r\n    const [currentShowPerPage, setCurrentShowPerPage] = useState(20);\r\n    const [pageRange, setPageRange] = useState([]);\r\n    const [startEndIndex, setStartEndIndex] = useState([]);\r\n    const [currentCriteria, setCurrentCriteria] = useState(\"5\");\r\n    const [currentSortAsc, setCurrentSortAsc] = useState(\"desc\");\r\n    const [quizReviewReady, setQuizReviewReady] = useState(false);\r\n    const [questions, setQuestions] = useState([]);\r\n    const [details, setDetails] = useState([]);\r\n    const [selectionName, setSelectionName] = useState(\"\");\r\n      \r\n    const initializeTable = (dataLength) => {\r\n        let maxPage = dataLength % currentShowPerPage === 0 ? parseInt(dataLength / currentShowPerPage) : parseInt(dataLength / currentShowPerPage) + 1;\r\n        let buildPageRange = [];\r\n        for (let i = 1; i <= maxPage; i++) {\r\n            buildPageRange.push(i);\r\n        } \r\n        setPageRange(buildPageRange)\r\n        setStartEndIndex([dataLength > 0? 1 : 0, Math.min(currentShowPerPage, dataLength)])\r\n    }\r\n\r\n    const changePage = (pageNumber) => {\r\n        let start = (pageNumber - 1) * currentShowPerPage + 1;\r\n        let end = Math.min(pageNumber * currentShowPerPage, recordsContent.length);\r\n        setCurrentPage(pageNumber);\r\n        setStartEndIndex([start, end]);\r\n        let getArray = recordsContent;\r\n        let getSubArray = getArray.slice(start - 1, end);\r\n        setCurrentShowing(getSubArray);\r\n    }\r\n\r\n    const sortRecord = (array, criteria, isAscending) => {\r\n        let criteriaString = \"\";\r\n        switch (criteria) {\r\n            case 0: //ID\r\n                criteriaString = \"board_id\";\r\n                break;\r\n            case 1: //Name\r\n                criteriaString = \"quiz_name\";\r\n                break;\r\n            case 2: //Time\r\n                criteriaString = \"time\";\r\n                break;\r\n            case 3: //Point\r\n                criteriaString = \"point\";\r\n                break;\r\n            case 4: //Correct\r\n                criteriaString = \"correct\";\r\n                break;\r\n            case 5: //Timestamp\r\n                criteriaString = \"date_created\";\r\n                break;  \r\n        }\r\n        if (criteria !== 5) {\r\n            if (isAscending) {\r\n                array.sort((a,b) => (a[criteriaString] > b[criteriaString]) ? 1 : ((b[criteriaString] > a[criteriaString]) ? -1 : 0))\r\n            } else {\r\n                array.sort((a,b) => (a[criteriaString] < b[criteriaString]) ? 1 : ((b[criteriaString] < a[criteriaString]) ? -1 : 0))\r\n            }\r\n        } else {\r\n            if (isAscending) {\r\n                array.sort((a,b) => (Date.parse(a[\"date_created\"]) > Date.parse(b[\"date_created\"])) ? 1 : ((Date.parse(b[\"date_created\"]) > Date.parse(a[\"date_created\"])) ? -1 : 0))\r\n            } else {\r\n                array.sort((a,b) => (Date.parse(a[\"date_created\"]) < Date.parse(b[\"date_created\"])) ? 1 : ((Date.parse(b[\"date_created\"]) < Date.parse(a[\"date_created\"])) ? -1 : 0))\r\n            }\r\n        }\r\n        return array;\r\n    }\r\n\r\n    const formatTime = (timeInSeconds) => {\r\n        if (!timeInSeconds)\r\n            return \"\";\r\n        let time = \"\";\r\n        if (timeInSeconds >= 3600) {\r\n            let hours = parseInt(timeInSeconds / 3600);\r\n            let minutes = parseInt((timeInSeconds - 3600 * hours) / 60);\r\n            let seconds = timeInSeconds - 3600 * hours - 60 * minutes;\r\n            time = `${hours} giờ`;\r\n            if (minutes > 0)\r\n                time += ` ${minutes} phút`;\r\n            if (seconds > 0)\r\n                time += ` ${seconds} giây`;\r\n        } else if (timeInSeconds >= 60) {\r\n            let minutes = parseInt(timeInSeconds / 60);\r\n            let seconds = timeInSeconds - 60 * minutes;\r\n            time = `${minutes} phút`;\r\n            if (seconds > 0)\r\n                time += ` ${seconds} giây`;\r\n        } else {\r\n            time = (timeInSeconds).toString() + \" giây\";\r\n        }\r\n        return time;\r\n    }\r\n\r\n    Number.prototype.pad = function(size) {\r\n        var s = String(this);\r\n        while (s.length < (size || 2)) {s = \"0\" + s;}\r\n        return s;\r\n    }\r\n\r\n    const formatDate = (d) => {\r\n        return `${d.getDate().pad(2)}/${(d.getMonth()+ 1).pad(2)}/${d.getFullYear()} ${d.getHours().pad(2)}:${d.getMinutes().pad(2)}:${d.getSeconds().pad(2)}`\r\n    }\r\n\r\n    const getInfo = async() => {\r\n        await axios.post(`https://online-quiz-system-server.herokuapp.com/api/quiz/my_attempts`, {\r\n            user_id: user.id,\r\n        })\r\n        .then(res1 => {\r\n            res1.data = sortRecord(res1.data, 5, false);\r\n            for (let i = 0; i < res1.data.length; i++) {\r\n                Object.assign(res1.data[i], {\"board_id\": i + 1});\r\n            }\r\n            setRecordsContent(res1.data);\r\n            initializeTable(res1.data.length);\r\n\r\n            let getSubArray = res1.data;\r\n            getSubArray = res1.data.slice(0, Math.min(currentShowPerPage, res1.data.length));\r\n            setCurrentShowing(getSubArray);\r\n        })\r\n        .catch(err1 => {\r\n            console.log(err1);\r\n        });\r\n               \r\n    }\r\n\r\n    const viewDetail = async(user, quiz, name) => {\r\n        await axios.post(\"https://online-quiz-system-server.herokuapp.com/api/quiz/attempt_detail\", {\r\n            user_id: user,\r\n            quiz_id: quiz\r\n        })\r\n        .then(async(res) => {\r\n            let result = res.data;\r\n            let getDetails = result.slice(0, result.length / 2);\r\n            let getQuestions = result.slice(result.length / 2, result.length);\r\n            for (let i = 0; i < getQuestions.length; i++) {\r\n                if (getQuestions[i].question_type === 0) {\r\n                    getDetails[i].answer = parseInt(getDetails[i].answer);\r\n                }\r\n            }\r\n            setSelectionName(name);\r\n            setDetails(getDetails);\r\n            setQuestions(getQuestions);\r\n\r\n            await axios.get(`https://online-quiz-system-server.herokuapp.com/api/quiz/info/${quiz}`)\r\n            .then(async(res1) => {\r\n                let thisQuizInfo = res1.data;\r\n                setQuizInfo(thisQuizInfo[0]);\r\n            })\r\n            .catch(err1 => {\r\n                console.log(err1);\r\n            });\r\n        })\r\n        .catch(err => {\r\n\r\n        })\r\n    }\r\n\r\n    const changeCriteria = (mode, value) => {\r\n        if (mode === 0) {\r\n            let getTmpData = recordsContent;\r\n            getTmpData = sortRecord(getTmpData, parseInt(value), currentSortAsc === \"asc\");\r\n            setRecordsContent(getTmpData);\r\n            setCurrentCriteria(value);\r\n        } else {\r\n            let getTmpData = recordsContent;\r\n            getTmpData = sortRecord(getTmpData, parseInt(currentCriteria), value === \"asc\");\r\n            setRecordsContent(getTmpData);\r\n            setCurrentSortAsc(value);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        let dataLength = recordsContent.length;\r\n        let maxPage = dataLength % currentShowPerPage === 0 ? parseInt(dataLength / currentShowPerPage) : parseInt(dataLength / currentShowPerPage) + 1;\r\n        let buildPageRange = [];\r\n        for (let i = 1; i <= maxPage; i++) {\r\n            buildPageRange.push(i);\r\n        } \r\n        setPageRange(buildPageRange)\r\n        setStartEndIndex([dataLength > 0? 1 : 0, Math.min(currentShowPerPage, dataLength)])\r\n    }, [currentShowPerPage])\r\n\r\n    useEffect(() => {\r\n        changePage(1);\r\n    }, [recordsContent])\r\n\r\n    useEffect(() => {\r\n        if (quizInfo.length === 0) {\r\n            getInfo();\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (details.length !== 0 && questions.length !== 0 && details.length === questions.length && quizInfo.length !== 0) {\r\n            setQuizReviewReady(true);\r\n        }\r\n    }, [details, questions, quizInfo])\r\n\r\n    return (\r\n        <Container className=\"mt-3 mb-3\">\r\n            {!quizReviewReady &&\r\n            <>\r\n            <h2 className=\"text-center\">Kết quả cá nhân</h2>\r\n            <Row className=\"mb-2\">\r\n                <Col lg={3} md={6} sm={12}>\r\n                    <Form.Group>\r\n                        <Form.Label>Sắp xếp theo</Form.Label>\r\n                        <Form.Control inline as=\"select\" onChange={(e) => changeCriteria(0, e.target.value)} value={currentCriteria}>\r\n                            <option value=\"0\">#</option>\r\n                            <option value=\"1\">Quiz</option>\r\n                            <option value=\"2\">Thời gian làm bài</option>\r\n                            <option value=\"3\">Điểm</option>\r\n                            <option value=\"4\">Số câu đúng</option>\r\n                            <option value=\"5\">Dấu thời gian</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                </Col>\r\n                <Col lg={3} md={6} sm={12}>\r\n                    <Form.Group>\r\n                        <Form.Label style={{opacity: 0}}> a</Form.Label>\r\n                        <Form.Control inline as=\"select\" onChange={(e) => changeCriteria(1, e.target.value)} value={currentSortAsc}>\r\n                            <option value=\"asc\">Tăng dần</option>\r\n                            <option value=\"desc\">Giảm dần</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                </Col>\r\n            </Row>\r\n            <Table \r\n                responsive\r\n                bordered\r\n                striped\r\n                hover\r\n                variant=\"light\"\r\n            >\r\n                <thead>\r\n                    <tr>\r\n                        <th className=\"text-center\">#</th>\r\n                        <th className=\"text-center\">Quiz</th>\r\n                        <th className=\"text-center\">Thời gian làm bài</th>\r\n                        <th className=\"text-center\">Điểm</th>\r\n                        <th className=\"text-center\">Số câu đúng</th>\r\n                        <th className=\"text-center\">Dấu thời gian</th>\r\n                        <th className=\"text-center\">Xem chi tiết</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        currentShowing.map((record, i) => {\r\n                            return (\r\n                                <tr key={i}>\r\n                                    <td>{record.board_id}</td>\r\n                                    <td>{record.quiz_name}</td>\r\n                                    <td>{formatTime(record.time)}</td>\r\n                                    <td>{record.point}</td>\r\n                                    <td>{record.correct}</td>\r\n                                    <td>{formatDate(new Date(record.date_created))}</td>\r\n                                    <td className=\"text-center\">\r\n                                        <Button \r\n                                            variant=\"info\" \r\n                                            className=\"btn-sm text-white\"\r\n                                            onClick={() => {viewDetail(record.user_id, record.quiz_id, record.candidate_name)}}\r\n                                        >Chi tiết</Button>\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        })\r\n                    }                    \r\n                </tbody>\r\n            </Table>\r\n            <div className=\"d-flex justify-content-between\">\r\n                <div>\r\n                    <p>Hiển thị kết quả {startEndIndex[0]} - {startEndIndex[1]} trên tổng số {recordsContent.length} kết quả</p>\r\n                    <Pagination>\r\n                        { \r\n                            currentPage !== 1 && \r\n                            <>\r\n                            <Pagination.Item\r\n                                onClick={() => changePage(1)}\r\n                            >{\"«\"}</Pagination.Item>\r\n                            <Pagination.Item\r\n                                onClick={() => changePage(currentPage - 1)}\r\n                            >{\"‹\"}</Pagination.Item>\r\n                            </>\r\n                        }\r\n                        { \r\n                            currentPage === 1 && \r\n                            <>\r\n                            <Pagination.Item disabled>{\"«\"}</Pagination.Item>\r\n                            <Pagination.Item disabled>{\"‹\"}</Pagination.Item>\r\n                            </>\r\n                        }\r\n                        {\r\n                            pageRange.map((pageNumber) => {\r\n                                let activeClass = pageNumber === currentPage;\r\n                                if (activeClass) {\r\n                                    return (\r\n                                        <Pagination.Item \r\n                                            key={pageNumber} \r\n                                            onClick={() => changePage(pageNumber)} \r\n                                            active \r\n                                            activeLabel=\"\">{pageNumber}</Pagination.Item>    \r\n                                    )\r\n                                } else {\r\n                                    return (\r\n                                        <Pagination.Item \r\n                                            key={pageNumber}\r\n                                            onClick={() => changePage(pageNumber)}>{pageNumber}</Pagination.Item>    \r\n                                    )\r\n                                }\r\n                            })\r\n                        }\r\n                        { \r\n                            currentPage !== pageRange[pageRange.length - 1] && \r\n                            <>\r\n                            <Pagination.Item\r\n                                onClick={() => changePage(currentPage + 1)}\r\n                            >{\"›\"}</Pagination.Item>\r\n                            <Pagination.Item\r\n                                onClick={() => changePage(pageRange[pageRange.length - 1])}\r\n                            >{\"»\"}</Pagination.Item>\r\n                            </>\r\n                        }\r\n                        { \r\n                            currentPage === pageRange[pageRange.length - 1] && \r\n                            <>\r\n                            <Pagination.Item disabled>{\"›\"}</Pagination.Item>\r\n                            <Pagination.Item disabled>{\"»\"}</Pagination.Item>\r\n                            </>\r\n                        }\r\n                    </Pagination>\r\n                </div>\r\n                <div>\r\n                    <Form.Group>\r\n                        <Form.Label>Hiển thị / trang</Form.Label>\r\n                        <Form.Control as=\"select\" onChange={(e) => setCurrentShowPerPage(parseInt(e.target.value))} value={currentShowPerPage}>\r\n                            <option value=\"10\">10</option>\r\n                            <option value=\"20\">20</option>\r\n                            <option value=\"30\">30</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                </div>\r\n            </div>\r\n            \r\n            </>\r\n            }\r\n            {\r\n                quizReviewReady && \r\n                <>\r\n                <QuizReview\r\n                    reviewContent={details}\r\n                    questions={questions}\r\n                    quizInfo={quizInfo}\r\n                ></QuizReview>\r\n                <div className=\"mt-3 text-center mb-3\">\r\n                    <Button variant=\"info\" className=\"text-white\" onClick={() => {\r\n                        setQuizReviewReady(false);\r\n                        setDetails([]);\r\n                        setQuestions([]);\r\n                    }}>Đóng</Button>\r\n                </div>\r\n                </>\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default MyAttempts","D:\\Coding\\Online Quiz System\\online-quiz-system\\Client\\online-quiz-system\\src\\components\\headbar\\Headbar.jsx",[],{"ruleId":"178","severity":1,"message":"179","line":6,"column":9,"nodeType":"180","messageId":"181","endLine":6,"endColumn":22},{"ruleId":"182","severity":1,"message":"183","line":23,"column":9,"nodeType":"184","messageId":"185","endLine":42,"endColumn":10},{"ruleId":"186","severity":1,"message":"187","line":43,"column":8,"nodeType":"188","endLine":43,"endColumn":34,"suggestions":"189"},{"ruleId":"178","severity":1,"message":"190","line":16,"column":12,"nodeType":"180","messageId":"181","endLine":16,"endColumn":16},{"ruleId":"178","severity":1,"message":"191","line":16,"column":18,"nodeType":"180","messageId":"181","endLine":16,"endColumn":25},{"ruleId":"178","severity":1,"message":"192","line":18,"column":12,"nodeType":"180","messageId":"181","endLine":18,"endColumn":22},{"ruleId":"178","severity":1,"message":"193","line":21,"column":12,"nodeType":"180","messageId":"181","endLine":21,"endColumn":21},{"ruleId":"178","severity":1,"message":"194","line":21,"column":23,"nodeType":"180","messageId":"181","endLine":21,"endColumn":35},{"ruleId":"195","severity":1,"message":"196","line":75,"column":39,"nodeType":"197","messageId":"198","endLine":75,"endColumn":41},{"ruleId":"195","severity":1,"message":"199","line":115,"column":66,"nodeType":"197","messageId":"198","endLine":115,"endColumn":68},{"ruleId":"178","severity":1,"message":"200","line":2,"column":9,"nodeType":"180","messageId":"181","endLine":2,"endColumn":17},{"ruleId":"178","severity":1,"message":"201","line":3,"column":8,"nodeType":"180","messageId":"181","endLine":3,"endColumn":13},{"ruleId":"178","severity":1,"message":"202","line":4,"column":8,"nodeType":"180","messageId":"181","endLine":4,"endColumn":14},{"ruleId":"178","severity":1,"message":"203","line":8,"column":8,"nodeType":"180","messageId":"181","endLine":8,"endColumn":24},{"ruleId":"178","severity":1,"message":"204","line":9,"column":8,"nodeType":"180","messageId":"181","endLine":9,"endColumn":16},{"ruleId":"178","severity":1,"message":"205","line":14,"column":8,"nodeType":"180","messageId":"181","endLine":14,"endColumn":24},{"ruleId":"178","severity":1,"message":"206","line":80,"column":24,"nodeType":"180","messageId":"181","endLine":80,"endColumn":37},{"ruleId":"207","severity":1,"message":"208","line":128,"column":29,"nodeType":"209","endLine":128,"endColumn":45},{"ruleId":"178","severity":1,"message":"210","line":8,"column":30,"nodeType":"180","messageId":"181","endLine":8,"endColumn":41},{"ruleId":"186","severity":1,"message":"211","line":157,"column":15,"nodeType":"212","endLine":176,"endColumn":6},{"ruleId":"186","severity":1,"message":"213","line":176,"column":8,"nodeType":"188","endLine":176,"endColumn":23,"suggestions":"214"},{"ruleId":"195","severity":1,"message":"196","line":193,"column":50,"nodeType":"197","messageId":"198","endLine":193,"endColumn":52},{"ruleId":"195","severity":1,"message":"196","line":261,"column":27,"nodeType":"197","messageId":"198","endLine":261,"endColumn":29},{"ruleId":"195","severity":1,"message":"196","line":328,"column":28,"nodeType":"197","messageId":"198","endLine":328,"endColumn":30},{"ruleId":"195","severity":1,"message":"199","line":345,"column":48,"nodeType":"197","messageId":"198","endLine":345,"endColumn":50},{"ruleId":"195","severity":1,"message":"199","line":350,"column":52,"nodeType":"197","messageId":"198","endLine":350,"endColumn":54},{"ruleId":"195","severity":1,"message":"199","line":360,"column":51,"nodeType":"197","messageId":"198","endLine":360,"endColumn":53},{"ruleId":"195","severity":1,"message":"199","line":365,"column":66,"nodeType":"197","messageId":"198","endLine":365,"endColumn":68},{"ruleId":"195","severity":1,"message":"199","line":391,"column":48,"nodeType":"197","messageId":"198","endLine":391,"endColumn":50},{"ruleId":"195","severity":1,"message":"196","line":398,"column":56,"nodeType":"197","messageId":"198","endLine":398,"endColumn":58},{"ruleId":"195","severity":1,"message":"199","line":413,"column":51,"nodeType":"197","messageId":"198","endLine":413,"endColumn":53},{"ruleId":"195","severity":1,"message":"196","line":421,"column":70,"nodeType":"197","messageId":"198","endLine":421,"endColumn":72},{"ruleId":"195","severity":1,"message":"196","line":489,"column":29,"nodeType":"197","messageId":"198","endLine":489,"endColumn":31},{"ruleId":"186","severity":1,"message":"215","line":495,"column":8,"nodeType":"188","endLine":495,"endColumn":10,"suggestions":"216"},{"ruleId":"195","severity":1,"message":"199","line":519,"column":26,"nodeType":"197","messageId":"198","endLine":519,"endColumn":28},{"ruleId":"195","severity":1,"message":"196","line":533,"column":26,"nodeType":"197","messageId":"198","endLine":533,"endColumn":28},{"ruleId":"195","severity":1,"message":"196","line":554,"column":44,"nodeType":"197","messageId":"198","endLine":554,"endColumn":46},{"ruleId":"195","severity":1,"message":"199","line":573,"column":26,"nodeType":"197","messageId":"198","endLine":573,"endColumn":28},{"ruleId":"195","severity":1,"message":"199","line":573,"column":47,"nodeType":"197","messageId":"198","endLine":573,"endColumn":49},{"ruleId":"195","severity":1,"message":"196","line":585,"column":44,"nodeType":"197","messageId":"198","endLine":585,"endColumn":46},{"ruleId":"186","severity":1,"message":"217","line":602,"column":8,"nodeType":"188","endLine":602,"endColumn":22,"suggestions":"218"},{"ruleId":"195","severity":1,"message":"196","line":607,"column":51,"nodeType":"197","messageId":"198","endLine":607,"endColumn":53},{"ruleId":"195","severity":1,"message":"199","line":608,"column":51,"nodeType":"197","messageId":"198","endLine":608,"endColumn":53},{"ruleId":"195","severity":1,"message":"196","line":633,"column":35,"nodeType":"197","messageId":"198","endLine":633,"endColumn":37},{"ruleId":"195","severity":1,"message":"199","line":638,"column":35,"nodeType":"197","messageId":"198","endLine":638,"endColumn":37},{"ruleId":"195","severity":1,"message":"199","line":648,"column":60,"nodeType":"197","messageId":"198","endLine":648,"endColumn":62},{"ruleId":"207","severity":1,"message":"208","line":649,"column":29,"nodeType":"209","endLine":649,"endColumn":96},{"ruleId":"195","severity":1,"message":"196","line":651,"column":68,"nodeType":"197","messageId":"198","endLine":651,"endColumn":70},{"ruleId":"195","severity":1,"message":"196","line":666,"column":68,"nodeType":"197","messageId":"198","endLine":666,"endColumn":70},{"ruleId":"195","severity":1,"message":"196","line":670,"column":93,"nodeType":"197","messageId":"198","endLine":670,"endColumn":95},{"ruleId":"195","severity":1,"message":"196","line":672,"column":67,"nodeType":"197","messageId":"198","endLine":672,"endColumn":69},{"ruleId":"195","severity":1,"message":"199","line":680,"column":67,"nodeType":"197","messageId":"198","endLine":680,"endColumn":69},{"ruleId":"207","severity":1,"message":"208","line":680,"column":76,"nodeType":"209","endLine":680,"endColumn":123},{"ruleId":"195","severity":1,"message":"196","line":693,"column":84,"nodeType":"197","messageId":"198","endLine":693,"endColumn":86},{"ruleId":"195","severity":1,"message":"199","line":705,"column":60,"nodeType":"197","messageId":"198","endLine":705,"endColumn":62},{"ruleId":"195","severity":1,"message":"199","line":709,"column":35,"nodeType":"197","messageId":"198","endLine":709,"endColumn":37},{"ruleId":"195","severity":1,"message":"199","line":710,"column":35,"nodeType":"197","messageId":"198","endLine":710,"endColumn":37},{"ruleId":"195","severity":1,"message":"199","line":719,"column":62,"nodeType":"197","messageId":"198","endLine":719,"endColumn":64},{"ruleId":"195","severity":1,"message":"199","line":719,"column":83,"nodeType":"197","messageId":"198","endLine":719,"endColumn":85},{"ruleId":"195","severity":1,"message":"199","line":726,"column":74,"nodeType":"197","messageId":"198","endLine":726,"endColumn":76},{"ruleId":"195","severity":1,"message":"196","line":726,"column":95,"nodeType":"197","messageId":"198","endLine":726,"endColumn":97},{"ruleId":"178","severity":1,"message":"219","line":2,"column":49,"nodeType":"180","messageId":"181","endLine":2,"endColumn":55},{"ruleId":"186","severity":1,"message":"211","line":59,"column":15,"nodeType":"212","endLine":68,"endColumn":6},{"ruleId":"186","severity":1,"message":"220","line":68,"column":8,"nodeType":"188","endLine":68,"endColumn":10,"suggestions":"221"},{"ruleId":"195","severity":1,"message":"196","line":116,"column":45,"nodeType":"197","messageId":"198","endLine":116,"endColumn":47},{"ruleId":"178","severity":1,"message":"219","line":2,"column":37,"nodeType":"180","messageId":"181","endLine":2,"endColumn":43},{"ruleId":"186","severity":1,"message":"222","line":16,"column":8,"nodeType":"188","endLine":16,"endColumn":10,"suggestions":"223"},{"ruleId":"186","severity":1,"message":"224","line":22,"column":8,"nodeType":"188","endLine":22,"endColumn":21,"suggestions":"225"},{"ruleId":"195","severity":1,"message":"199","line":37,"column":41,"nodeType":"197","messageId":"198","endLine":37,"endColumn":43},{"ruleId":"207","severity":1,"message":"208","line":38,"column":29,"nodeType":"209","endLine":38,"endColumn":77},{"ruleId":"195","severity":1,"message":"196","line":40,"column":49,"nodeType":"197","messageId":"198","endLine":40,"endColumn":51},{"ruleId":"195","severity":1,"message":"196","line":65,"column":49,"nodeType":"197","messageId":"198","endLine":65,"endColumn":51},{"ruleId":"195","severity":1,"message":"199","line":87,"column":67,"nodeType":"197","messageId":"198","endLine":87,"endColumn":69},{"ruleId":"207","severity":1,"message":"208","line":87,"column":76,"nodeType":"209","endLine":87,"endColumn":123},{"ruleId":"178","severity":1,"message":"226","line":27,"column":12,"nodeType":"180","messageId":"181","endLine":27,"endColumn":22},{"ruleId":"178","severity":1,"message":"227","line":27,"column":24,"nodeType":"180","messageId":"181","endLine":27,"endColumn":37},{"ruleId":"195","severity":1,"message":"199","line":190,"column":22,"nodeType":"197","messageId":"198","endLine":190,"endColumn":24},{"ruleId":"195","severity":1,"message":"196","line":294,"column":19,"nodeType":"197","messageId":"198","endLine":294,"endColumn":21},{"ruleId":"186","severity":1,"message":"228","line":333,"column":8,"nodeType":"188","endLine":333,"endColumn":10,"suggestions":"229"},{"ruleId":"230","severity":1,"message":"231","line":396,"column":61,"nodeType":"232","messageId":"233","endLine":396,"endColumn":63},{"ruleId":"230","severity":1,"message":"231","line":420,"column":60,"nodeType":"232","messageId":"233","endLine":420,"endColumn":62},{"ruleId":"230","severity":1,"message":"231","line":425,"column":47,"nodeType":"232","messageId":"233","endLine":425,"endColumn":49},{"ruleId":"230","severity":1,"message":"234","line":425,"column":47,"nodeType":"232","messageId":"233","endLine":425,"endColumn":49},{"ruleId":"230","severity":1,"message":"234","line":425,"column":89,"nodeType":"232","messageId":"233","endLine":425,"endColumn":91},{"ruleId":"230","severity":1,"message":"231","line":433,"column":37,"nodeType":"232","messageId":"233","endLine":433,"endColumn":39},{"ruleId":"230","severity":1,"message":"231","line":492,"column":38,"nodeType":"232","messageId":"233","endLine":492,"endColumn":40},{"ruleId":"230","severity":1,"message":"231","line":501,"column":33,"nodeType":"232","messageId":"233","endLine":501,"endColumn":35},{"ruleId":"230","severity":1,"message":"234","line":501,"column":33,"nodeType":"232","messageId":"233","endLine":501,"endColumn":35},{"ruleId":"230","severity":1,"message":"234","line":502,"column":53,"nodeType":"232","messageId":"233","endLine":502,"endColumn":55},{"ruleId":"230","severity":1,"message":"231","line":361,"column":61,"nodeType":"232","messageId":"233","endLine":361,"endColumn":63},{"ruleId":"230","severity":1,"message":"231","line":389,"column":37,"nodeType":"232","messageId":"233","endLine":389,"endColumn":39},{"ruleId":"182","severity":1,"message":"183","line":46,"column":9,"nodeType":"184","messageId":"185","endLine":65,"endColumn":10},{"ruleId":"235","severity":1,"message":"236","line":107,"column":5,"nodeType":"237","messageId":"198","endLine":111,"endColumn":6},{"ruleId":"186","severity":1,"message":"238","line":202,"column":8,"nodeType":"188","endLine":202,"endColumn":28,"suggestions":"239"},{"ruleId":"186","severity":1,"message":"240","line":206,"column":8,"nodeType":"188","endLine":206,"endColumn":24,"suggestions":"241"},{"ruleId":"186","severity":1,"message":"242","line":212,"column":8,"nodeType":"188","endLine":212,"endColumn":10,"suggestions":"243"},{"ruleId":"178","severity":1,"message":"244","line":22,"column":12,"nodeType":"180","messageId":"181","endLine":22,"endColumn":25},{"ruleId":"182","severity":1,"message":"183","line":46,"column":9,"nodeType":"184","messageId":"185","endLine":65,"endColumn":10},{"ruleId":"235","severity":1,"message":"236","line":107,"column":5,"nodeType":"237","messageId":"198","endLine":111,"endColumn":6},{"ruleId":"186","severity":1,"message":"238","line":194,"column":8,"nodeType":"188","endLine":194,"endColumn":28,"suggestions":"245"},{"ruleId":"186","severity":1,"message":"240","line":198,"column":8,"nodeType":"188","endLine":198,"endColumn":24,"suggestions":"246"},{"ruleId":"186","severity":1,"message":"242","line":204,"column":8,"nodeType":"188","endLine":204,"endColumn":10,"suggestions":"247"},"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react-hooks/exhaustive-deps","React Hook useEffect has an unnecessary dependency: 'window.location.pathname'. Either exclude it or remove the dependency array. Outer scope values like 'window.location.pathname' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["248"],"'mode' is assigned a value but never used.","'setMode' is assigned a value but never used.","'quizChosen' is assigned a value but never used.","'quizValid' is assigned a value but never used.","'setQuizValid' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'useState' is defined but never used.","'Modal' is defined but never used.","'Avatar' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'LockOutlinedIcon' is defined but never used.","'setLoginError' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'ProgressBar' is defined but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'answersOld', 'correctQuestCount', 'point', 'props.location.state.id', 'quizInfo', 'quizTime', and 'user.id'. Either include them or remove the dependency array.",["249"],"React Hook useEffect has missing dependencies: 'getQuizInfo', 'quizInfo.length', and 'thinkingAudio'. Either include them or remove the dependency array.",["250"],"React Hook useEffect has missing dependencies: 'acceptingAnswers', 'answers', 'checkAnswerTextFromTimeOut', 'finish', 'questions', 'quizTime', 'thinkingAudio', 'time', and 'timerCountInterval'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setTime' needs the current value of 'questions'.",["251"],"'useRef' is defined but never used.","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["252"],"React Hook useEffect has missing dependencies: 'props.questions', 'props.quizInfo', and 'props.reviewContent'. Either include them or remove the dependency array. If 'setMarkContent' needs the current value of 'props.reviewContent', you can also switch to useReducer instead of useState and read 'props.reviewContent' in the reducer.",["253"],"React Hook useEffect has a missing dependency: 'questions.length'. Either include it or remove the dependency array.",["254"],"'renderBool' is assigned a value but never used.","'setRenderBool' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.questionEditGet'. Either include it or remove the dependency array. If 'setQuestion' needs the current value of 'props.questionEditGet', you can also switch to useReducer instead of useState and read 'props.questionEditGet' in the reducer.",["255"],"no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'.","no-extend-native","Number prototype is read only, properties should not be added.","AssignmentExpression","React Hook useEffect has a missing dependency: 'recordsContent.length'. Either include it or remove the dependency array.",["256"],"React Hook useEffect has a missing dependency: 'changePage'. Either include it or remove the dependency array.",["257"],"React Hook useEffect has missing dependencies: 'getInfo' and 'quizInfo.length'. Either include them or remove the dependency array.",["258"],"'selectionName' is assigned a value but never used.",["259"],["260"],["261"],{"desc":"262","fix":"263"},{"desc":"264","fix":"265"},{"desc":"266","fix":"267"},{"desc":"268","fix":"269"},{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},{"desc":"274","fix":"275"},{"desc":"276","fix":"277"},{"desc":"278","fix":"279"},{"desc":"280","fix":"281"},{"desc":"282","fix":"283"},{"desc":"278","fix":"284"},{"desc":"280","fix":"285"},{"desc":"282","fix":"286"},"Update the dependencies array to be: []",{"range":"287","text":"288"},"Update the dependencies array to be: [answersOld, correctQuestCount, markCompleted, point, props.location.state.id, quizInfo, quizTime, user.id]",{"range":"289","text":"290"},"Update the dependencies array to be: [getQuizInfo, quizInfo.length, thinkingAudio]",{"range":"291","text":"292"},"Update the dependencies array to be: [acceptingAnswers, answers, checkAnswerTextFromTimeOut, currentQuest, finish, questions, quizTime, thinkingAudio, time, timerCountInterval]",{"range":"293","text":"294"},"Update the dependencies array to be: [user]",{"range":"295","text":"296"},"Update the dependencies array to be: [props.questions, props.quizInfo, props.reviewContent]",{"range":"297","text":"298"},"Update the dependencies array to be: [markContent, questions.length]",{"range":"299","text":"300"},"Update the dependencies array to be: [props.questionEditGet]",{"range":"301","text":"302"},"Update the dependencies array to be: [currentShowPerPage, recordsContent.length]",{"range":"303","text":"304"},"Update the dependencies array to be: [changePage, recordsContent]",{"range":"305","text":"306"},"Update the dependencies array to be: [getInfo, quizInfo.length]",{"range":"307","text":"308"},{"range":"309","text":"304"},{"range":"310","text":"306"},{"range":"311","text":"308"},[1419,1445],"[]",[7344,7359],"[answersOld, correctQuestCount, markCompleted, point, props.location.state.id, quizInfo, quizTime, user.id]",[22038,22040],"[getQuizInfo, quizInfo.length, thinkingAudio]",[26352,26366],"[acceptingAnswers, answers, checkAnswerTextFromTimeOut, currentQuest, finish, questions, quizTime, thinkingAudio, time, timerCountInterval]",[2623,2625],"[user]",[594,596],"[props.questions, props.quizInfo, props.reviewContent]",[709,722],"[markContent, questions.length]",[11498,11500],"[props.questionEditGet]",[8472,8492],"[currentShowPerPage, recordsContent.length]",[8551,8567],"[changePage, recordsContent]",[8675,8677],"[getInfo, quizInfo.length]",[7991,8011],[8070,8086],[8194,8196]]