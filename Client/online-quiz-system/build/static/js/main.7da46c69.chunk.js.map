{"version":3,"sources":["pages/quiz-main/QuizMain.jsx","assets/sounds/right.mp3","assets/sounds/wrong.mp3","assets/sounds/invalid.mp3","assets/sounds/time.wav","apiCalls.js","assets/images/ncn.png","assets/images/cover.png","pages/auth/Auth.jsx","assets/images/quiz1.png","assets/images/quiz2.png","assets/images/quiz3.png","pages/home/Home.jsx","pages/quiz-attempts/QuizAttempts.jsx","pages/my-attempts/MyAttempts.jsx","components/headbar/Headbar.jsx","firebase.js","components/question-add-modal/QuestionAddModal.jsx","components/question-edit-modal/QuestionEditModal.jsx","pages/quiz-create/QuizCreate.jsx","App.js","index.js","context/AuthReducer.js","context/AuthContext.js","components/quiz-review/QuizReview.jsx"],"names":["QuizMain","props","user","useContext","AuthContext","useState","questions","setQuestions","quizInfo","setQuizInfo","point","setPoint","currentQuest","setCurrentQuest","quizTime","setQuizTime","time","setTime","quizStarted","setQuizStarted","quizFinished","setQuizFinished","timerCount","useRef","currentAnswersSet","setCurrentAnswersSet","timeCountDown","setTimeCountDown","timerCountInterval","setTimerCountInterval","answerFieldClass","setAnswerFieldClass","answers","setAnswers","acceptingAnswers","setAcceptingAnswers","answersOld","setAnswersOld","currentAnswerField","setCurrentAnswerField","answered","setAnswered","answerDisplay","setAnswerDisplay","correctQuestCount","setCorrectQuestCount","answerBoxContent","setAnswerBoxContent","markCompleted","setMarkCompleted","quizReviewModalShow","setQuizReviewModalShow","quizReviewModal","setQuizReviewModal","directToHome","setDirectToHome","thinkingAudio","setThinkingAudio","isVisible","setIsVisible","shuffleArray","array","i","length","j","Math","floor","random","temp","toHHMMSS","secs","sec_num","parseInt","map","v","filter","join","nextQuest","question_time","finish","mode","a","info","user_id","id","quiz_id","location","state","correct","details","axios","post","then","res","catch","err","getTmpOldAnswers","question_type","push","answer","mark","question_id","getAnswer","is_correct","question_point","checkTextAnswer","Buffer","answer_content","toString","clearInterval","pause","useEffect","current","getQuizInfo","get","thisQuizInfo","data","res1","listOfQuestions","tmpValidArray","err1","console","log","checkAnswerText","e","key","preventDefault","target","value","answersList","split","replace","Audio","correctAudio","play","wrongAudio","checkAnswerTextFromTimeOut","keyArr","replaceAll","tmpAnswer1","trim","toUpperCase","includes","tmpMark","tmpKeyArr","tmpAnswerForModify","tmpSubAnswerArr","Split","tmp","found","b","handleBoxChange","getAnswers","timeThinking","volume","addEventListener","this","currentTime","setTimeout","getTime","setInterval","onChange","getCurrent","tmpAudio","invalidAudio","tmpArray","visibilityChange","className","quiz_title","creator","onClick","variant","question_content","media","src","Control","disabled","type","placeholder","onKeyPress","chosen","lg","md","sm","answer_id","getTmpAnswer","checkAnswerMCQ","explanation","style","marginRight","show","onHide","reviewContent","to","loginCall","userCredentials","dispatch","payload","Copyright","Typography","color","align","Link","href","Date","getFullYear","useStyles","makeStyles","theme","root","height","image","backgroundImage","Cover","backgroundRepeat","backgroundColor","palette","grey","backgroundSize","backgroundPosition","paper","margin","spacing","display","flexDirection","alignItems","avatar","secondary","main","form","width","marginTop","submit","dialogWrapper","padding","position","top","dialogTitle","paddingRight","Auth","classes","React","openPopup","setOpenPopup","loginError","setLoginError","registerError","setRegisterError","sentLogin","setSentLogin","isFetching","username","password","usernameCreate","fullnameCreate","passwordCreate","passwordConfirm","handleLogin","handleRegister","fullname","Grid","container","component","CssBaseline","item","xs","Paper","elevation","square","Logo","onSubmit","TextField","required","fullWidth","label","name","autoFocus","inputRef","fontStyle","textAlign","Button","Box","mt","Dialog","open","maxWidth","DialogTitle","flexGrow","DialogContent","inputProps","minLength","Home","publicQuizzes","setPublicQuizzes","setQuizChosen","quizID","setQuizID","quizPass","setQuizPass","error","setError","modalShowing","setModalShowing","passwordModalShowing","setPasswordModalShowing","dashboardQuizID","setDashboardQuizID","getQuizzes","listOfQuizzes","JSON","parse","request","response","joinQuiz","pass","status","checkAttempts","Container","Nav","defaultActiveKey","Item","active","Row","quiz","index","quiz_time","hours","minutes","seconds","Thumnail1","Thumnail2","Thumnail3","Col","Card","Img","Body","Title","Text","number_of_quests","quiz_creator","PlayCircleFilled","Dashboard","pathname","Modal","size","centered","Header","Form","Footer","QuizAttempts","recordsContent","setRecordsContent","currentPage","setCurrentPage","currentShowing","setCurrentShowing","currentShowPerPage","setCurrentShowPerPage","pageRange","setPageRange","startEndIndex","setStartEndIndex","currentCriteria","setCurrentCriteria","currentSortAsc","setCurrentSortAsc","quizReviewReady","setQuizReviewReady","setDetails","selectionName","setSelectionName","initializeTable","dataLength","maxPage","buildPageRange","min","changePage","pageNumber","start","end","getSubArray","slice","sortRecord","criteria","isAscending","criteriaString","sort","formatTime","timeInSeconds","Number","prototype","pad","s","String","getInfo","Object","assign","viewDetail","result","getDetails","getQuestions","changeCriteria","getTmpData","Group","Label","inline","as","opacity","Table","responsive","bordered","striped","hover","record","board_id","candidate_name","d","date_created","getDate","getMonth","getHours","getMinutes","getSeconds","Pagination","activeLabel","QuizReview","MyAttempts","quiz_name","Headbar","window","Navbar","bg","expand","Brand","alt","Toggle","Collapse","NavDropdown","title","History","role","Create","Divider","localStorage","setItem","stringify","reload","ExitToApp","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","storage","QuestionAddModal","question","setQuestion","questionType","setQuestionType","numberOfChoices","setNumberOfChoices","numberOfChoicesError","setNumberOfChoicesError","keys","setKeys","keyCorrects","setKeyCorrects","keyImages","setKeyImages","keyType1Choices","setKeyType1Choices","type1CurrentInput","setType1CurrentInput","explain","setExplain","file","setFile","validateError","setValidateError","keyImageURLs","imageURL","check","getCount","count","callParentSubmit","handleQuestionTypeChange","handleKeyChange","emptyArr","prepareFormSubmit","useQuizTime","isNaN","fileName","now","ref","put","on","snapshot","child","getDownloadURL","url","keyFileName","setImageURL","path","getArray","output","onAddQuestionSubmit","numberOfQuest","validate","column","Check","checked","max","tmpKeysArr","tmpKeysCorrectArr","tmpKeyImages","tmpKeyImagesURLs","handleChoicesCountChange","Array","x","getClassName","idImageName","getKeyCorrectArr","handleCorrectKeyChange","htmlFor","cursor","PermMedia","htmlColor","accept","handleKeyImage","files","URL","createObjectURL","Cancel","setImageNull","keyBoxKeyDown","choice","Chip","onDelete","cloneArray","splice","deleteKeyType1Choice","QuestionEditModal","keyImageUrl","setKeyImageUrl","setURL","emptyArr1","questionEditGet","onEditQuestionSubmit","QuizCreate","quizTitle","setQuizTitle","quizCode","setQuizCode","quizMode","setQuizMode","setNumberOfQuest","setUseQuizTime","questionList","setQuestionList","addQuestionModalShow","setAddQuestionModalShow","submittedQuizDetails","setSubmittedQuizDetails","quizDetailError","setQuizDetailError","timeUnit","setTimeUnit","editQuestionModalShow","setEditQuestionModalShow","setQuestionEditGet","rawOrder","setRawOrder","errorModalShowing","setErrorModalShowing","redirect","setRedirect","onQuizModeChange","addQuiz","newQuiz","quiz_mode","raw_order","cloneQuestionList","controlId","maxLength","muted","paddingLeft","Add","fontSize","quest","index1","getQuest","deleteQuestion","editQuestion","input","content","questIndex","App","document","exact","render","ReactDOM","getElementById","AuthReducer","action","INITIAL_STATE","createContext","AuthContextProvider","children","useReducer","localData","getItem","Provider","markContent","setMarkContent","loaded","setLoaded","class"],"mappings":"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","file":"static/js/main.7da46c69.chunk.js","sourcesContent":["import {React, useState, useEffect, useContext, useRef} from 'react'\r\nimport \"./quizmain.css\";\r\nimport axios from \"axios\";\r\nimport {AuthContext} from \"../../context/AuthContext\";\r\nimport {\r\n    Redirect\r\n} from \"react-router-dom\";\r\nimport {Row, Col, Container, ProgressBar, Button, Form} from \"react-bootstrap\";\r\nimport QuizReview from \"./../../components/quiz-review/QuizReview\";\r\nimport PageVisibility from 'react-page-visibility';\r\n\r\n//Audio\r\nimport correctAudio from \"./../../assets/sounds/right.mp3\";\r\nimport wrongAudio from \"./../../assets/sounds/wrong.mp3\";\r\nimport invalidAudio from \"./../../assets/sounds/invalid.mp3\";\r\nimport timeThinking from \"./../../assets/sounds/time.wav\";\r\n\r\nfunction QuizMain(props) {\r\n    const {user} = useContext(AuthContext);\r\n    const [questions, setQuestions] = useState([]);\r\n    const [quizInfo, setQuizInfo] = useState([]);\r\n    const [point, setPoint] = useState(0);\r\n    const [currentQuest, setCurrentQuest] = useState(0);\r\n    const [quizTime, setQuizTime] = useState(false)\r\n    const [time, setTime] = useState(0);\r\n    const [quizStarted, setQuizStarted] = useState(false);\r\n    const [quizFinished, setQuizFinished] = useState(false);\r\n    const timerCount = useRef(0);\r\n    const [currentAnswersSet, setCurrentAnswersSet] = useState([]);\r\n    const [timeCountDown, setTimeCountDown] = useState(\"\");\r\n    const [timerCountInterval, setTimerCountInterval] = useState(0);\r\n    const [answerFieldClass, setAnswerFieldClass] = useState(false);\r\n    const [answers, setAnswers] = useState([]);\r\n    const [acceptingAnswers, setAcceptingAnswers] = useState([]);\r\n    const [answersOld, setAnswersOld] = useState([]);\r\n    const [currentAnswerField, setCurrentAnswerField] = useState(\"\");\r\n    const [answered, setAnswered] = useState(false);\r\n    const [answerDisplay, setAnswerDisplay] = useState(\"\");\r\n    const [correctQuestCount, setCorrectQuestCount] = useState(0);\r\n    const [answerBoxContent, setAnswerBoxContent] = useState(\"\");\r\n    const [markCompleted, setMarkCompleted] = useState(false);\r\n    const [quizReviewModalShow, setQuizReviewModalShow] = useState(false);\r\n    const [quizReviewModal, setQuizReviewModal] = useState(false);\r\n    const [directToHome, setDirectToHome] = useState(false);\r\n    const [thinkingAudio, setThinkingAudio] = useState(null);\r\n    const [isVisible, setIsVisible] = useState(true);\r\n\r\n    const shuffleArray = (array) => {\r\n        for (var i = array.length - 1; i > 0; i--) {\r\n            var j = Math.floor(Math.random() * (i + 1));\r\n            var temp = array[i];\r\n            array[i] = array[j];\r\n            array[j] = temp;\r\n        }\r\n        return array\r\n    }\r\n\r\n    const toHHMMSS = (secs) => {\r\n        var sec_num = parseInt(secs, 10)\r\n        var hours   = Math.floor(sec_num / 3600)\r\n        var minutes = Math.floor(sec_num / 60) % 60\r\n        var seconds = sec_num % 60\r\n    \r\n        return [hours,minutes,seconds]\r\n            .map(v => v < 10 ? \"0\" + v : v)\r\n            .filter((v,i) => v !== \"00\" || i > 0)\r\n            .join(\":\")\r\n    }\r\n\r\n    const nextQuest = () => {\r\n        if (quizTime && questions[currentQuest].question_time != null)\r\n        {\r\n            setTime(questions[currentQuest].question_time)\r\n        }\r\n        setCurrentQuest(currentQuest + 1)\r\n    }\r\n\r\n    const lastQuest = () => {\r\n        setCurrentQuest(currentQuest - 1)\r\n    }\r\n\r\n    const finish = async(mode) => {\r\n        if (mode === 1) {\r\n            const info = {\r\n                user_id: user.id,\r\n                quiz_id: props.location.state.id,\r\n                point: point, \r\n                time: null,\r\n                correct: correctQuestCount,\r\n                details: answersOld\r\n            }\r\n            setQuizReviewModal(true);\r\n            await axios.post(\"https://online-quiz-system-server.herokuapp.com/api/quiz/attempt\", info)\r\n            .then(res => {\r\n                setQuizReviewModalShow(true);\r\n            })\r\n            .catch(err => {\r\n\r\n            })\r\n        } else {\r\n            if (!answered) {\r\n                //Check answers\r\n                let point = 0;\r\n                let correctQuestCount = 0;\r\n                let getTmpOldAnswers = [];\r\n                for (let i = 0; i < answers.length; i++) {\r\n                    if (questions[i].question_type === 0) {\r\n                        //MCQ question\r\n                        getTmpOldAnswers.push({\r\n                            answer: answers[i],\r\n                            mark: false,\r\n                            question_id: questions[i].id,\r\n                            point: 0\r\n                        })\r\n                        for (let j = 0; j < questions[i].answers.length; j++) {\r\n                            let getAnswer = questions[i].answers[j];\r\n                            if (getAnswer.id === answers[i]) {\r\n                                if (getAnswer.is_correct === 1) {\r\n                                    getTmpOldAnswers[i].mark = true;\r\n                                    getTmpOldAnswers[i].point = questions[i].question_point;\r\n                                    point += questions[i].question_point\r\n                                    correctQuestCount++;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        getTmpOldAnswers.push({\r\n                            answer: answers[i],\r\n                            mark: false,\r\n                            question_id: questions[i].id,\r\n                            point: 0\r\n                        })\r\n                        let markResult = checkTextAnswer(answers[i], Buffer(questions[i].answers[0].answer_content, \"base64\").toString(\"utf-8\"));\r\n                        if (markResult) {\r\n                            getTmpOldAnswers[i].mark = true;\r\n                            getTmpOldAnswers[i].point = questions[i].question_point;\r\n                            point += questions[i].question_point\r\n                            correctQuestCount++;\r\n                        }\r\n                    }\r\n                }\r\n                setAnswersOld(getTmpOldAnswers);\r\n                setPoint(point);\r\n                setCorrectQuestCount(correctQuestCount);\r\n                setAnswered(true);\r\n                clearInterval(timerCountInterval);\r\n                setTimerCountInterval(null);\r\n                setAnswerFieldClass(true);\r\n                setMarkCompleted(true);\r\n            }\r\n        }\r\n        thinkingAudio.pause();\r\n        setQuizFinished(true);\r\n    }\r\n\r\n    useEffect(async() => {\r\n        if (!quizTime && markCompleted) {\r\n            const info = {\r\n                user_id: user.id,\r\n                quiz_id: props.location.state.id,\r\n                point: point, \r\n                time: quizInfo[\"quiz_time\"] - timerCount.current < 0? 0 : quizInfo[\"quiz_time\"] - timerCount.current,\r\n                correct: correctQuestCount,\r\n                details: answersOld\r\n            }\r\n            setQuizReviewModal(true);\r\n            await axios.post(\"https://online-quiz-system-server.herokuapp.com/api/quiz/attempt\", info)\r\n            .then(res => {\r\n                setQuizReviewModalShow(true);\r\n            })\r\n            .catch(err => {\r\n\r\n            })\r\n        }\r\n    }, [markCompleted])\r\n\r\n    const getQuizInfo = async() => {\r\n        await axios.get(`https://online-quiz-system-server.herokuapp.com/api/quiz/info/${props.location.state.id}`)\r\n        .then(async(res) => {\r\n            let thisQuizInfo = res.data;\r\n            setQuizInfo(thisQuizInfo[0]);\r\n            setQuizTime(thisQuizInfo[0][\"quiz_time\"] == null);\r\n            if (thisQuizInfo[0][\"quiz_time\"] != null) {\r\n                setTime(parseInt(thisQuizInfo[0][\"quiz_time\"]))\r\n                timerCount.current = parseInt(thisQuizInfo[0][\"quiz_time\"])\r\n                setTimeCountDown(toHHMMSS(timerCount.current));\r\n            }\r\n\r\n            await axios.get(`https://online-quiz-system-server.herokuapp.com/api/quiz/join/${props.location.state.id}`)\r\n            .then(async(res1) => {\r\n                let listOfQuestions = res1.data;\r\n                if (thisQuizInfo[0][\"raw_order\"] == 0) {\r\n                    listOfQuestions = await shuffleArray(listOfQuestions);\r\n                }\r\n                setQuestions(listOfQuestions);\r\n\r\n                if (!quizTime) {\r\n                    let tmpValidArray = [];\r\n                    for (let i = 0; i < listOfQuestions.length; i++) {\r\n                        answers.push(\"\");\r\n                        tmpValidArray.push(true);\r\n                    }\r\n                    setAnswers(answers);\r\n                    setAcceptingAnswers(tmpValidArray);\r\n                }\r\n            })\r\n            .catch(err1 => {\r\n                console.log(err1);\r\n            });\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n        \r\n    }\r\n\r\n    const checkAnswerMCQ = (answer_id) => {\r\n        if (!answered) {\r\n            if (quizTime) {\r\n                let getTmpOldAnswers = answersOld;\r\n                getTmpOldAnswers.push({\r\n                    answer: answer_id,\r\n                    mark: false,\r\n                    question_id: questions[currentQuest - 1].id,\r\n                    point: 0\r\n                }) \r\n                setAnswered(true);\r\n                for (let i = 0; i < questions[currentQuest - 1].answers.length; i++) {\r\n                    let getAnswer = questions[currentQuest - 1].answers[i];\r\n                    if (getAnswer.id === answer_id) {\r\n                        if (getAnswer.is_correct === 1) {\r\n                            setPoint(point + questions[currentQuest - 1].question_point);\r\n                            setCorrectQuestCount(correctQuestCount + 1);\r\n                            getTmpOldAnswers[currentQuest - 1].mark = true;\r\n                            getTmpOldAnswers[currentQuest - 1].point = questions[currentQuest - 1].question_point;\r\n                            new Audio(correctAudio).play();\r\n                        } else {\r\n                            new Audio(wrongAudio).play();\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                setAnswersOld(getTmpOldAnswers);\r\n                clearInterval(timerCountInterval);\r\n                setTimerCountInterval(null);\r\n            }\r\n        }\r\n        if (!quizTime) {\r\n            if (acceptingAnswers[currentQuest - 1]) {\r\n                let getTmpAnswer = answers;\r\n                getTmpAnswer[currentQuest - 1] = answer_id;\r\n                setAnswers(getTmpAnswer);\r\n            }\r\n        }\r\n    }\r\n\r\n    const checkAnswerText = (e) => {\r\n        if (!answered) {\r\n            if (quizTime) {\r\n                if (e.key == \"Enter\") {\r\n                    e.preventDefault();\r\n                    setAnswered(true);\r\n                    let getTmpOldAnswers = answersOld;\r\n                    getTmpOldAnswers.push({\r\n                        answer: e.target.value,\r\n                        mark: false,\r\n                        question_id: questions[currentQuest - 1].id,\r\n                        point: 0\r\n                    })\r\n                    let answersList = Buffer(questions[currentQuest - 1].answers[0].answer_content, \"base64\").toString(\"utf-8\");\r\n                    answersList = answersList.split(\"~|\")\r\n                    setAnswerDisplay(answersList[0].replace(\"~>\", \", \").replace(\"~+\", \", \"));\r\n                    let markResult = checkTextAnswer(e.target.value, Buffer(questions[currentQuest - 1].answers[0].answer_content, \"base64\").toString(\"utf-8\"));\r\n                    if (markResult) {\r\n                        setPoint(point + questions[currentQuest - 1].question_point);\r\n                        setCorrectQuestCount(correctQuestCount + 1);\r\n                        getTmpOldAnswers[currentQuest - 1].mark = true;\r\n                        getTmpOldAnswers[currentQuest - 1].point = questions[currentQuest - 1].question_point;\r\n                        new Audio(correctAudio).play();\r\n                    } else {\r\n                        new Audio(wrongAudio).play();\r\n                    }\r\n                    setAnswersOld(getTmpOldAnswers);\r\n                    setAnswerFieldClass(true);\r\n                    clearInterval(timerCountInterval);\r\n                    setTimerCountInterval(null);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const checkAnswerTextFromTimeOut = (mode, answer) => {\r\n        if (mode === 0) {\r\n            let getTmpOldAnswers = answersOld;\r\n            getTmpOldAnswers.push({\r\n                answer: answer,\r\n                mark: false,\r\n                question_id: questions[currentQuest - 1].id,\r\n                point: 0\r\n            }) \r\n            setAnswered(true);\r\n            setAnswersOld(getTmpOldAnswers);\r\n        } else {\r\n            setAnswered(true);\r\n            let getTmpOldAnswers = answersOld;\r\n            getTmpOldAnswers.push({\r\n                answer: answer,\r\n                mark: false,\r\n                question_id: questions[currentQuest - 1].id,\r\n                point: 0\r\n            })\r\n            setAnswersOld(getTmpOldAnswers);\r\n            let answersList = Buffer(questions[currentQuest - 1].answers[0].answer_content, \"base64\").toString(\"utf-8\");\r\n            answersList = answersList.split(\"~|\")\r\n            setAnswerDisplay(answersList[0].replace(\"~>\", \", \").replace(\"~+\", \", \"));\r\n            setAnswerFieldClass(true);\r\n        }\r\n    }\r\n\r\n    const checkTextAnswer = (answer, key) => {\r\n        key = key.replaceAll(\"~|\", \"|\");\r\n        let keyArr = key.split(\"|\");\r\n        let mark = false;\r\n        for (let i = 0; i < keyArr.length; i++) {\r\n            let tmpAnswer = answer.trim().toUpperCase();\r\n            let tmpAnswer1 = tmpAnswer;\r\n            if (tmpAnswer1 == keyArr[i].toUpperCase()) {\r\n                mark = true;\r\n            } else if (keyArr[i].includes(\"~>\")) {\r\n                let tmpMark = true;\r\n                let tmpStr = keyArr[i].replaceAll(\"~>\", \"|\");\r\n                let tmpKeyArr = tmpStr.split(\"|\");\r\n                let tmpAnswerForModify = tmpAnswer1;\r\n                if (tmpAnswerForModify.includes(\" , \")) tmpAnswerForModify = tmpAnswer1.replaceAll(\" , \", \"|\");\r\n                if (tmpAnswerForModify.includes(\" ,\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\" ,\", \"|\");\r\n                if (tmpAnswerForModify.includes(\", \")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\", \", \"|\");\r\n                if (tmpAnswerForModify.includes(\",\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\",\", \"|\");\r\n                if (tmpAnswerForModify.includes(\" - \")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\" - \", \"|\");\r\n                if (tmpAnswerForModify.includes(\"- \")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\"- \", \"|\");\r\n                if (tmpAnswerForModify.includes(\" -\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\" -\", \"|\");\r\n                if (tmpAnswerForModify.includes(\"-\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\"-\", \"|\");\r\n                if (tmpAnswerForModify.includes(\"|\")) {\r\n                    let tmpSubAnswerArr = tmpAnswerForModify.Split('|');\r\n                    if (tmpSubAnswerArr.length != tmpKeyArr.length) {\r\n                        tmpMark = false;\r\n                    } else {\r\n                        let tmp = true;\r\n                        for (let a = 0; a < tmpSubAnswerArr.length; a++) {\r\n                            if (tmpSubAnswerArr[a] != tmpKeyArr[a].toUpperCase()) {\r\n                                tmp = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (!tmp) {\r\n                            tmpMark = false;\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (tmpAnswerForModify.length != tmpKeyArr.length) {\r\n                        tmpMark = false;\r\n                    } else {\r\n                        let tmp = true;\r\n                        for (let a = 0; a < tmpAnswerForModify.length; a++) {\r\n                            if (tmpAnswerForModify[a].toString() != tmpKeyArr[a].toUpperCase()) {\r\n                                tmp = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (!tmp) {\r\n                            tmpMark = false;\r\n                        }\r\n                    }\r\n                }\r\n                mark = tmpMark;\r\n            } else if (keyArr[i].includes(\"~+\")) {\r\n                let tmpMark = true;\r\n                let tmpStr = keyArr[i].replaceAll(\"~+\", \"|\");\r\n                let tmpKeyArr = tmpStr.split(\"|\");\r\n                let tmpAnswerForModify = tmpAnswer1;\r\n                if (tmpAnswerForModify.includes(\" , \")) tmpAnswerForModify = tmpAnswer1.replaceAll(\" , \", \"|\");\r\n                if (tmpAnswerForModify.includes(\" ,\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\" ,\", \"|\");\r\n                if (tmpAnswerForModify.includes(\", \")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\", \", \"|\");\r\n                if (tmpAnswerForModify.includes(\",\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\",\", \"|\");\r\n                if (tmpAnswerForModify.includes(\" - \")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\" - \", \"|\");\r\n                if (tmpAnswerForModify.includes(\"- \")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\"- \", \"|\");\r\n                if (tmpAnswerForModify.includes(\" -\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\" -\", \"|\");\r\n                if (tmpAnswerForModify.includes(\"-\")) tmpAnswerForModify = tmpAnswerForModify.replaceAll(\"-\", \"|\");\r\n                if (tmpAnswerForModify.includes(\"|\")) {\r\n                    let tmpSubAnswerArr = tmpAnswerForModify.Split('|');\r\n                    if (tmpSubAnswerArr.length != tmpKeyArr.length) {\r\n                        tmpMark = false;\r\n                    } else {\r\n                        for (let a = 0; a < tmpSubAnswerArr.length; a++) {\r\n                            let found = false;\r\n                            for (let b = 0; b < tmpKeyArr.length; b++)\r\n                            {\r\n                                if (tmpSubAnswerArr[a] == tmpKeyArr[b].toUpperCase()) \r\n                                {\r\n                                    found = true;\r\n                                    break;\r\n                                }\r\n\r\n                            }\r\n                            if (!found)\r\n                            {\r\n                                tmpMark = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (tmpAnswerForModify.length != tmpKeyArr.length) {\r\n                        tmpMark = false;\r\n                    } else {\r\n                        for (let a = 0; a < tmpAnswerForModify.length; a++)\r\n                        {\r\n                            let found = false;\r\n                            for (let b = 0; b < tmpKeyArr.length; b++)\r\n                            {\r\n                                if (tmpAnswerForModify[a].toString() == tmpKeyArr[b].toUpperCase())\r\n                                {\r\n                                    found = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            if (!found)\r\n                            {\r\n                                tmpMark = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                mark = tmpMark;\r\n            }\r\n            if (mark)\r\n                break;\r\n        }\r\n        return mark;\r\n    }\r\n\r\n    const handleBoxChange = (e) => {\r\n        if (!quizTime) {\r\n            let getAnswers = [...answers];\r\n            getAnswers[currentQuest - 1] = e.target.value;\r\n            setCurrentAnswerField(e.target.value);\r\n            setAnswers(getAnswers);\r\n        } else {\r\n            setAnswerBoxContent(e.target.value);\r\n        }\r\n    }\r\n\r\n    const visibilityChange = () => {\r\n        let getCurrent = isVisible;\r\n        setIsVisible(!isVisible);\r\n        if (getCurrent) {\r\n            //Case move to other page\r\n            if (quizTime && !answered && timerCountInterval && quizStarted && !quizFinished) { \r\n                if (questions[currentQuest - 1].question_type === 0)\r\n                    checkAnswerTextFromTimeOut(0, -1);\r\n                else\r\n                    checkAnswerTextFromTimeOut(1, \"\");\r\n                let tmpAudio = new Audio(invalidAudio);\r\n                tmpAudio.volume = 0.3;\r\n                tmpAudio.play();\r\n                clearInterval(timerCountInterval);\r\n                setTimerCountInterval(null);\r\n            } else if (!quizTime && quizStarted && !quizFinished) {\r\n                let tmpArray = acceptingAnswers;\r\n                acceptingAnswers[currentQuest - 1] = false;\r\n                setAcceptingAnswers(tmpArray);\r\n                setAnswerFieldClass(true);\r\n                let getAnswers = [...answers];\r\n                if (questions[currentQuest - 1].question_type === 1) {\r\n                    getAnswers[currentQuest - 1] = \"\";\r\n                } else {\r\n                    getAnswers[currentQuest - 1] = -1;\r\n                }\r\n                setAnswers(getAnswers);\r\n                let tmpAudio = new Audio(invalidAudio);\r\n                tmpAudio.volume = 0.3;\r\n                tmpAudio.play();\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (quizInfo.length == 0) {\r\n            getQuizInfo();\r\n        }\r\n        if (thinkingAudio == null) {\r\n            setThinkingAudio(new Audio(timeThinking));\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (thinkingAudio != null) {\r\n            thinkingAudio.volume = 0.25;\r\n            thinkingAudio.addEventListener('ended', function () {\r\n                this.currentTime = 0;\r\n                setTimeout(() => {\r\n                    this.play();\r\n                }, 1000);\r\n            }, false);\r\n        }\r\n    }, [thinkingAudio])\r\n\r\n    useEffect(() => {\r\n        if (quizTime) {\r\n            clearInterval(timerCountInterval);\r\n            setTimerCountInterval(null);\r\n            setAnswered(false);\r\n            setAnswerDisplay(\"\");\r\n            setAnswerFieldClass(false);\r\n            setAnswerBoxContent(\"\");\r\n        }\r\n\r\n        if (currentQuest != 0) {\r\n            let getAnswers = questions[currentQuest - 1].answers;\r\n            getAnswers = shuffleArray(getAnswers);\r\n            setCurrentAnswersSet(getAnswers);\r\n\r\n            if (!quizTime) {\r\n                if (acceptingAnswers[currentQuest - 1]) {\r\n                    setCurrentAnswerField(answers[currentQuest - 1]);\r\n                    setAnswerFieldClass(false);\r\n                } else {\r\n                    setAnswerFieldClass(true);\r\n                }\r\n            }\r\n        }\r\n        if (currentQuest == 1) {\r\n            setQuizStarted(true);\r\n            if (quizTime && questions[currentQuest - 1].question_time != null)\r\n            {\r\n                setTime(questions[currentQuest].question_time)\r\n                timerCount.current = questions[currentQuest].question_time;\r\n                setTimeCountDown(toHHMMSS(timerCount.current));\r\n            }\r\n\r\n            let getTime = quizTime? questions[currentQuest - 1].question_time : time;\r\n            thinkingAudio.play();\r\n\r\n            if (quizTime)\r\n            {\r\n                timerCount.current = getTime;\r\n                setTimeCountDown(toHHMMSS(timerCount.current));\r\n            }\r\n            if (!timerCountInterval) {\r\n                let timerCountInterval = setInterval(() => {\r\n                    timerCount.current = timerCount.current - 1;\r\n                    setTimeCountDown(toHHMMSS(timerCount.current));\r\n                    if (timerCount.current == 0) {\r\n                        clearInterval(timerCountInterval);\r\n                        setTimerCountInterval(null);\r\n                        timerCount.current = 0;\r\n                        setTimeCountDown(\"00:00\");\r\n                        setAnswerFieldClass(true);\r\n                        if (quizTime) {\r\n                            if (questions[currentQuest - 1].question_type === 0)\r\n                                checkAnswerTextFromTimeOut(0, -1);\r\n                            else\r\n                                checkAnswerTextFromTimeOut(1, \"\");\r\n                        } else {\r\n                            finish(0);\r\n                        }\r\n                    }\r\n                }, 1000);\r\n                setTimerCountInterval(timerCountInterval);\r\n            }\r\n        } \r\n        if (currentQuest != 0 && currentQuest != 1 && quizTime) {\r\n            let getTime = quizTime? questions[currentQuest - 1].question_time : time;\r\n\r\n            if (quizTime)\r\n            {\r\n                timerCount.current = getTime;\r\n                setTimeCountDown(toHHMMSS(timerCount.current));\r\n            }\r\n            if (!timerCountInterval) {\r\n                let timerCountInterval = setInterval(() => {\r\n                    timerCount.current = timerCount.current - 1;\r\n                    setTimeCountDown(toHHMMSS(timerCount.current));\r\n                    if (timerCount.current == 0) {\r\n                        clearInterval(timerCountInterval);\r\n                        setTimerCountInterval(null);\r\n                        timerCount.current = 0;\r\n                        setTimeCountDown(\"00:00\");\r\n                        setAnswerFieldClass(true);\r\n                        if (quizTime) {\r\n                            if (questions[currentQuest - 1].question_type === 0)\r\n                                checkAnswerTextFromTimeOut(0, -1);\r\n                            else\r\n                                checkAnswerTextFromTimeOut(1, \"\");\r\n                        }\r\n                    }\r\n                }, 1000);\r\n                setTimerCountInterval(timerCountInterval);\r\n            }\r\n        }\r\n    }, [currentQuest])\r\n\r\n    return (\r\n        <PageVisibility onChange={() => visibilityChange()}>\r\n        <>\r\n            {!quizReviewModal && questions.length == 0 && (<h5 className=\"text-center mt-3 mb-3\">Đang tải câu hỏi</h5>)}\r\n            {!quizReviewModal && questions.length != 0 && (\r\n                <Container className=\"mt-3 mb-3 quiz-container\">\r\n                    <h2 className=\"text-center\">{quizInfo.quiz_title}</h2>\r\n                    <p className=\"text-center m-1\">Tạo bởi: {quizInfo.creator}</p>\r\n                    <div className=\"info-block\">\r\n                        <Row className=\"text-left\">\r\n                            <p className=\"info\">Điểm: {point}</p>\r\n                            <p className=\"info\">Thời gian: {timeCountDown}</p>\r\n                        </Row>\r\n                    </div>\r\n                    {currentQuest !== 0 && <h5 className=\"text-center\">\r\n                        Câu hỏi: {currentQuest}/{questions.length}\r\n                    </h5>}\r\n                    {/* <div className=\"progress mb-2\">\r\n                        <ProgressBar \r\n                            variant=\"info\"\r\n                            striped \r\n                            now={progressBarWidth}\r\n                            style={{width: '100%'}}\r\n                        ></ProgressBar>\r\n                        \r\n                    </div> */}\r\n                    <div className=\"text-center\">\r\n                        \r\n                    </div>\r\n                    {currentQuest == 0 && (\r\n                        <div className=\"text-center\">\r\n                            <Button onClick={() => setCurrentQuest(1)} variant=\"info\" className=\"btn-rounded text-white text-center\">Bắt đầu</Button>\r\n                        </div>\r\n                    )}\r\n                    {currentQuest != 0 && \r\n                        <>\r\n                        {!acceptingAnswers[currentQuest - 1] && \r\n                            <div className=\"mt-1 mb-1 text-center\">\r\n                                <p className=\"error\">Câu hỏi phạm vi. Câu trả lời sẽ không được tính</p>\r\n                            </div>\r\n                        }\r\n                        <div className=\"question-content-box d-flex justify-content-center align-items-center\">\r\n                            <h5 className=\"txt-quest\">{questions[currentQuest - 1].question_content}</h5>\r\n                        </div>\r\n                        {questions[currentQuest - 1].media != \"\" && <div className=\"text-center mt-2\">\r\n                            <img className=\"img-quest\" src={questions[currentQuest - 1].media}></img>\r\n                        </div>}\r\n                        {questions[currentQuest - 1].question_type == 1 && \r\n                        <div>\r\n                            {\r\n                                \r\n                                !quizTime && \r\n                                (<Form.Control value={currentAnswerField} disabled={answerFieldClass} type=\"text\" className=\"mt-2\" placeholder=\"Câu trả lời\" onKeyPress={(e) => checkAnswerText(e)} onChange={(e) => handleBoxChange(e)}>\r\n                                </Form.Control>)\r\n                            }\r\n                            {\r\n                                quizTime && (\r\n                                    <Form.Control value={answerBoxContent} disabled={answerFieldClass} type=\"text\" className=\"mt-2\" placeholder=\"Câu trả lời\" onKeyPress={(e) => checkAnswerText(e)} onChange={(e) => handleBoxChange(e)}>\r\n                                    </Form.Control>\r\n                                )\r\n                            }\r\n                        </div>}\r\n                        {questions[currentQuest - 1].question_type == 0 && \r\n                            <Row className=\"mt-2\">\r\n                                {\r\n                                    currentAnswersSet.map((answer, i) => {\r\n                                        let chosen = !quizTime && answers[currentQuest - 1] == answer.id? \"answer-content text-center chosen\": \"answer-content text-center\";\r\n                                        if (quizTime && answered) {\r\n                                            if (answer.is_correct == 1)\r\n                                                chosen = \"answer-content text-center correct\"\r\n                                            else \r\n                                                chosen = \"answer-content text-center wrong\"\r\n                                        }\r\n                                        return (\r\n                                            <Col lg={6} md={6} sm={12} className=\"p-1 answer\">\r\n                                                <div className={chosen} onClick={() => checkAnswerMCQ(answer.id)}>\r\n                                                    {answer.media != \"\" && <div><img className=\"img-answer\" src={answer.media}></img></div>}\r\n                                                    <p className=\"mt-1 mb-0\">{Buffer(answer.answer_content, \"base64\").toString(\"utf-8\")}</p>\r\n                                                </div>\r\n                                            </Col>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </Row>\r\n                        }\r\n                        {\r\n                            quizTime && answered && (\r\n                                <div className=\"text-center mt-1\">\r\n                                    {\r\n                                        questions[currentQuest - 1].answers.length == 1 && (\r\n                                            <h5>Đáp án: {answerDisplay}</h5>\r\n                                        )\r\n                                    }\r\n                                    <h5>{Buffer(questions[currentQuest - 1].explanation, \"base64\").toString(\"utf-8\")}</h5>\r\n                                </div>\r\n                            )\r\n                        }\r\n                        </>\r\n                    }\r\n                </Container>\r\n            )}\r\n            {!quizReviewModal && !quizTime && currentQuest != 0 && (\r\n                <>\r\n                {!answered && (\r\n                    <div className=\"text-center\">\r\n                    {currentQuest != 1 && (<Button onClick={() => lastQuest()} variant=\"info\" className=\"btn-rounded text-white text-center btn-mr\" style={{marginRight: \"5px\"}}>Trước</Button>)}\r\n                    {currentQuest != questions.length && (<Button onClick={() => nextQuest()} variant=\"info\" className=\"btn-rounded text-white text-center ml-1\">Tiếp</Button>)}\r\n                    </div>\r\n                )}\r\n                <div className=\"text-center mt-2 complete-block\">\r\n                    <Button onClick={() => finish(0)} variant=\"success\" className=\"btn-rounded text-white text-center\">Hoàn thành</Button>\r\n                </div>\r\n                </>\r\n            )}\r\n            {\r\n                !quizReviewModal && quizTime && currentQuest != 0 && currentQuest != answers.length && answered && (\r\n                    <div className=\"text-center\">\r\n                        <Button onClick={() => nextQuest()} variant=\"info\" className=\"btn-rounded text-white text-center\">Tiếp</Button>\r\n                    </div>\r\n                )\r\n            }\r\n            {\r\n                !quizReviewModal && quizTime && answered && currentQuest != 0 && currentQuest == answers.length && (\r\n                    <div className=\"text-center mt-2 complete-block\">\r\n                        <Button onClick={() => finish(1)} variant=\"success\" className=\"btn-rounded text-white text-center\">Hoàn thành</Button>\r\n                    </div>\r\n                )\r\n            }\r\n\r\n            {\r\n                quizReviewModal && <><QuizReview\r\n                    show={quizReviewModalShow}\r\n                    onHide={() => setQuizReviewModalShow(false)}\r\n                    reviewContent={answersOld}\r\n                    questions={questions}\r\n                    quizInfo={quizInfo}\r\n                    \r\n                >\r\n\r\n                </QuizReview>\r\n                <div className=\"mt-3 text-center mb-3\">\r\n                    <Button variant=\"info\" className=\"text-white\" onClick={() => setDirectToHome(true)}>Kết thúc</Button>\r\n                </div>\r\n                </>\r\n            }\r\n\r\n            {\r\n                directToHome && <Redirect to=\"/home\"></Redirect>\r\n            }\r\n        </>\r\n        </PageVisibility>\r\n    )\r\n}\r\n\r\nexport default QuizMain\r\n","export default __webpack_public_path__ + \"static/media/right.10e31de5.mp3\";","export default __webpack_public_path__ + \"static/media/wrong.81c658c9.mp3\";","export default __webpack_public_path__ + \"static/media/invalid.90d4cd90.mp3\";","export default __webpack_public_path__ + \"static/media/time.439a4720.wav\";","import axios from \"axios\";\r\n\r\nexport const loginCall = async (userCredentials, dispatch) => {\r\n    dispatch({type: \"LOGIN_START\"});\r\n    try {\r\n        const res = await axios.post(\"https://online-quiz-system-server.herokuapp.com/api/auth/login\", userCredentials);\r\n        dispatch({type: \"LOGIN_SUCCESS\", payload: res.data});\r\n    } catch (err) {\r\n        dispatch({type: \"LOGIN_FAILURE\", payload: err});\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/ncn.48d8e610.png\";","export default __webpack_public_path__ + \"static/media/cover.7cb09466.png\";","import React from 'react';\r\nimport {useState, useRef, useContext, useEffect} from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\"\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Dialog, DialogTitle, DialogContent, makeStyles } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport \"./auth.css\";\r\nimport axios from \"axios\";\r\nimport {loginCall} from \"../../apiCalls\";\r\nimport {AuthContext} from \"../../context/AuthContext\";\r\nimport Logo from \"./../../assets/images/ncn.png\";\r\nimport Cover from \"./../../assets/images/cover.png\";\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            {'Copyright © '}\r\n            <Link color=\"inherit\" href=\"https://nhannc.site/\">\r\n            Nguyen Cao Nhan\r\n            </Link>{' '}\r\n            {new Date().getFullYear()}\r\n            {'.'}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100vh',\r\n    },\r\n    image: {\r\n        backgroundImage: `url(${Cover})`,\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundColor:\r\n        theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\r\n        backgroundSize: 'cover',\r\n        backgroundPosition: 'center',\r\n    },\r\n    paper: {\r\n        margin: theme.spacing(8, 4),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    dialogWrapper: {\r\n        padding: theme.spacing(2),\r\n        position: 'absolute',\r\n        top: theme.spacing(5)\r\n    },\r\n    dialogTitle: {\r\n        paddingRight: '0px'\r\n    }\r\n}));\r\n\r\nexport default function Auth() {\r\n    const classes = useStyles();\r\n    const [openPopup, setOpenPopup ] = React.useState(false);\r\n    const [loginError, setLoginError] = React.useState(\"\");\r\n    const [registerError, setRegisterError] = React.useState(\"\");\r\n    const [sentLogin, setSentLogin] = useState(false);\r\n    const {dispatch} = useContext(AuthContext);\r\n    const {isFetching} = useContext(AuthContext);\r\n    const {user} = useContext(AuthContext);\r\n    \r\n    //Login refs\r\n    const username = useRef();\r\n    const password = useRef();\r\n    \r\n    //Register refs\r\n    const usernameCreate = useRef();\r\n    const fullnameCreate = useRef();\r\n    const passwordCreate = useRef();\r\n    const passwordConfirm = useRef();\r\n\r\n    const handleLogin = async(e) => {\r\n        e.preventDefault();\r\n        loginCall({username: username.current.value, password: password.current.value}, dispatch);\r\n        setSentLogin(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!isFetching && sentLogin && (user === null)) {\r\n            setLoginError(\"Thông tin đăng nhập không đúng\")\r\n        } else if (user !== null || !sentLogin) {\r\n            setLoginError(\"\");\r\n        }\r\n    }, [isFetching])\r\n\r\n    const handleRegister = async(e) => {\r\n        e.preventDefault();\r\n        if (passwordConfirm.current.value !== passwordCreate.current.value) {\r\n            setRegisterError(\"Xác nhận mật khẩu không đúng\");\r\n        } else {\r\n            const user = {\r\n                username: usernameCreate.current.value,\r\n                fullname: fullnameCreate.current.value,\r\n                password: passwordCreate.current.value\r\n            }\r\n            try {\r\n                await axios.post(\"https://online-quiz-system-server.herokuapp.com/api/auth/register\", user);\r\n                //Perform login\r\n                loginCall({username: usernameCreate.current.value, password: passwordCreate.current.value}, dispatch);\r\n            } catch (err) {\r\n                console.log(err);\r\n                setRegisterError(\"Có lỗi xảy ra, vui lòng thử lại sau!\");\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container component=\"main\" className={classes.root}>\r\n                <CssBaseline />\r\n                <Grid item xs={false} sm={6} md={7} className={classes.image} />\r\n                <Grid item xs={12} sm={6} md={5} component={Paper} elevation={12} square style={{display: \"flex\", alignItems: \"center\"}}>\r\n                    <div className={classes.paper} style={{width: \"100%\"}}>\r\n                        <div className=\"text-center logo-container\">\r\n                            <img src={Logo}>\r\n                            </img>\r\n                        </div>\r\n                        <Typography component=\"h1\" variant=\"h5\">\r\n                            Đăng nhập\r\n                        </Typography>\r\n                        <form onSubmit={handleLogin} className={classes.form}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"username\"\r\n                                label=\"Tên đăng nhập\"\r\n                                name=\"username\"\r\n                                autoFocus\r\n                                inputRef={username}\r\n                            />\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"password\"\r\n                                label=\"Mật khẩu\"\r\n                                name=\"password\"\r\n                                type=\"password\"\r\n                                inputRef={password}\r\n                            />\r\n                            <p style={{margin: 0, padding: 0, color: \"red\", fontStyle: \"italic\", textAlign: \"center\"}}>{loginError}</p>\r\n                            <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                            >\r\n                            Đăng nhập\r\n                            </Button>\r\n                            <Grid container>\r\n                            <Grid item xs>\r\n                                <Link href=\"#\" variant=\"body2\" style={{display: \"none\"}}>\r\n                                    Quên mật khẩu?\r\n                                </Link>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Link href=\"#\" onClick={() => setOpenPopup(true)}>\r\n                                    Tạo tài khoản\r\n                                </Link>\r\n                            </Grid>\r\n                            </Grid>\r\n                            <Box mt={5}>\r\n                            <Copyright />\r\n                            </Box>\r\n                        </form>\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n            <Dialog open={openPopup} maxWidth=\"sm\" fullWidth=\"true\" classes={{ paper: classes.dialogWrapper }}>\r\n                <DialogTitle className={classes.dialogTitle}>\r\n                    <div style={{ display: 'flex' }}>\r\n                        <Typography variant=\"h6\" component=\"div\" style={{ flexGrow: 1 }}>\r\n                            Đăng ký\r\n                        </Typography>\r\n                        <Button\r\n                            color=\"primary\"\r\n                            onClick={()=>{setOpenPopup(false)}}>\r\n                            <CloseIcon />\r\n                        </Button>\r\n                    </div>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <form onSubmit={handleRegister} className={classes.form}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"username-create\"\r\n                            label=\"Tên đăng nhập\"\r\n                            name=\"username-create\"\r\n                            inputProps={{ minLength: 6 }}\r\n                            inputRef={usernameCreate}\r\n                        />\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"fullname\"\r\n                            label=\"Tên đầy đủ\"\r\n                            name=\"fullname\"\r\n                            type=\"text\"\r\n                            inputRef={fullnameCreate}\r\n                        />\r\n                        <Grid container>\r\n                            <Grid item md={6} xs={12} className=\"leftSubGrid\">\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"password-create\"\r\n                                    label=\"Mật khẩu\"\r\n                                    name=\"password-create\"\r\n                                    type=\"password\"\r\n                                    inputProps={{ minLength: 6 }}\r\n                                    inputRef={passwordCreate}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={6} xs={12} className=\"rightSubGrid\">\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"password-confirm\"\r\n                                    label=\"Xác nhận mật khẩu\"\r\n                                    name=\"password-confirm\"\r\n                                    type=\"password\"\r\n                                    inputRef={passwordConfirm}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <p style={{margin: 0, padding: 0, color: \"red\", fontStyle: \"italic\"}}>{registerError}</p>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            className={classes.submit}>\r\n                                Đăng ký tài khoản\r\n                        </Button>\r\n                    </form>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/quiz1.da2c8610.png\";","export default __webpack_public_path__ + \"static/media/quiz2.7f3c423f.png\";","export default __webpack_public_path__ + \"static/media/quiz3.58f96999.png\";","import \"./home.css\";\r\nimport {React, useState, useEffect, useContext} from 'react';\r\nimport axios from \"axios\";\r\nimport {AuthContext} from \"../../context/AuthContext\";\r\nimport {Row, Col, Container, Card, Button, Modal, Form, Nav} from \"react-bootstrap\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PlayCircleFilled, Dashboard} from \"@material-ui/icons\";\r\n\r\n//Load quiz thumbnails\r\nimport Thumnail1 from \"./../../assets/images/quiz1.png\";\r\nimport Thumnail2 from \"./../../assets/images/quiz2.png\";\r\nimport Thumnail3 from \"./../../assets/images/quiz3.png\";\r\n\r\nexport default function Home() {\r\n    const {user} = useContext(AuthContext);\r\n    const [mode, setMode] = useState(0);\r\n    const [publicQuizzes, setPublicQuizzes] = useState([]);\r\n    const [quizChosen, setQuizChosen] = useState(false);\r\n    const [quizID, setQuizID] = useState(-1);\r\n    const [quizPass, setQuizPass] = useState(\"\");\r\n    const [quizValid, setQuizValid] = useState(false);\r\n    const [error, setError] = useState(\"\");\r\n    const [modalShowing, setModalShowing] = useState(false);\r\n    const [passwordModalShowing, setPasswordModalShowing] = useState(false);\r\n    const [dashboardQuizID, setDashboardQuizID] = useState(-1);\r\n\r\n    const getQuizzes = async() => {\r\n        let listOfQuizzes = await axios.get(\"https://online-quiz-system-server.herokuapp.com/api/quiz/public\");\r\n        listOfQuizzes = JSON.parse(listOfQuizzes.request.response);\r\n        setPublicQuizzes(listOfQuizzes);\r\n    }\r\n\r\n    const renderRedirect = () => {\r\n        return <Redirect\r\n            to={{\r\n                pathname: '/join',\r\n                state: {\r\n                    id: quizID,\r\n                    pass: quizPass\r\n                }\r\n            }}\r\n        />\r\n    }\r\n    \r\n    const joinQuiz = async(quizID, quizPass) => {\r\n        setQuizPass(quizPass);\r\n        setQuizChosen(true);\r\n\r\n        if (quizID === -2) {\r\n            setPasswordModalShowing(false);\r\n        }\r\n\r\n        //Validate pass\r\n        const info = {\r\n            id: quizID,\r\n            pass: quizPass,\r\n            user_id: user.id\r\n        }\r\n        await axios.post(`https://online-quiz-system-server.herokuapp.com/api/quiz/join_check`, info)\r\n        .then(res => {\r\n            setQuizID(parseInt(res.data))\r\n        })\r\n        .catch(err => {\r\n            if (err.response.status === 404) {\r\n                //Wrong password\r\n                setError(\"Mật mã trận không đúng\");\r\n                setModalShowing(true);\r\n                return;\r\n            } else if (err.response.status === 500) {\r\n                setError(\"Đã xảy ra lỗi. Vui lòng thử lại.\");\r\n                setModalShowing(true);\r\n                return;\r\n            } else if (err.response.status === 403) {\r\n                console.log(err.response.data);\r\n                if (err.response.data == 0) {\r\n                    setError(\"Bạn đã tham gia quiz này!\");\r\n                    setModalShowing(true);\r\n                } else {\r\n                    checkAttempts(err.response.data);\r\n                }\r\n                return;\r\n            }\r\n        }   \r\n        );\r\n    }\r\n\r\n    useEffect(() => {\r\n        getQuizzes();    \r\n    }, [])\r\n\r\n    const checkAttempts = (quiz_id) => {\r\n        setDashboardQuizID(quiz_id);\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <Container className=\"mt-3 mb-3 quiz-list\">\r\n                <div>\r\n                    <h1 className=\"text-center\">Danh sách Quiz</h1>\r\n                </div>\r\n                <Nav variant=\"tabs\" defaultActiveKey=\"/home\">\r\n                    <Nav.Item>\r\n                        <Nav.Link active>Công khai</Nav.Link>\r\n                    </Nav.Item>\r\n                    <Nav.Item>\r\n                        <Nav.Link onClick={() => setPasswordModalShowing(true)}>Riêng tư</Nav.Link>\r\n                    </Nav.Item>\r\n                </Nav>\r\n                <Row className=\"mt-2 mb-2\">\r\n                    {\r\n                        /* Show public quizzes */\r\n                        publicQuizzes.map((quiz, index) => {\r\n                            //Check time\r\n                            let time = \"\";\r\n                            if (quiz.quiz_time && quiz.quiz_time != 0) {\r\n                                if (quiz.quiz_time >= 3600) {\r\n                                    let hours = parseInt(quiz.quiz_time / 3600);\r\n                                    let minutes = parseInt((quiz.quiz_time - 3600 * hours) / 60);\r\n                                    let seconds = quiz.quiz_time - 3600 * hours - 60 * minutes;\r\n                                    time = `${hours} giờ`;\r\n                                    if (minutes > 0)\r\n                                        time += ` ${minutes} phút`;\r\n                                    if (seconds > 0)\r\n                                        time += ` ${seconds} giây`;\r\n                                } else if (quiz.quiz_time >= 60) {\r\n                                    let minutes = parseInt(quiz.quiz_time  / 60);\r\n                                    let seconds = quiz.quiz_time - 60 * minutes;\r\n                                    time = `${minutes} phút`;\r\n                                    if (seconds > 0)\r\n                                        time += ` ${seconds} giây`;\r\n                                } else {\r\n                                    time = (quiz.quiz_time).toString() + \" giây\";\r\n                                }\r\n                            }\r\n                            let image = index % 3 === 0? Thumnail1 : index % 3 === 1 ? Thumnail2 : Thumnail3;\r\n                            return (\r\n                                <Col className=\"quiz-choose-box pl-3 pr-3 pt-2 pb-2\" lg={4} sm={6} md={6} xs={12}>\r\n                                    <Card style={{ width: 'auto' }}>\r\n                                    <Card.Img variant=\"top\" src={image}/>\r\n                                    <Card.Body>\r\n                                        <Card.Title className=\"text-center\"><b>{quiz.quiz_title}</b></Card.Title>\r\n                                        <Card.Text className=\"quiz-info\">\r\n                                            Tạo bởi: {quiz.fullname} <br></br>\r\n                                            Số câu hỏi: {quiz.number_of_quests} <br/>\r\n                                            {quiz.quiz_time && <p>Thời gian: {time}</p>}\r\n                                            {!quiz.quiz_time && <p>Thời gian: theo câu</p>}\r\n                                        </Card.Text>\r\n                                        {quiz.quiz_creator !== user.id && \r\n                                            <div className=\"text-end\">\r\n                                                <Button \r\n                                                    variant=\"info\" \r\n                                                    className=\"text-white btn-rounded\" \r\n                                                    onClick={() => joinQuiz(quiz.id, \"\")}>\r\n                                                        <PlayCircleFilled></PlayCircleFilled> Tham gia\r\n                                                </Button>\r\n                                            </div>\r\n                                        }\r\n                                        {quiz.quiz_creator === user.id && \r\n                                            <div className=\"text-end\">\r\n                                                <Button \r\n                                                    variant=\"warning\" \r\n                                                    className=\"text-white btn-rounded\" \r\n                                                    onClick={() => checkAttempts(quiz.id)}>\r\n                                                        <Dashboard></Dashboard> Xem kết quả\r\n                                                </Button>\r\n                                            </div>\r\n                                        }\r\n                                    </Card.Body>\r\n                                    </Card>\r\n                                </Col>\r\n                            )\r\n                        })\r\n                    }\r\n                </Row>\r\n            </Container>     \r\n            {quizID !== -1 && renderRedirect()} \r\n            {dashboardQuizID !== -1 && <Redirect\r\n            to={{\r\n                pathname: '/dashboard',\r\n                state: {\r\n                    id: dashboardQuizID,\r\n                }\r\n            }}\r\n            />} \r\n            {\r\n                (modalShowing || passwordModalShowing) && (<Modal\r\n                    size=\"lg\"\r\n                    aria-labelledby=\"contained-modal-title-vcenter\"\r\n                    centered\r\n                    show={modalShowing || passwordModalShowing}\r\n                    >\r\n                    <Modal.Header>  \r\n                        <h5>{modalShowing && \"Lỗi\"}\r\n                        {passwordModalShowing && \"Nhập mã trận\"}</h5>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        {modalShowing && error}\r\n                        {passwordModalShowing && <Form.Control value={quizPass} required type=\"text\" className=\"mt-2\" placeholder=\"Mã trận\" onChange={(e) => setQuizPass(e.target.value)}>\r\n                        </Form.Control>}\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        {modalShowing && <Button onClick={() => setModalShowing(false)}>Đóng</Button>}\r\n                        {passwordModalShowing && (\r\n                        <>\r\n                            <Button variant=\"danger\" className=\"btn-rounded\" onClick={() => setPasswordModalShowing(false)}>Đóng</Button>\r\n                            <Button variant=\"success\" className=\"btn-rounded\" onClick={() => joinQuiz(-2, quizPass)}>Xác nhận</Button>\r\n                        </>\r\n                        )}\r\n                    </Modal.Footer>\r\n                </Modal>)\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import \"./quiz-attempts.css\";\r\nimport {React, useState, useEffect, useContext} from 'react'\r\nimport axios from \"axios\";\r\nimport {AuthContext} from \"../../context/AuthContext\";\r\nimport {Row, Col, Container, Button, Form, Table, Pagination} from \"react-bootstrap\";\r\nimport QuizReview from \"./../../components/quiz-review/QuizReview\";\r\n  \r\nfunction QuizAttempts(props) {\r\n    const {user} = useContext(AuthContext);\r\n    const [quizInfo, setQuizInfo] = useState([]);\r\n    const [recordsContent, setRecordsContent] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [currentShowing, setCurrentShowing] = useState([]);\r\n    const [currentShowPerPage, setCurrentShowPerPage] = useState(20);\r\n    const [pageRange, setPageRange] = useState([]);\r\n    const [startEndIndex, setStartEndIndex] = useState([]);\r\n    const [currentCriteria, setCurrentCriteria] = useState(\"5\");\r\n    const [currentSortAsc, setCurrentSortAsc] = useState(\"desc\");\r\n    const [quizReviewReady, setQuizReviewReady] = useState(false);\r\n    const [questions, setQuestions] = useState([]);\r\n    const [details, setDetails] = useState([]);\r\n    const [selectionName, setSelectionName] = useState(\"\");\r\n      \r\n    const initializeTable = (dataLength) => {\r\n        let maxPage = dataLength % currentShowPerPage === 0 ? parseInt(dataLength / currentShowPerPage) : parseInt(dataLength / currentShowPerPage) + 1;\r\n        let buildPageRange = [];\r\n        for (let i = 1; i <= maxPage; i++) {\r\n            buildPageRange.push(i);\r\n        } \r\n        setPageRange(buildPageRange)\r\n        setStartEndIndex([dataLength > 0? 1 : 0, Math.min(currentShowPerPage, dataLength)])\r\n    }\r\n\r\n    const changePage = (pageNumber) => {\r\n        let start = (pageNumber - 1) * currentShowPerPage + 1;\r\n        let end = Math.min(pageNumber * currentShowPerPage, recordsContent.length);\r\n        setCurrentPage(pageNumber);\r\n        setStartEndIndex([start, end]);\r\n        let getArray = recordsContent;\r\n        let getSubArray = getArray.slice(start - 1, end);\r\n        setCurrentShowing(getSubArray);\r\n    }\r\n\r\n    const sortRecord = (array, criteria, isAscending) => {\r\n        let criteriaString = \"\";\r\n        switch (criteria) {\r\n            case 0: //ID\r\n                criteriaString = \"board_id\";\r\n                break;\r\n            case 1: //Name\r\n                criteriaString = \"candidate_name\";\r\n                break;\r\n            case 2: //Time\r\n                criteriaString = \"time\";\r\n                break;\r\n            case 3: //Point\r\n                criteriaString = \"point\";\r\n                break;\r\n            case 4: //Correct\r\n                criteriaString = \"correct\";\r\n                break;\r\n            case 5: //Timestamp\r\n                criteriaString = \"date_created\";\r\n                break;  \r\n        }\r\n        if (criteria !== 5) {\r\n            if (isAscending) {\r\n                array.sort((a,b) => (a[criteriaString] > b[criteriaString]) ? 1 : ((b[criteriaString] > a[criteriaString]) ? -1 : 0))\r\n            } else {\r\n                array.sort((a,b) => (a[criteriaString] < b[criteriaString]) ? 1 : ((b[criteriaString] < a[criteriaString]) ? -1 : 0))\r\n            }\r\n        } else {\r\n            if (isAscending) {\r\n                array.sort((a,b) => (Date.parse(a[\"date_created\"]) > Date.parse(b[\"date_created\"])) ? 1 : ((Date.parse(b[\"date_created\"]) > Date.parse(a[\"date_created\"])) ? -1 : 0))\r\n            } else {\r\n                array.sort((a,b) => (Date.parse(a[\"date_created\"]) < Date.parse(b[\"date_created\"])) ? 1 : ((Date.parse(b[\"date_created\"]) < Date.parse(a[\"date_created\"])) ? -1 : 0))\r\n            }\r\n        }\r\n        return array;\r\n    }\r\n\r\n    const formatTime = (timeInSeconds) => {\r\n        if (!timeInSeconds)\r\n            return \"\";\r\n        let time = \"\";\r\n        if (timeInSeconds >= 3600) {\r\n            let hours = parseInt(timeInSeconds / 3600);\r\n            let minutes = parseInt((timeInSeconds - 3600 * hours) / 60);\r\n            let seconds = timeInSeconds - 3600 * hours - 60 * minutes;\r\n            time = `${hours} giờ`;\r\n            if (minutes > 0)\r\n                time += ` ${minutes} phút`;\r\n            if (seconds > 0)\r\n                time += ` ${seconds} giây`;\r\n        } else if (timeInSeconds >= 60) {\r\n            let minutes = parseInt(timeInSeconds / 60);\r\n            let seconds = timeInSeconds - 60 * minutes;\r\n            time = `${minutes} phút`;\r\n            if (seconds > 0)\r\n                time += ` ${seconds} giây`;\r\n        } else {\r\n            time = (timeInSeconds).toString() + \" giây\";\r\n        }\r\n        return time;\r\n    }\r\n\r\n    Number.prototype.pad = function(size) {\r\n        var s = String(this);\r\n        while (s.length < (size || 2)) {s = \"0\" + s;}\r\n        return s;\r\n    }\r\n\r\n    const formatDate = (d) => {\r\n        return `${d.getDate().pad(2)}/${(d.getMonth()+ 1).pad(2)}/${d.getFullYear()} ${d.getHours().pad(2)}:${d.getMinutes().pad(2)}:${d.getSeconds().pad(2)}`\r\n    }\r\n\r\n    const getInfo = async() => {\r\n        await axios.get(`https://online-quiz-system-server.herokuapp.com/api/quiz/info/${props.location.state.id}`)\r\n        .then(async(res) => {\r\n            let thisQuizInfo = res.data;\r\n            setQuizInfo(thisQuizInfo[0]);\r\n    \r\n            await axios.post(`https://online-quiz-system-server.herokuapp.com/api/quiz/get_attempts`, {\r\n                quiz_id: props.location.state.id,\r\n                user_id: user.id,\r\n            })\r\n            .then(res1 => {\r\n                res1.data = sortRecord(res1.data, 5, false);\r\n                for (let i = 0; i < res1.data.length; i++) {\r\n                    Object.assign(res1.data[i], {\"board_id\": i + 1});\r\n                }\r\n                setRecordsContent(res1.data);\r\n                initializeTable(res1.data.length);\r\n\r\n                let getSubArray = res1.data;\r\n                getSubArray = res1.data.slice(0, Math.min(currentShowPerPage, res1.data.length));\r\n                setCurrentShowing(getSubArray);\r\n            })\r\n            .catch(err1 => {\r\n                console.log(err1);\r\n            });\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n       \r\n        \r\n    }\r\n\r\n    const viewDetail = async(user, quiz, name) => {\r\n        await axios.post(\"https://online-quiz-system-server.herokuapp.com/api/quiz/attempt_detail\", {\r\n            user_id: user,\r\n            quiz_id: quiz\r\n        })\r\n        .then(res => {\r\n            let result = res.data;\r\n            let getDetails = result.slice(0, result.length / 2);\r\n            let getQuestions = result.slice(result.length / 2, result.length);\r\n            for (let i = 0; i < getQuestions.length; i++) {\r\n                if (getQuestions[i].question_type === 0) {\r\n                    getDetails[i].answer = parseInt(getDetails[i].answer);\r\n                }\r\n            }\r\n            setSelectionName(name);\r\n            setDetails(getDetails);\r\n            setQuestions(getQuestions);\r\n        })\r\n        .catch(err => {\r\n\r\n        })\r\n    }\r\n\r\n    const changeCriteria = (mode, value) => {\r\n        if (mode === 0) {\r\n            let getTmpData = recordsContent;\r\n            getTmpData = sortRecord(getTmpData, parseInt(value), currentSortAsc === \"asc\");\r\n            setRecordsContent(getTmpData);\r\n            let getSubArray = getTmpData;\r\n            getSubArray = getTmpData.slice(0, Math.min(currentShowPerPage, getTmpData.length));\r\n            setCurrentShowing(getSubArray);\r\n            setCurrentCriteria(value);\r\n        } else {\r\n            let getTmpData = recordsContent;\r\n            getTmpData = sortRecord(getTmpData, parseInt(currentCriteria), value === \"asc\");\r\n            setRecordsContent(getTmpData);\r\n            let getSubArray = getTmpData;\r\n            getSubArray = getTmpData.slice(0, Math.min(currentShowPerPage, getTmpData.length));\r\n            setCurrentShowing(getSubArray);\r\n            setCurrentSortAsc(value);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        let dataLength = recordsContent.length;\r\n        let maxPage = dataLength % currentShowPerPage === 0 ? parseInt(dataLength / currentShowPerPage) : parseInt(dataLength / currentShowPerPage) + 1;\r\n        let buildPageRange = [];\r\n        for (let i = 1; i <= maxPage; i++) {\r\n            buildPageRange.push(i);\r\n        } \r\n        setPageRange(buildPageRange)\r\n        setStartEndIndex([dataLength > 0? 1 : 0, Math.min(currentShowPerPage, dataLength)])\r\n    }, [currentShowPerPage])\r\n\r\n    useEffect(() => {\r\n        changePage(1);\r\n    }, [recordsContent])\r\n\r\n    useEffect(() => {\r\n        if (quizInfo.length === 0) {\r\n            getInfo();\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (details.length !== 0 && questions.length !== 0 && details.length === questions.length) {\r\n            setQuizReviewReady(true);\r\n        }\r\n    }, [details, questions])\r\n\r\n    return (\r\n        <Container className=\"mt-3 mb-3\">\r\n            {!quizReviewReady && quizInfo.length !== 0 &&\r\n            <>\r\n            <h1 className=\"text-center\">{quizInfo.quiz_title}</h1>\r\n            <h3 className=\"text-center\">Tạo bởi: {quizInfo.creator}</h3>\r\n            <h5 className=\"text-center\">Bảng kết quả</h5>\r\n            <Row className=\"mb-2\">\r\n                <Col lg={3} md={6} sm={12}>\r\n                    <Form.Group>\r\n                        <Form.Label>Sắp xếp theo</Form.Label>\r\n                        <Form.Control inline as=\"select\" onChange={(e) => changeCriteria(0, e.target.value)} value={currentCriteria}>\r\n                            <option value=\"0\">#</option>\r\n                            <option value=\"1\">Tên</option>\r\n                            <option value=\"2\">Thời gian làm bài</option>\r\n                            <option value=\"3\">Điểm</option>\r\n                            <option value=\"4\">Số câu đúng</option>\r\n                            <option value=\"5\">Dấu thời gian</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                </Col>\r\n                <Col lg={3} md={6} sm={12}>\r\n                    <Form.Group>\r\n                        <Form.Label style={{opacity: 0}}> a</Form.Label>\r\n                        <Form.Control inline as=\"select\" onChange={(e) => changeCriteria(1, e.target.value)} value={currentSortAsc}>\r\n                            <option value=\"asc\">Tăng dần</option>\r\n                            <option value=\"desc\">Giảm dần</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                </Col>\r\n            </Row>\r\n            <Table \r\n                responsive\r\n                bordered\r\n                striped\r\n                hover\r\n                variant=\"light\"\r\n            >\r\n                <thead>\r\n                    <tr>\r\n                        <th className=\"text-center\">#</th>\r\n                        <th className=\"text-center\">Tên</th>\r\n                        <th className=\"text-center\">Thời gian làm bài</th>\r\n                        <th className=\"text-center\">Điểm</th>\r\n                        <th className=\"text-center\">Số câu đúng</th>\r\n                        <th className=\"text-center\">Dấu thời gian</th>\r\n                        <th className=\"text-center\">Xem chi tiết</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        currentShowing.map((record, i) => {\r\n                            return (\r\n                                <tr key={i}>\r\n                                    <td>{record.board_id}</td>\r\n                                    <td>{record.candidate_name}</td>\r\n                                    <td>{formatTime(record.time)}</td>\r\n                                    <td>{record.point}</td>\r\n                                    <td>{record.correct}</td>\r\n                                    <td>{formatDate(new Date(record.date_created))}</td>\r\n                                    <td className=\"text-center\">\r\n                                        <Button \r\n                                            variant=\"info\" \r\n                                            className=\"btn-sm text-white\"\r\n                                            onClick={() => {viewDetail(record.user_id, props.location.state.id, record.candidate_name)}}\r\n                                        >Chi tiết</Button>\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        })\r\n                    }\r\n                    {/* <tr>\r\n                    <td>1</td>\r\n                    {Array.from({ length: 6 }).map((_, index) => (\r\n                        <td key={index}>Table cell {index}</td>\r\n                    ))}\r\n                    </tr> */}\r\n                    \r\n                </tbody>\r\n            </Table>\r\n            <div className=\"d-flex justify-content-between\">\r\n                <div>\r\n                    <p>Hiển thị kết quả {startEndIndex[0]} - {startEndIndex[1]} trên tổng số {recordsContent.length} kết quả</p>\r\n                    <Pagination>\r\n                        { \r\n                            currentPage !== 1 && \r\n                            <>\r\n                            <Pagination.Item\r\n                                onClick={() => changePage(1)}\r\n                            >{\"«\"}</Pagination.Item>\r\n                            <Pagination.Item\r\n                                onClick={() => changePage(currentPage - 1)}\r\n                            >{\"‹\"}</Pagination.Item>\r\n                            </>\r\n                        }\r\n                        { \r\n                            currentPage === 1 && \r\n                            <>\r\n                            <Pagination.Item disabled>{\"«\"}</Pagination.Item>\r\n                            <Pagination.Item disabled>{\"‹\"}</Pagination.Item>\r\n                            </>\r\n                        }\r\n                        {\r\n                            pageRange.map((pageNumber) => {\r\n                                let activeClass = pageNumber === currentPage;\r\n                                if (activeClass) {\r\n                                    return (\r\n                                        <Pagination.Item \r\n                                            key={pageNumber} \r\n                                            onClick={() => changePage(pageNumber)} \r\n                                            active \r\n                                            activeLabel=\"\">{pageNumber}</Pagination.Item>    \r\n                                    )\r\n                                } else {\r\n                                    return (\r\n                                        <Pagination.Item \r\n                                            key={pageNumber}\r\n                                            onClick={() => changePage(pageNumber)}>{pageNumber}</Pagination.Item>    \r\n                                    )\r\n                                }\r\n                            })\r\n                        }\r\n                        { \r\n                            currentPage !== pageRange[pageRange.length - 1] && \r\n                            <>\r\n                            <Pagination.Item\r\n                                onClick={() => changePage(currentPage + 1)}\r\n                            >{\"›\"}</Pagination.Item>\r\n                            <Pagination.Item\r\n                                onClick={() => changePage(pageRange[pageRange.length - 1])}\r\n                            >{\"»\"}</Pagination.Item>\r\n                            </>\r\n                        }\r\n                        { \r\n                            currentPage === pageRange[pageRange.length - 1] && \r\n                            <>\r\n                            <Pagination.Item disabled>{\"›\"}</Pagination.Item>\r\n                            <Pagination.Item disabled>{\"»\"}</Pagination.Item>\r\n                            </>\r\n                        }\r\n                    </Pagination>\r\n                </div>\r\n                <div>\r\n                    <Form.Group>\r\n                        <Form.Label>Hiển thị / trang</Form.Label>\r\n                        <Form.Control as=\"select\" onChange={(e) => setCurrentShowPerPage(parseInt(e.target.value))} value={currentShowPerPage}>\r\n                            <option value=\"10\">10</option>\r\n                            <option value=\"20\">20</option>\r\n                            <option value=\"30\">30</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                </div>\r\n            </div>\r\n            \r\n            </>\r\n            }\r\n            {\r\n                quizReviewReady && \r\n                <>\r\n                <QuizReview\r\n                    reviewContent={details}\r\n                    questions={questions}\r\n                    quizInfo={quizInfo}\r\n                    name={selectionName}\r\n                ></QuizReview>\r\n                <div className=\"mt-3 text-center mb-3\">\r\n                    <Button variant=\"success\" className=\"btn-rounded text-white\" onClick={() => {\r\n                        setQuizReviewReady(false);\r\n                        setDetails([]);\r\n                        setQuestions([]);\r\n                        setSelectionName(\"\");\r\n                    }}>Đóng</Button>\r\n                </div>\r\n                </>\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default QuizAttempts\r\n","import \"./my-attempts.css\";\r\nimport {React, useState, useEffect, useContext} from 'react'\r\nimport axios from \"axios\";\r\nimport {AuthContext} from \"../../context/AuthContext\";\r\nimport {Row, Col, Container, Button, Form, Table, Pagination} from \"react-bootstrap\";\r\nimport QuizReview from \"./../../components/quiz-review/QuizReview\";\r\n  \r\nfunction MyAttempts(props) {\r\n    const {user} = useContext(AuthContext);\r\n    const [quizInfo, setQuizInfo] = useState([]);\r\n    const [recordsContent, setRecordsContent] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [currentShowing, setCurrentShowing] = useState([]);\r\n    const [currentShowPerPage, setCurrentShowPerPage] = useState(20);\r\n    const [pageRange, setPageRange] = useState([]);\r\n    const [startEndIndex, setStartEndIndex] = useState([]);\r\n    const [currentCriteria, setCurrentCriteria] = useState(\"5\");\r\n    const [currentSortAsc, setCurrentSortAsc] = useState(\"desc\");\r\n    const [quizReviewReady, setQuizReviewReady] = useState(false);\r\n    const [questions, setQuestions] = useState([]);\r\n    const [details, setDetails] = useState([]);\r\n    const [selectionName, setSelectionName] = useState(\"\");\r\n      \r\n    const initializeTable = (dataLength) => {\r\n        let maxPage = dataLength % currentShowPerPage === 0 ? parseInt(dataLength / currentShowPerPage) : parseInt(dataLength / currentShowPerPage) + 1;\r\n        let buildPageRange = [];\r\n        for (let i = 1; i <= maxPage; i++) {\r\n            buildPageRange.push(i);\r\n        } \r\n        setPageRange(buildPageRange)\r\n        setStartEndIndex([dataLength > 0? 1 : 0, Math.min(currentShowPerPage, dataLength)])\r\n    }\r\n\r\n    const changePage = (pageNumber) => {\r\n        let start = (pageNumber - 1) * currentShowPerPage + 1;\r\n        let end = Math.min(pageNumber * currentShowPerPage, recordsContent.length);\r\n        setCurrentPage(pageNumber);\r\n        setStartEndIndex([start, end]);\r\n        let getArray = recordsContent;\r\n        let getSubArray = getArray.slice(start - 1, end);\r\n        setCurrentShowing(getSubArray);\r\n    }\r\n\r\n    const sortRecord = (array, criteria, isAscending) => {\r\n        let criteriaString = \"\";\r\n        switch (criteria) {\r\n            case 0: //ID\r\n                criteriaString = \"board_id\";\r\n                break;\r\n            case 1: //Name\r\n                criteriaString = \"quiz_name\";\r\n                break;\r\n            case 2: //Time\r\n                criteriaString = \"time\";\r\n                break;\r\n            case 3: //Point\r\n                criteriaString = \"point\";\r\n                break;\r\n            case 4: //Correct\r\n                criteriaString = \"correct\";\r\n                break;\r\n            case 5: //Timestamp\r\n                criteriaString = \"date_created\";\r\n                break;  \r\n        }\r\n        if (criteria !== 5) {\r\n            if (isAscending) {\r\n                array.sort((a,b) => (a[criteriaString] > b[criteriaString]) ? 1 : ((b[criteriaString] > a[criteriaString]) ? -1 : 0))\r\n            } else {\r\n                array.sort((a,b) => (a[criteriaString] < b[criteriaString]) ? 1 : ((b[criteriaString] < a[criteriaString]) ? -1 : 0))\r\n            }\r\n        } else {\r\n            if (isAscending) {\r\n                array.sort((a,b) => (Date.parse(a[\"date_created\"]) > Date.parse(b[\"date_created\"])) ? 1 : ((Date.parse(b[\"date_created\"]) > Date.parse(a[\"date_created\"])) ? -1 : 0))\r\n            } else {\r\n                array.sort((a,b) => (Date.parse(a[\"date_created\"]) < Date.parse(b[\"date_created\"])) ? 1 : ((Date.parse(b[\"date_created\"]) < Date.parse(a[\"date_created\"])) ? -1 : 0))\r\n            }\r\n        }\r\n        return array;\r\n    }\r\n\r\n    const formatTime = (timeInSeconds) => {\r\n        if (!timeInSeconds)\r\n            return \"\";\r\n        let time = \"\";\r\n        if (timeInSeconds >= 3600) {\r\n            let hours = parseInt(timeInSeconds / 3600);\r\n            let minutes = parseInt((timeInSeconds - 3600 * hours) / 60);\r\n            let seconds = timeInSeconds - 3600 * hours - 60 * minutes;\r\n            time = `${hours} giờ`;\r\n            if (minutes > 0)\r\n                time += ` ${minutes} phút`;\r\n            if (seconds > 0)\r\n                time += ` ${seconds} giây`;\r\n        } else if (timeInSeconds >= 60) {\r\n            let minutes = parseInt(timeInSeconds / 60);\r\n            let seconds = timeInSeconds - 60 * minutes;\r\n            time = `${minutes} phút`;\r\n            if (seconds > 0)\r\n                time += ` ${seconds} giây`;\r\n        } else {\r\n            time = (timeInSeconds).toString() + \" giây\";\r\n        }\r\n        return time;\r\n    }\r\n\r\n    Number.prototype.pad = function(size) {\r\n        var s = String(this);\r\n        while (s.length < (size || 2)) {s = \"0\" + s;}\r\n        return s;\r\n    }\r\n\r\n    const formatDate = (d) => {\r\n        return `${d.getDate().pad(2)}/${(d.getMonth()+ 1).pad(2)}/${d.getFullYear()} ${d.getHours().pad(2)}:${d.getMinutes().pad(2)}:${d.getSeconds().pad(2)}`\r\n    }\r\n\r\n    const getInfo = async() => {\r\n        await axios.post(`https://online-quiz-system-server.herokuapp.com/api/quiz/my_attempts`, {\r\n            user_id: user.id,\r\n        })\r\n        .then(res1 => {\r\n            res1.data = sortRecord(res1.data, 5, false);\r\n            for (let i = 0; i < res1.data.length; i++) {\r\n                Object.assign(res1.data[i], {\"board_id\": i + 1});\r\n            }\r\n            setRecordsContent(res1.data);\r\n            initializeTable(res1.data.length);\r\n\r\n            let getSubArray = res1.data;\r\n            getSubArray = res1.data.slice(0, Math.min(currentShowPerPage, res1.data.length));\r\n            setCurrentShowing(getSubArray);\r\n        })\r\n        .catch(err1 => {\r\n            console.log(err1);\r\n        });\r\n               \r\n    }\r\n\r\n    const viewDetail = async(user, quiz, name) => {\r\n        await axios.post(\"https://online-quiz-system-server.herokuapp.com/api/quiz/attempt_detail\", {\r\n            user_id: user,\r\n            quiz_id: quiz\r\n        })\r\n        .then(async(res) => {\r\n            let result = res.data;\r\n            let getDetails = result.slice(0, result.length / 2);\r\n            let getQuestions = result.slice(result.length / 2, result.length);\r\n            for (let i = 0; i < getQuestions.length; i++) {\r\n                if (getQuestions[i].question_type === 0) {\r\n                    getDetails[i].answer = parseInt(getDetails[i].answer);\r\n                }\r\n            }\r\n            setSelectionName(name);\r\n            setDetails(getDetails);\r\n            setQuestions(getQuestions);\r\n\r\n            await axios.get(`https://online-quiz-system-server.herokuapp.com/api/quiz/info/${quiz}`)\r\n            .then(async(res1) => {\r\n                let thisQuizInfo = res1.data;\r\n                setQuizInfo(thisQuizInfo[0]);\r\n            })\r\n            .catch(err1 => {\r\n                console.log(err1);\r\n            });\r\n        })\r\n        .catch(err => {\r\n\r\n        })\r\n    }\r\n\r\n    const changeCriteria = (mode, value) => {\r\n        if (mode === 0) {\r\n            let getTmpData = recordsContent;\r\n            getTmpData = sortRecord(getTmpData, parseInt(value), currentSortAsc === \"asc\");\r\n            setRecordsContent(getTmpData);\r\n            setCurrentCriteria(value);\r\n        } else {\r\n            let getTmpData = recordsContent;\r\n            getTmpData = sortRecord(getTmpData, parseInt(currentCriteria), value === \"asc\");\r\n            setRecordsContent(getTmpData);\r\n            setCurrentSortAsc(value);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        let dataLength = recordsContent.length;\r\n        let maxPage = dataLength % currentShowPerPage === 0 ? parseInt(dataLength / currentShowPerPage) : parseInt(dataLength / currentShowPerPage) + 1;\r\n        let buildPageRange = [];\r\n        for (let i = 1; i <= maxPage; i++) {\r\n            buildPageRange.push(i);\r\n        } \r\n        setPageRange(buildPageRange)\r\n        setStartEndIndex([dataLength > 0? 1 : 0, Math.min(currentShowPerPage, dataLength)])\r\n    }, [currentShowPerPage])\r\n\r\n    useEffect(() => {\r\n        changePage(1);\r\n    }, [recordsContent])\r\n\r\n    useEffect(() => {\r\n        if (quizInfo.length === 0) {\r\n            getInfo();\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (details.length !== 0 && questions.length !== 0 && details.length === questions.length && quizInfo.length !== 0) {\r\n            setQuizReviewReady(true);\r\n        }\r\n    }, [details, questions, quizInfo])\r\n\r\n    return (\r\n        <Container className=\"mt-3 mb-3\">\r\n            {!quizReviewReady &&\r\n            <>\r\n            <h2 className=\"text-center\">Kết quả cá nhân</h2>\r\n            <Row className=\"mb-2\">\r\n                <Col lg={3} md={6} sm={12}>\r\n                    <Form.Group>\r\n                        <Form.Label>Sắp xếp theo</Form.Label>\r\n                        <Form.Control inline as=\"select\" onChange={(e) => changeCriteria(0, e.target.value)} value={currentCriteria}>\r\n                            <option value=\"0\">#</option>\r\n                            <option value=\"1\">Quiz</option>\r\n                            <option value=\"2\">Thời gian làm bài</option>\r\n                            <option value=\"3\">Điểm</option>\r\n                            <option value=\"4\">Số câu đúng</option>\r\n                            <option value=\"5\">Dấu thời gian</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                </Col>\r\n                <Col lg={3} md={6} sm={12}>\r\n                    <Form.Group>\r\n                        <Form.Label style={{opacity: 0}}> a</Form.Label>\r\n                        <Form.Control inline as=\"select\" onChange={(e) => changeCriteria(1, e.target.value)} value={currentSortAsc}>\r\n                            <option value=\"asc\">Tăng dần</option>\r\n                            <option value=\"desc\">Giảm dần</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                </Col>\r\n            </Row>\r\n            <Table \r\n                responsive\r\n                bordered\r\n                striped\r\n                hover\r\n                variant=\"light\"\r\n            >\r\n                <thead>\r\n                    <tr>\r\n                        <th className=\"text-center\">#</th>\r\n                        <th className=\"text-center\">Quiz</th>\r\n                        <th className=\"text-center\">Thời gian làm bài</th>\r\n                        <th className=\"text-center\">Điểm</th>\r\n                        <th className=\"text-center\">Số câu đúng</th>\r\n                        <th className=\"text-center\">Dấu thời gian</th>\r\n                        <th className=\"text-center\">Xem chi tiết</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        currentShowing.map((record, i) => {\r\n                            return (\r\n                                <tr key={i}>\r\n                                    <td>{record.board_id}</td>\r\n                                    <td>{record.quiz_name}</td>\r\n                                    <td>{formatTime(record.time)}</td>\r\n                                    <td>{record.point}</td>\r\n                                    <td>{record.correct}</td>\r\n                                    <td>{formatDate(new Date(record.date_created))}</td>\r\n                                    <td className=\"text-center\">\r\n                                        <Button \r\n                                            variant=\"info\" \r\n                                            className=\"btn-sm text-white\"\r\n                                            onClick={() => {viewDetail(record.user_id, record.quiz_id, record.candidate_name)}}\r\n                                        >Chi tiết</Button>\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        })\r\n                    }                    \r\n                </tbody>\r\n            </Table>\r\n            <div className=\"d-flex justify-content-between\">\r\n                <div>\r\n                    <p>Hiển thị kết quả {startEndIndex[0]} - {startEndIndex[1]} trên tổng số {recordsContent.length} kết quả</p>\r\n                    <Pagination>\r\n                        { \r\n                            currentPage !== 1 && \r\n                            <>\r\n                            <Pagination.Item\r\n                                onClick={() => changePage(1)}\r\n                            >{\"«\"}</Pagination.Item>\r\n                            <Pagination.Item\r\n                                onClick={() => changePage(currentPage - 1)}\r\n                            >{\"‹\"}</Pagination.Item>\r\n                            </>\r\n                        }\r\n                        { \r\n                            currentPage === 1 && \r\n                            <>\r\n                            <Pagination.Item disabled>{\"«\"}</Pagination.Item>\r\n                            <Pagination.Item disabled>{\"‹\"}</Pagination.Item>\r\n                            </>\r\n                        }\r\n                        {\r\n                            pageRange.map((pageNumber) => {\r\n                                let activeClass = pageNumber === currentPage;\r\n                                if (activeClass) {\r\n                                    return (\r\n                                        <Pagination.Item \r\n                                            key={pageNumber} \r\n                                            onClick={() => changePage(pageNumber)} \r\n                                            active \r\n                                            activeLabel=\"\">{pageNumber}</Pagination.Item>    \r\n                                    )\r\n                                } else {\r\n                                    return (\r\n                                        <Pagination.Item \r\n                                            key={pageNumber}\r\n                                            onClick={() => changePage(pageNumber)}>{pageNumber}</Pagination.Item>    \r\n                                    )\r\n                                }\r\n                            })\r\n                        }\r\n                        { \r\n                            currentPage !== pageRange[pageRange.length - 1] && \r\n                            <>\r\n                            <Pagination.Item\r\n                                onClick={() => changePage(currentPage + 1)}\r\n                            >{\"›\"}</Pagination.Item>\r\n                            <Pagination.Item\r\n                                onClick={() => changePage(pageRange[pageRange.length - 1])}\r\n                            >{\"»\"}</Pagination.Item>\r\n                            </>\r\n                        }\r\n                        { \r\n                            currentPage === pageRange[pageRange.length - 1] && \r\n                            <>\r\n                            <Pagination.Item disabled>{\"›\"}</Pagination.Item>\r\n                            <Pagination.Item disabled>{\"»\"}</Pagination.Item>\r\n                            </>\r\n                        }\r\n                    </Pagination>\r\n                </div>\r\n                <div>\r\n                    <Form.Group>\r\n                        <Form.Label>Hiển thị / trang</Form.Label>\r\n                        <Form.Control as=\"select\" onChange={(e) => setCurrentShowPerPage(parseInt(e.target.value))} value={currentShowPerPage}>\r\n                            <option value=\"10\">10</option>\r\n                            <option value=\"20\">20</option>\r\n                            <option value=\"30\">30</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                </div>\r\n            </div>\r\n            \r\n            </>\r\n            }\r\n            {\r\n                quizReviewReady && \r\n                <>\r\n                <QuizReview\r\n                    reviewContent={details}\r\n                    questions={questions}\r\n                    quizInfo={quizInfo}\r\n                ></QuizReview>\r\n                <div className=\"mt-3 text-center mb-3\">\r\n                    <Button variant=\"info\" className=\"text-white\" onClick={() => {\r\n                        setQuizReviewReady(false);\r\n                        setDetails([]);\r\n                        setQuestions([]);\r\n                    }}>Đóng</Button>\r\n                </div>\r\n                </>\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default MyAttempts","import {React, useContext} from 'react';\r\nimport {Navbar, Nav, Container, NavDropdown} from \"react-bootstrap\";\r\nimport './headbar.css';\r\nimport Logo from \"./../../assets/images/ncn.png\";\r\nimport {AuthContext} from \"../../context/AuthContext\";\r\nimport {ExitToApp, History, Create} from \"@material-ui/icons\";\r\n\r\nfunction Headbar() {\r\n    const {user} = useContext(AuthContext);\r\n\r\n    const performSignOut = () => {\r\n        let defaultContext = {\r\n            user: null,\r\n            isFetching: false,\r\n            error: false\r\n        }\r\n        localStorage.setItem(\"auth_state\", JSON.stringify(defaultContext));\r\n        window.location.reload();\r\n    }\r\n\r\n    return (\r\n        <>\r\n        {window.location.pathname !== \"/join\" && <Navbar bg=\"dark\" expand=\"lg\" variant=\"dark\">\r\n            <Container>\r\n                <Navbar.Brand href=\"./home\">\r\n                    <img\r\n                        src={Logo}\r\n                        width=\"40\"\r\n                        height=\"40\"\r\n                        className=\"d-inline-block align-top\"\r\n                        alt=\"NCN Quiz\"\r\n                    />\r\n                </Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"ms-auto\">\r\n                    <NavDropdown title={user.fullname} id=\"basic-nav-dropdown\">\r\n                        <NavDropdown.Item href=\"/attempts\">\r\n                            <History></History> Lịch sử  \r\n                        </NavDropdown.Item>\r\n                        {user.role === 1 &&\r\n                        <NavDropdown.Item href=\"/create\">\r\n                            <Create></Create> Tạo quiz \r\n                        </NavDropdown.Item>\r\n                        } \r\n                        <NavDropdown.Divider />\r\n                        <NavDropdown.Item href=\"#\" onClick={() => performSignOut()}>\r\n                            <ExitToApp></ExitToApp> Đăng xuất\r\n                        </NavDropdown.Item>\r\n                    </NavDropdown>\r\n                </Nav>\r\n                </Navbar.Collapse>\r\n            </Container>\r\n        </Navbar>}\r\n        </>        \r\n    )\r\n}\r\n\r\nexport default Headbar\r\n","import firebase from 'firebase';\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyAHKZmrsppTSsoTjBUFavB73Xcyvcr_FoI\",\r\n    authDomain: \"online-quiz-system-59fe8.firebaseapp.com\",\r\n    projectId: \"online-quiz-system-59fe8\",\r\n    storageBucket: \"online-quiz-system-59fe8.appspot.com\",\r\n    messagingSenderId: \"1055838775\",\r\n    appId: \"1:1055838775:web:821208523ecaba463965b2\"\r\n};\r\nfirebase.initializeApp(firebaseConfig);\r\nvar storage = firebase.storage();\r\nexport default storage;","import \"./question-add-modal.css\";\r\nimport {React, useState, useEffect, useRef} from 'react'\r\nimport {Form, Button, Modal, Row, Col} from \"react-bootstrap\";\r\nimport {Cancel, PermMedia} from \"@material-ui/icons\"\r\nimport {Chip, Paper} from '@material-ui/core';\r\nimport storage from './../../firebase';\r\n\r\nfunction QuestionAddModal(props) {\r\n    const [question, setQuestion] = useState(\"\");\r\n    const [questionType, setQuestionType] = useState(0);\r\n    const [numberOfChoices, setNumberOfChoices] = useState(0);\r\n    const [numberOfChoicesError, setNumberOfChoicesError] = useState(\"\");\r\n    const [keys, setKeys] = useState([]);\r\n    const [keyCorrects, setKeyCorrects] = useState([]);\r\n    const [keyImages, setKeyImages] = useState([]);\r\n    const [keyType1Choices, setKeyType1Choices] = useState([]);\r\n    const [type1CurrentInput, setType1CurrentInput] = useState(\"\");\r\n    const [explain, setExplain] = useState(\"\");\r\n    const [file, setFile] = useState(null);\r\n    const [time, setTime] = useState(\"\");\r\n    const [point, setPoint] = useState(\"\");\r\n    const [validateError, setValidateError] = useState(\"\");\r\n    const keyImageURLs = useRef();\r\n    const imageURL = useRef();\r\n\r\n    useEffect(() => {\r\n        keyImageURLs.current = [];\r\n        imageURL.current = \"\";\r\n    }, []);\r\n\r\n    const check = () => {\r\n        //Count target\r\n        let getCount = 0;\r\n        for (let i = 0; i < keyImages.length; i++) {\r\n            if (keyImages[i])\r\n                getCount++;\r\n        }\r\n        if (file)\r\n            getCount++;\r\n\r\n        let count = 0;\r\n        if (imageURL.current !== \"\" && file)\r\n        {\r\n            count++;\r\n        }\r\n        for (let i = 0; i < keyImageURLs.current.length; i++) {\r\n            if (keyImageURLs.current[i] !== \"\")\r\n            {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        if (count === getCount && getCount > 0) {\r\n            callParentSubmit();\r\n        }\r\n    }\r\n\r\n    const handleQuestionTypeChange = (type) => {\r\n        setQuestionType(type);\r\n        setKeyType1Choices([]);\r\n        setType1CurrentInput(\"\");\r\n        if (type === 1) \r\n        {\r\n            setNumberOfChoices(1);\r\n            setNumberOfChoicesError(\"\");\r\n            setKeyCorrects([true]);\r\n            setKeys([\"\"]);\r\n            setKeyImages([\"\"]);\r\n            keyImageURLs.current = [\"\"];\r\n        } else {\r\n            setNumberOfChoices(0);\r\n            setKeyCorrects([]);\r\n            setKeys([]);\r\n            setKeyImages([]);\r\n            keyImageURLs.current = [];\r\n        }\r\n    }\r\n\r\n    const handleChoicesCountChange = (count) => {\r\n        if (count < 2 || count > 5) {\r\n            setNumberOfChoicesError(\"Số lượng phương án phải từ 2 đến 5.\");\r\n        } else {\r\n            setNumberOfChoices(count);\r\n            setNumberOfChoicesError(\"\");\r\n            let tmpKeysArr = []\r\n            let tmpKeysCorrectArr = [] \r\n            let tmpKeyImages = [];\r\n            let tmpKeyImagesURLs = [];\r\n            for (let i = 0; i < count; i++) {\r\n                tmpKeysArr.push(\"\");\r\n                tmpKeysCorrectArr.push(false);\r\n                tmpKeyImages.push(null);\r\n                tmpKeyImagesURLs.push(\"\");\r\n            }\r\n            setKeyCorrects(tmpKeysCorrectArr);\r\n            setKeys(tmpKeysArr);\r\n            setKeyImages(tmpKeyImages);\r\n            keyImageURLs.current = tmpKeyImagesURLs;\r\n        }\r\n    }\r\n\r\n    const handleCorrectKeyChange = (index) => {\r\n        let getKeyCorrectArr = [];\r\n        for (let i = 0; i < keyCorrects.length; i++) {\r\n            getKeyCorrectArr.push(false);\r\n        }\r\n        let item = getKeyCorrectArr[index];\r\n        getKeyCorrectArr[index] = !item;\r\n        setKeyCorrects(getKeyCorrectArr);\r\n    }\r\n\r\n    const handleKeyChange = (index, value) => {\r\n        let emptyArr = [];\r\n        for (let i = 0; i < keys.length; i++) {\r\n            if (i === index) {\r\n                emptyArr.push(value);\r\n            } else {\r\n                emptyArr.push(keys[i]);\r\n            }\r\n        }\r\n        setKeys(emptyArr);\r\n        setType1CurrentInput(value);\r\n    }\r\n\r\n    const handleKeyImage = (index, file) => {\r\n        let emptyArr = [];\r\n        for (let i = 0; i < keyImages.length; i++) {\r\n            if (i === index) {\r\n                emptyArr.push(file);\r\n            } else {\r\n                emptyArr.push(keyImages[i]);\r\n            }\r\n        }\r\n        setKeyImages(emptyArr);\r\n    }\r\n\r\n    const setImageNull = (i) => {\r\n        let emptyArr = [...keyImages];\r\n        emptyArr[i] = null;\r\n        setKeyImages(emptyArr);\r\n    }\r\n\r\n    const prepareFormSubmit = async(e) => {\r\n        e.preventDefault();\r\n\r\n        //Validate info\r\n        if (question === \"\") {\r\n            setValidateError(\"Vui lòng nhập nội dung câu hỏi.\");\r\n            return;\r\n        } \r\n        \r\n        if (questionType === 0) {\r\n            if (!keyCorrects.includes(true)) {\r\n                setValidateError(\"Vui lòng chọn 1 đáp án đúng.\");\r\n                return;\r\n            }\r\n            for (let i = 0; i < keys.length; i++) {\r\n                if (keys[i] === \"\" && !keyImages[i]) {\r\n                    setValidateError(\"Phương án không hợp lệ.\");\r\n                    return;\r\n                }\r\n            }\r\n        } else if (questionType === 1) {\r\n            if (keyType1Choices.length === 0) {\r\n                setValidateError(\"Vui lòng nhập ít nhất 1 đáp án cho câu hỏi.\");\r\n                return;\r\n            }\r\n        }\r\n        \r\n        if (!props.useQuizTime && isNaN(parseInt(time))) {\r\n            setValidateError(\"Thời gian trả lời không hợp lệ.\");\r\n            return;\r\n        } else if (isNaN(parseInt(point))) {\r\n            setValidateError(\"Điểm số câu không hợp lệ.\");\r\n            return;\r\n        }\r\n\r\n        let getCount = 0;\r\n        for (let i = 0; i < keyImages.length; i++) {\r\n            if (keyImages[i])\r\n                getCount++;\r\n        }\r\n        if (file)\r\n            getCount++;\r\n\r\n        //Upload to firebase and retrieve URL \r\n        if (getCount !== 0) {\r\n            if (file) {\r\n                let fileName = file.name + \"-\" + Date.now();\r\n                //questions_images\r\n                storage.ref(`questions_images/${fileName}`).put(file)\r\n                .on(\"state_changed\", (snapshot) => {}, \r\n                (error) => {console.log(error)}, \r\n                () => {\r\n                    storage.ref(`questions_images/`).child(`${fileName}`).getDownloadURL()\r\n                    .then(\r\n                        (url) => {\r\n                            imageURL.current = url;\r\n                            check();\r\n                        },\r\n                        (error) => {\r\n                            console.log(error);\r\n                        }\r\n                    );\r\n                });\r\n            }\r\n\r\n            for (let i = 0; i < keyImages.length; i++) {\r\n                if (keyImages[i]) {\r\n                    let keyFileName = keyImages[i].name + \"-\" + Date.now();\r\n                    //questions_images\r\n                    storage.ref(`questions_images/${keyFileName}`).put(keyImages[i])\r\n                    .on(\"state_changed\", (snapshot) => {}, \r\n                    (error) => {console.log(error)}, \r\n                    () => {\r\n                        storage.ref(`questions_images/`).child(`${keyFileName}`).getDownloadURL()\r\n                        .then(\r\n                            (url) => {\r\n                                setImageURL(i, url);  \r\n                            },\r\n                            (error) => {\r\n                                console.log(error);\r\n                            }\r\n                        );\r\n                    });\r\n                }\r\n            }\r\n        } else {\r\n            callParentSubmit();\r\n        }\r\n    }\r\n\r\n    const setImageURL = (index, path) => {\r\n        // let arrays = [...keyImagesURLs];\r\n        // arrays[index] = path;\r\n        // setKeyImagesURLs(arrays);\r\n\r\n        let getArray = keyImageURLs.current;\r\n        getArray[index] = path;\r\n        keyImageURLs.current = getArray;\r\n        check();\r\n    }\r\n\r\n    const callParentSubmit = () => {\r\n        let output = {};\r\n        output[\"question\"] = question;\r\n        output[\"questionType\"] = questionType;\r\n        output[\"numberOfChoices\"] = numberOfChoices;\r\n        output[\"keyCorrects\"] = keyCorrects;\r\n        output[\"explain\"] = explain;\r\n        output[\"time\"] = time === \"\"? 0 : parseInt(time);\r\n        output[\"point\"] = point;\r\n        output[\"image\"] = imageURL.current;\r\n        output[\"keyImages\"] = keyImageURLs.current;\r\n\r\n        if (questionType === 0) {\r\n            output[\"keys\"] = keys;\r\n        } else {\r\n            output[\"keys\"] = [\"\"];\r\n            \r\n            for (let i = 0; i < keyType1Choices.length - 1; i++) {\r\n                output[\"keys\"][0] += keyType1Choices[i] + \"~|\";\r\n            }\r\n            output[\"keys\"][0] += keyType1Choices[keyType1Choices.length - 1];\r\n        }\r\n\r\n        //Refresh\r\n        setValidateError(\"\");\r\n        setQuestion(\"\");\r\n        setQuestionType(0);\r\n        setNumberOfChoicesError(\"\");\r\n        setNumberOfChoices(0);\r\n        setKeys([]);\r\n        setKeyCorrects([]);\r\n        setExplain(\"\");\r\n        setFile(null);\r\n        setTime(\"\");\r\n        setPoint(\"\");\r\n        keyImageURLs.current = [];\r\n        imageURL.current = \"\";\r\n        setKeyImages([]);\r\n        setKeyType1Choices([]);\r\n        setType1CurrentInput(\"\");\r\n\r\n        props.onAddQuestionSubmit(output);\r\n    }\r\n\r\n    const keyBoxKeyDown = (e) => {\r\n        if (e.key === \"Enter\") {\r\n            e.preventDefault();\r\n            setKeyType1Choices([...keyType1Choices, e.target.value]);\r\n            setType1CurrentInput(\"\");\r\n        }\r\n    }\r\n\r\n    const deleteKeyType1Choice = (index) => {\r\n        let cloneArray = [...keyType1Choices];\r\n        cloneArray.splice(index, 1);\r\n        setKeyType1Choices(cloneArray);\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n            {...props}\r\n        >\r\n            <Modal.Header>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Thêm câu hỏi (câu {props.numberOfQuest + 1})\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            <Row>\r\n                    <Col md={10} sm={12} className=\"offset-md-1 offset-sm-0\">\r\n                        <Form id=\"questionAddForm\" onSubmit={prepareFormSubmit}>\r\n                            <Form.Group className=\"\">\r\n                                <Form.Label>Câu hỏi</Form.Label>\r\n                                <Form.Control as=\"textarea\" required validate=\"Quiz name is not valid!\"\r\n                                onChange={(e) => setQuestion(e.target.value)}/>\r\n                            </Form.Group>\r\n                            <Form.Group className=\"\">\r\n                            <fieldset>\r\n                                <Form.Group as={Row} className=\"mb-3\">\r\n                                <Form.Label as=\"legend\" column sm={2}>\r\n                                    Loại:\r\n                                </Form.Label>\r\n                                <Col sm={12}>\r\n                                    <Form.Check\r\n                                        type=\"radio\"\r\n                                        label=\"Trắc nghiệm\"\r\n                                        name=\"question-type\"\r\n                                        checked={questionType === 0}\r\n                                        onChange={() => handleQuestionTypeChange(0)}\r\n                                    />\r\n                                     <Form.Check\r\n                                        type=\"radio\"\r\n                                        label=\"Trả lời ngắn\"\r\n                                        name=\"question-type\"\r\n                                        checked={questionType === 1}\r\n                                        onChange={() => handleQuestionTypeChange(1)}\r\n                                    />\r\n                                </Col>\r\n                                </Form.Group>\r\n                            </fieldset>\r\n                            </Form.Group>\r\n                            {questionType === 0 && \r\n                                (<Form.Group className=\"\">\r\n                                <Form.Label>Số phương án</Form.Label>\r\n                                <Form.Control \r\n                                    type=\"number\"\r\n                                    validate=\"Phải là giá trị từ 2 đến 5\" \r\n                                    min={2} max={5}\r\n                                    onChange={(e) => handleChoicesCountChange(e.target.value)}\r\n                                />\r\n                                <p className=\"error\">{numberOfChoicesError}</p>\r\n                                </Form.Group>)\r\n                            }\r\n                            {\r\n                                numberOfChoicesError === \"\" && (questionType === 0 && [...Array(parseInt(numberOfChoices))].map((x, i) => {\r\n                                    let getClassName = `question-${numberOfChoices}-answer`;\r\n                                    let idImageName = `file-${i}`\r\n                                    return (\r\n                                        <Form.Group className=\"mt-2\">\r\n                                            <Form.Label>Phương án {i + 1}\r\n                                            <Form.Check\r\n                                                type=\"radio\"\r\n                                                label=\"Đúng\"\r\n                                                name={getClassName}\r\n                                                onChange={() => handleCorrectKeyChange(i)}\r\n                                            />\r\n                                            </Form.Label>\r\n                                            <Form.Control type=\"text\" validate=\"Không hợp lệ!\" minLength={1}\r\n                                            onChange={(e) => handleKeyChange(i, e.target.value)}/>\r\n                                            <Form.Group className=\"mb-3 mt-3\">\r\n                                                <Form.Label>Ảnh phương án (nếu có)</Form.Label><br></br>\r\n                                                <label htmlFor={idImageName} className=\"shareOption\" style={{cursor: \"pointer\"}}>\r\n                                                    <PermMedia htmlColor=\"green\" className=\"shareIcon\"/>\r\n                                                    <Form.Control style={{display: \"none\"}} type=\"file\" id={idImageName} accept=\".png, .jpeg, .jpg\" size=\"sm\" onChange={(e) => handleKeyImage(i, e.target.files[0])}/>\r\n                                                </label>\r\n                                            </Form.Group>\r\n                                            {keyImages[i] && <div className=\"keyImgContainer\">\r\n                                                <img className=\"shareImg\" src={URL.createObjectURL(keyImages[i])} alt=\"\"/>\r\n                                                <Cancel className=\"shareCancelImg\" onClick={() => setImageNull(i)}></Cancel>\r\n                                            </div>}\r\n                                        </Form.Group>\r\n                                    )\r\n                                })) || \r\n                                (questionType === 1 && \r\n                                    <>\r\n                                    <Form.Group className=\"\">\r\n                                        <Form.Label>Đáp án</Form.Label>\r\n                                        <Form.Control type=\"text\" validate=\"Đáp án không hợp lệ!\" minLength={1}\r\n                                        value={type1CurrentInput}\r\n                                        onChange={(e) => handleKeyChange(0, e.target.value)}\r\n                                        onKeyPress={(e) => keyBoxKeyDown(e)}/>\r\n                                    </Form.Group>\r\n                                    {keyType1Choices.length > 0 && \r\n                                    <Paper component=\"ul\">\r\n                                        {keyType1Choices.map((choice, index) => {\r\n                                            return (\r\n                                                <li key={index}>\r\n                                                    <Chip\r\n                                                        label={choice}\r\n                                                        onDelete={() => deleteKeyType1Choice(index)}\r\n                                                    />\r\n                                                </li>\r\n                                            )\r\n                                        })}\r\n                                    </Paper>\r\n                                    }\r\n                                    </>\r\n                                )\r\n                            }\r\n                            <Form.Group className=\"mt-2\">\r\n                                <Form.Label>Giải thích (nếu có)</Form.Label>\r\n                                <Form.Control as=\"textarea\" validate=\"Không hợp lệ!\"\r\n                                onChange={(e) => setExplain(e.target.value)}/>\r\n                            </Form.Group>\r\n                            <Form.Group className=\"mt-2\">\r\n                                <Form.Label>Điểm số</Form.Label>\r\n                                <Form.Control type=\"number\" min={0} validate=\"Không hợp lệ!\"\r\n                                onChange={(e) => setPoint(e.target.value)}/>\r\n                            </Form.Group>\r\n                            {!props.useQuizTime && <Form.Group className=\"mb-3 mt-3\">\r\n                                <Form.Label>Thời gian trả lời (giây): </Form.Label><br></br>\r\n                                <Form.Control \r\n                                    type=\"number\"\r\n                                    min = {1}\r\n                                    onChange={(e) => setTime(e.target.value)} \r\n                                />\r\n                            </Form.Group>}\r\n                            <Form.Group className=\"mb-3 mt-3\">\r\n                                <Form.Label>Ảnh câu hỏi (nếu có)</Form.Label><br></br>\r\n                                <label htmlFor=\"file\" className=\"shareOption\" style={{cursor: \"pointer\"}}>\r\n                                    <PermMedia htmlColor=\"green\" className=\"shareIcon\"/>\r\n                                    <Form.Control style={{display: \"none\"}} type=\"file\" id=\"file\" accept=\".png, .jpeg, .jpg\" size=\"sm\" onChange={(e) => setFile(e.target.files[0])}/>\r\n                                </label>\r\n\r\n                            </Form.Group>\r\n                            </Form>\r\n                            {file && <div className=\"shareImgContainer\">\r\n                                <img className=\"shareImg\" src={URL.createObjectURL(file)} alt=\"\"/>\r\n                                <Cancel className=\"shareCancelImg\" onClick={() => setFile(null)}></Cancel>\r\n                            </div>}\r\n                    </Col>\r\n                </Row>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n            <p className=\"error\">{validateError}</p>\r\n            <Button variant=\"success\" type=\"submit\" form=\"questionAddForm\">Thêm</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default QuestionAddModal","import \"./question-edit-modal.css\";\r\nimport {React, useState, useEffect, useRef} from 'react'\r\nimport {Form, Button, Modal, Row, Col} from \"react-bootstrap\";\r\nimport {Cancel, PermMedia} from \"@material-ui/icons\";\r\nimport {Chip, Paper} from '@material-ui/core';\r\nimport storage from './../../firebase';\r\n\r\nfunction QuestionEditModal(props) {\r\n    const [question, setQuestion] = useState(\"\");\r\n    const [questionType, setQuestionType] = useState(0);\r\n    const [numberOfChoices, setNumberOfChoices] = useState(0);\r\n    const [numberOfChoicesError, setNumberOfChoicesError] = useState(\"\");\r\n    const [keys, setKeys] = useState([]);\r\n    const [keyCorrects, setKeyCorrects] = useState([]);\r\n    const [keyImages, setKeyImages] = useState([]);\r\n    const [keyImageUrl, setKeyImageUrl] = useState([]);\r\n    const [keyType1Choices, setKeyType1Choices] = useState([]);\r\n    const [type1CurrentInput, setType1CurrentInput] = useState(\"\");\r\n    const [explain, setExplain] = useState(\"\");\r\n    const [file, setFile] = useState(null);\r\n    const [url, setURL] = useState(\"\"); //This only be used in case of passing a Firebase URL from QuizCreate\r\n    const [time, setTime] = useState(\"\");\r\n    const [point, setPoint] = useState(\"\");\r\n    const [validateError, setValidateError] = useState(\"\");\r\n    const keyImageURLs = useRef();\r\n    const imageURL = useRef(); \r\n    const [renderBool, setRenderBool] = useState(false);\r\n\r\n    const check = () => {\r\n        //Count target\r\n        let getCount = 0;\r\n        for (let i = 0; i < keyImages.length; i++) {\r\n            if (keyImages[i])\r\n                getCount++;\r\n        }\r\n        if (file)\r\n            getCount++;\r\n\r\n        let count = 0;\r\n        if (imageURL.current !== \"\" && file)\r\n        {\r\n            count++;\r\n        }\r\n        for (let i = 0; i < keyImageURLs.current.length; i++) {\r\n            if (keyImageURLs.current[i] !== \"\")\r\n            {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        if (count === getCount && getCount > 0) {\r\n            callParentSubmit();\r\n        }\r\n    }\r\n\r\n    const handleQuestionTypeChange = (type) => {\r\n        setQuestionType(type);\r\n        if (type === 1) \r\n        {\r\n            setNumberOfChoices(1);\r\n            setNumberOfChoicesError(\"\");\r\n            setKeyCorrects([true]);\r\n            setKeys([\"\"]);\r\n            setKeyImages([\"\"]);\r\n            setKeyImageUrl([\"\"]);\r\n            keyImageURLs.current = [\"\"];\r\n        } else {\r\n            setNumberOfChoices(0);\r\n            setKeyCorrects([]);\r\n            setKeys([]);\r\n            setKeyImages([]);\r\n            setKeyImageUrl([]);\r\n            keyImageURLs.current = [];\r\n        }\r\n    }\r\n\r\n    const handleChoicesCountChange = (count) => {\r\n        if (count < 2 || count > 5) {\r\n            setNumberOfChoicesError(\"Số lượng phương án phải từ 2 đến 5.\");\r\n        } else {\r\n            setNumberOfChoices(count);\r\n            setNumberOfChoicesError(\"\");\r\n            let tmpKeysArr = []\r\n            let tmpKeysCorrectArr = [] \r\n            let tmpKeyImages = [];\r\n            let tmpKeyImagesURLs = [];\r\n            for (let i = 0; i < count; i++) {\r\n                tmpKeysArr.push(\"\");\r\n                tmpKeysCorrectArr.push(false);\r\n                tmpKeyImages.push(null);\r\n                tmpKeyImagesURLs.push(\"\");\r\n            }\r\n            setKeyCorrects(tmpKeysCorrectArr);\r\n            setKeys(tmpKeysArr);\r\n            setKeyImages(tmpKeyImages);\r\n            setKeyImageUrl(tmpKeyImagesURLs);\r\n            keyImageURLs.current = tmpKeyImagesURLs;\r\n        }\r\n    }\r\n\r\n    const handleCorrectKeyChange = (index) => {\r\n        let getKeyCorrectArr = [];\r\n        for (let i = 0; i < keyCorrects.length; i++) {\r\n            getKeyCorrectArr.push(false);\r\n        }\r\n        let item = getKeyCorrectArr[index];\r\n        getKeyCorrectArr[index] = !item;\r\n        setKeyCorrects(getKeyCorrectArr);\r\n    }\r\n\r\n    const handleKeyChange = (index, value) => {\r\n        setType1CurrentInput(value);\r\n        /*\r\n        let emptyArr = [];\r\n        for (let i = 0; i < keys.length; i++) {\r\n            if (i === index) {\r\n                emptyArr.push(value);\r\n            } else {\r\n                emptyArr.push(keys[i]);\r\n            }\r\n        }\r\n        setKeys(emptyArr);\r\n        */\r\n    }\r\n\r\n    const handleKeyImage = (index, file) => {\r\n        let emptyArr = [];\r\n        for (let i = 0; i < keyImages.length; i++) {\r\n            if (i === index) {\r\n                emptyArr.push(file);\r\n            } else {\r\n                emptyArr.push(keyImages[i]);\r\n            }\r\n        }\r\n        setKeyImages(emptyArr);\r\n    }\r\n\r\n    const setImageNull = (i) => {\r\n        let emptyArr = [...keyImages];\r\n        emptyArr[i] = null;\r\n        let emptyArr1 = [...keyImageUrl];\r\n        emptyArr1[i] = \"\";\r\n        setKeyImages(emptyArr);\r\n        setKeyImageUrl(emptyArr1);\r\n    }\r\n\r\n    const prepareFormSubmit = async(e) => {\r\n        e.preventDefault();\r\n\r\n        //Validate info\r\n        if (question === \"\") {\r\n            setValidateError(\"Vui lòng nhập nội dung câu hỏi.\");\r\n            return;\r\n        } \r\n        \r\n        if (questionType === 0) {\r\n            if (!keyCorrects.includes(true)) {\r\n                setValidateError(\"Vui lòng chọn 1 đáp án đúng.\");\r\n                return;\r\n            }\r\n            for (let i = 0; i < keys.length; i++) {\r\n                if (keys[i] === \"\" && !keyImages[i]) {\r\n                    setValidateError(\"Phương án không hợp lệ.\");\r\n                    return;\r\n                }\r\n            }\r\n        } else if (questionType === 1) {\r\n            if (keyType1Choices.length === 0) {\r\n                setValidateError(\"Vui lòng nhập ít nhất 1 đáp án cho câu hỏi.\");\r\n                return;\r\n            }\r\n        }\r\n        \r\n        if (!props.useQuizTime && isNaN(parseInt(time))) {\r\n            setValidateError(\"Thời gian trả lời không hợp lệ.\");\r\n            return;\r\n        } else if (isNaN(parseInt(point))) {\r\n            setValidateError(\"Điểm số câu không hợp lệ.\");\r\n            return;\r\n        }\r\n\r\n        let getCount = 0;\r\n        for (let i = 0; i < keyImages.length; i++) {\r\n            if (keyImages[i])\r\n                getCount++;\r\n        }\r\n        if (file)\r\n            getCount++;\r\n\r\n        //Upload to firebase and retrieve URL \r\n        if (getCount != 0) {\r\n            if (file) {\r\n                let fileName = file.name + \"-\" + Date.now();\r\n                //questions_images\r\n                storage.ref(`questions_images/${fileName}`).put(file)\r\n                .on(\"state_changed\", (snapshot) => {}, \r\n                (error) => {console.log(error)}, \r\n                () => {\r\n                    storage.ref(`questions_images/`).child(`${fileName}`).getDownloadURL()\r\n                    .then(\r\n                        (url) => {\r\n                            imageURL.current = url;\r\n                            check();\r\n                        },\r\n                        (error) => {\r\n                            console.log(error);\r\n                        }\r\n                    );\r\n                });\r\n            }\r\n\r\n            for (let i = 0; i < keyImages.length; i++) {\r\n                if (keyImages[i]) {\r\n                    let keyFileName = keyImages[i].name + \"-\" + Date.now();\r\n                    //questions_images\r\n                    storage.ref(`questions_images/${keyFileName}`).put(keyImages[i])\r\n                    .on(\"state_changed\", (snapshot) => {}, \r\n                    (error) => {console.log(error)}, \r\n                    () => {\r\n                        storage.ref(`questions_images/`).child(`${keyFileName}`).getDownloadURL()\r\n                        .then(\r\n                            (url) => {\r\n                                setImageURL(i, url);  \r\n                            },\r\n                            (error) => {\r\n                                console.log(error);\r\n                            }\r\n                        );\r\n                    });\r\n                }\r\n            }\r\n        } else {\r\n            callParentSubmit();\r\n        }\r\n    }\r\n\r\n    const setImageURL = (index, path) => {\r\n        // let arrays = [...keyImagesURLs];\r\n        // arrays[index] = path;\r\n        // setKeyImagesURLs(arrays);\r\n\r\n        let getArray = keyImageURLs.current;\r\n        getArray[index] = path;\r\n        keyImageURLs.current = getArray;\r\n        check();\r\n    }\r\n\r\n    const callParentSubmit = () => {\r\n        let output = {};\r\n        output[\"question\"] = question;\r\n        output[\"questionType\"] = questionType;\r\n        output[\"numberOfChoices\"] = numberOfChoices;\r\n        output[\"keyCorrects\"] = keyCorrects;\r\n        output[\"explain\"] = explain;\r\n        output[\"time\"] = time === \"\"? 0 : parseInt(time);\r\n        output[\"point\"] = point;\r\n        output[\"image\"] = imageURL.current;\r\n        output[\"keyImages\"] = keyImageURLs.current;\r\n        output[\"questIndex\"] = props.questionEditGet[\"questIndex\"];\r\n\r\n        if (questionType === 0) {\r\n            output[\"keys\"] = keys;\r\n        } else {\r\n            output[\"keys\"] = [\"\"];\r\n            \r\n            for (let i = 0; i < keyType1Choices.length - 1; i++) {\r\n                output[\"keys\"][0] += keyType1Choices[i] + \"~|\";\r\n            }\r\n            output[\"keys\"][0] += keyType1Choices[keyType1Choices.length - 1];\r\n        }\r\n\r\n        //Refresh\r\n        setValidateError(\"\");\r\n        setQuestion(\"\");\r\n        setQuestionType(0);\r\n        setNumberOfChoicesError(\"\");\r\n        setNumberOfChoices(0);\r\n        setKeys([]);\r\n        setKeyCorrects([]);\r\n        setExplain(\"\");\r\n        setFile(null);\r\n        setTime(\"\");\r\n        setPoint(\"\");\r\n        keyImageURLs.current = [];\r\n        imageURL.current = \"\";\r\n        setKeyImages([]);\r\n        setKeyImageUrl([]);\r\n        setKeyType1Choices([]);\r\n        setType1CurrentInput(\"\");\r\n\r\n        props.onEditQuestionSubmit(output);\r\n    }\r\n\r\n    const keyBoxKeyDown = (e) => {\r\n        if (e.key == \"Enter\") {\r\n            e.preventDefault();\r\n            setKeyType1Choices([...keyType1Choices, e.target.value]);\r\n            setType1CurrentInput(\"\");\r\n        }\r\n    }\r\n\r\n    const deleteKeyType1Choice = (index) => {\r\n        let cloneArray = [...keyType1Choices];\r\n        cloneArray.splice(index, 1);\r\n        setKeyType1Choices(cloneArray);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (props.questionEditGet) {\r\n            setQuestion(props.questionEditGet[\"question\"]);\r\n            setQuestionType(props.questionEditGet[\"questionType\"]);\r\n            setNumberOfChoices(props.questionEditGet[\"keys\"].length);\r\n            setKeys(props.questionEditGet[\"keys\"]);\r\n            setKeyCorrects(props.questionEditGet[\"keyCorrects\"]);\r\n            setTime(props.questionEditGet[\"time\"]);\r\n            setExplain(props.questionEditGet[\"explain\"]);\r\n            setURL(props.questionEditGet[\"image\"]);\r\n            keyImageURLs.current = [];\r\n            imageURL.current = \"\";\r\n            setPoint(props.questionEditGet[\"point\"]);\r\n            setKeyImageUrl(props.questionEditGet[\"keyImages\"]);\r\n            setType1CurrentInput(\"\");\r\n            if (props.questionEditGet[\"questionType\"] === 1) {\r\n                setKeyType1Choices(props.questionEditGet[\"keys\"][0].split(\"~|\"))\r\n            }\r\n\r\n            let emptyArr = [];\r\n            for (let i = 0; i < props.questionEditGet[\"keys\"].length; i++) {\r\n                emptyArr.push(null);\r\n            }\r\n\r\n            setKeyImages(emptyArr);\r\n        }\r\n    }, [props.show]);\r\n\r\n    return (        \r\n        <Modal\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n            {...props}\r\n        >\r\n            <Modal.Header>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Sửa câu hỏi (câu {props.questionEditGet? props.questionEditGet[\"questIndex\"] + 1 : \"\"})\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            <Row>\r\n                    <Col md={10} sm={12} className=\"offset-md-1 offset-sm-0\">\r\n                        <Form id=\"questionAddForm\" onSubmit={prepareFormSubmit}>\r\n                            <Form.Group className=\"\">\r\n                                <Form.Label>Câu hỏi</Form.Label>\r\n                                <Form.Control as=\"textarea\" required validate=\"Quiz name is not valid!\"\r\n                                value={question}\r\n                                onChange={(e) => setQuestion(e.target.value)}/>\r\n                            </Form.Group>\r\n                            <Form.Group className=\"\">\r\n                            <fieldset>\r\n                                <Form.Group as={Row} className=\"mb-3\">\r\n                                <Form.Label as=\"legend\" column sm={2}>\r\n                                    Loại:\r\n                                </Form.Label>\r\n                                <Col sm={12}>\r\n                                    <Form.Check\r\n                                        type=\"radio\"\r\n                                        label=\"Trắc nghiệm\"\r\n                                        name=\"question-type\"\r\n                                        checked={questionType === 0}\r\n                                        onChange={() => handleQuestionTypeChange(0)}\r\n                                    />\r\n                                    <Form.Check\r\n                                        type=\"radio\"\r\n                                        label=\"Trả lời ngắn\"\r\n                                        name=\"question-type\"\r\n                                        checked={questionType === 1}\r\n                                        onChange={() => handleQuestionTypeChange(1)}\r\n                                    />\r\n                                </Col>\r\n                                </Form.Group>\r\n                            </fieldset>\r\n                            </Form.Group>\r\n                            {questionType === 0 && \r\n                                (<Form.Group className=\"\">\r\n                                <Form.Label>Số phương án</Form.Label>\r\n                                <Form.Control \r\n                                    type=\"number\"\r\n                                    validate=\"Phải là giá trị từ 2 đến 5\" \r\n                                    min={2} max={5}\r\n                                    value={numberOfChoices}\r\n                                    onChange={(e) => handleChoicesCountChange(e.target.value)}\r\n                                />\r\n                                <p className=\"error\">{numberOfChoicesError}</p>\r\n                                </Form.Group>)\r\n                            }\r\n                            {\r\n                                numberOfChoicesError === \"\" && (questionType === 0 && [...Array(parseInt(numberOfChoices))].map((x, i) => {\r\n                                    let getClassName = `question-${numberOfChoices}-answer`;\r\n                                    let idImageName = `file-${i}`\r\n                                    return (\r\n                                        <Form.Group className=\"mt-2\">\r\n                                            <Form.Label>Phương án {i + 1}\r\n                                            <Form.Check\r\n                                                type=\"radio\"\r\n                                                label=\"Đúng\"\r\n                                                name={getClassName}\r\n                                                checked={keyCorrects[i]}\r\n                                                onChange={() => handleCorrectKeyChange(i)}\r\n                                            />\r\n                                            </Form.Label>\r\n                                            <Form.Control type=\"text\" validate=\"Không hợp lệ!\" minLength={1}\r\n                                            value={keys[i]}\r\n                                            onChange={(e) => handleKeyChange(i, e.target.value)}/>\r\n                                            <Form.Group className=\"mb-3 mt-3\">\r\n                                                <Form.Label>Ảnh phương án (nếu có)</Form.Label><br></br>\r\n                                                <label htmlFor={idImageName} className=\"shareOption\" style={{cursor: \"pointer\"}}>\r\n                                                    <PermMedia htmlColor=\"green\" className=\"shareIcon\"/>\r\n                                                    <Form.Control style={{display: \"none\"}} type=\"file\" id={idImageName} accept=\".png, .jpeg, .jpg\" size=\"sm\" onChange={(e) => handleKeyImage(i, e.target.files[0])}/>\r\n                                                </label>\r\n                                            </Form.Group>\r\n                                            { keyImages[i] && (\r\n                                                <div className=\"keyImgContainer\">\r\n                                                    <img className=\"shareImg\" src={keyImages[i] && URL.createObjectURL(keyImages[i])} alt=\"\"/>\r\n                                                    <Cancel className=\"shareCancelImg\" onClick={() => setImageNull(i)}></Cancel>\r\n                                                </div>\r\n                                            )}\r\n                                            {!keyImages[i] && keyImageUrl[i] && keyImageUrl[i] !== \"\" && (\r\n                                                <div className=\"keyImgContainer\">\r\n                                                    <img className=\"shareImg\" src={keyImageUrl[i]} alt=\"\"/>\r\n                                                    <Cancel className=\"shareCancelImg\" onClick={() => setImageNull(i)}></Cancel>\r\n                                                </div>\r\n                                            )}\r\n                                        </Form.Group>\r\n                                    )\r\n                                })) || \r\n                                (questionType === 1 && \r\n                                    <>\r\n                                    <Form.Group className=\"\">\r\n                                        <Form.Label>Đáp án</Form.Label>\r\n                                        <Form.Control type=\"text\" validate=\"Đáp án không hợp lệ!\" minLength={1}\r\n                                        value={type1CurrentInput}\r\n                                        onChange={(e) => handleKeyChange(0, e.target.value)}\r\n                                        onKeyPress={(e) => keyBoxKeyDown(e)}\r\n                                        />\r\n                                    </Form.Group>\r\n                                    {keyType1Choices.length > 0 && \r\n                                    <Paper component=\"ul\">\r\n                                        {keyType1Choices.map((choice, index) => {\r\n                                            return (\r\n                                                <li key={index}>\r\n                                                    <Chip\r\n                                                        label={choice}\r\n                                                        onDelete={() => deleteKeyType1Choice(index)}\r\n                                                    />\r\n                                                </li>\r\n                                            )\r\n                                        })}\r\n                                    </Paper>\r\n                                    }\r\n                                    </>\r\n                                )\r\n                            }\r\n                            <Form.Group className=\"mt-2\">\r\n                                <Form.Label>Giải thích (nếu có)</Form.Label>\r\n                                <Form.Control as=\"textarea\" validate=\"Không hợp lệ!\"\r\n                                value={explain}\r\n                                onChange={(e) => setExplain(e.target.value)}/>\r\n                            </Form.Group>\r\n                            <Form.Group className=\"mt-2\">\r\n                                <Form.Label>Điểm số</Form.Label>\r\n                                <Form.Control validate=\"Không hợp lệ!\"\r\n                                value={point} type=\"number\" min={0} \r\n                                onChange={(e) => setPoint(e.target.value)}/>\r\n                            </Form.Group>\r\n                            {!props.useQuizTime && <Form.Group className=\"mb-3 mt-3\">\r\n                                <Form.Label>Thời gian trả lời (giây): </Form.Label><br></br>\r\n                                <Form.Control \r\n                                    type=\"number\"\r\n                                    min = {1}\r\n                                    value={time}\r\n                                    onChange={(e) => setTime(e.target.value)} \r\n                                />\r\n                            </Form.Group>}\r\n                            <Form.Group className=\"mb-3 mt-3\">\r\n                                <Form.Label>Ảnh (nếu có)</Form.Label><br></br>\r\n                                <label htmlFor=\"file\" className=\"shareOption\" style={{cursor: \"pointer\"}}>\r\n                                    <PermMedia htmlColor=\"green\" className=\"shareIcon\"/>\r\n                                    <Form.Control style={{display: \"none\"}} type=\"file\" id=\"file\" accept=\".png, .jpeg, .jpg\" size=\"sm\" onChange={(e) => setFile(e.target.files[0])}/>\r\n                                </label>\r\n\r\n                            </Form.Group>\r\n                            </Form>\r\n                            {\r\n                                file && (\r\n                                    <div className=\"shareImgContainer\">\r\n                                        <img className=\"shareImg\" src={file && URL.createObjectURL(file)} alt=\"\"/>\r\n                                        <Cancel className=\"shareCancelImg\" onClick={() => {\r\n                                            setFile(null);\r\n                                            setURL(\"\");\r\n                                        }}></Cancel>\r\n                                    </div>\r\n                                )\r\n                                || \r\n                                !file && url !== \"\" && (\r\n                                    <div className=\"shareImgContainer\">\r\n                                        <img className=\"shareImg\" src={url} alt=\"\"/>\r\n                                        <Cancel className=\"shareCancelImg\" onClick={() => {\r\n                                            setFile(null);\r\n                                            setURL(\"\");\r\n                                        }}></Cancel>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                    </Col>\r\n                </Row>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n            <p className=\"error\">{validateError}</p>\r\n            <Button variant=\"warning\" type=\"submit\" form=\"questionAddForm\">Sửa</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default QuestionEditModal\r\n","import \"./quizcreate.css\";\r\nimport {React, useState, useEffect, useContext, useRef} from 'react'\r\nimport QuestionAddModal from \"./../../components/question-add-modal/QuestionAddModal\";\r\nimport QuestionEditModal from \"./../../components/question-edit-modal/QuestionEditModal\";\r\nimport {AuthContext} from \"../../context/AuthContext\";\r\nimport axios from \"axios\";\r\nimport {Paper, Chip} from \"@material-ui/core\";\r\nimport {\r\n    Redirect\r\n} from \"react-router-dom\";\r\n\r\n//Bootstrap\r\nimport {Container, Col, Row, Form, Button, Modal} from \"react-bootstrap\";\r\n\r\n//Material UI icons\r\nimport {Add} from \"@material-ui/icons\";  \r\n\r\nexport default function QuizCreate() {\r\n    const {user} = useContext(AuthContext);\r\n    const [quizTitle, setQuizTitle] = useState(\"\");\r\n    const [quizCode, setQuizCode] = useState(\"\");\r\n    const [quizMode, setQuizMode] = useState(0);\r\n    const [quizTime, setQuizTime] = useState(\"\");\r\n    const [numberOfQuest, setNumberOfQuest] = useState(0)\r\n    const [useQuizTime, setUseQuizTime] = useState(false);\r\n    const [questionList, setQuestionList] = useState([]);\r\n    const [addQuestionModalShow, setAddQuestionModalShow] = useState(false);\r\n    const [submittedQuizDetails, setSubmittedQuizDetails] = useState(false);\r\n    const [quizDetailError, setQuizDetailError] = useState(\"\");\r\n    const [timeUnit, setTimeUnit] = useState(0);\r\n    const [editQuestionModalShow, setEditQuestionModalShow] = useState(false);\r\n    const [questionEditGet, setQuestionEditGet] = useState(null);\r\n    const [rawOrder, setRawOrder] = useState(false);\r\n    const [errorModalShowing, setErrorModalShowing] = useState(false);\r\n    const [error, setError] = useState(\"\");\r\n    const [redirect, setRedirect] = useState(false);\r\n\r\n    const onQuizModeChange = (type) => {\r\n        setQuizMode(type);\r\n    }\r\n\r\n    const onAddQuestionSubmit = (input) => {\r\n        setQuestionList([...questionList, input]);\r\n        setAddQuestionModalShow(false);\r\n    }\r\n\r\n    const onEditQuestionSubmit = (input) => {\r\n        let cloneArray = [...questionList];\r\n        let {questIndex, ...content} = input;\r\n        cloneArray[input[\"questIndex\"]] = content;\r\n        setQuestionList(cloneArray);\r\n        setEditQuestionModalShow(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setNumberOfQuest(questionList.length);\r\n    }, [questionList])\r\n\r\n    useEffect(async() => {\r\n        //Check if is admin\r\n        await axios.post(\"https://online-quiz-system-server.herokuapp.com/api/auth/check-admin\", user)\r\n        .then(res => {\r\n            \r\n        })\r\n        .catch(err => {\r\n            setRedirect(true);\r\n        })\r\n    }, []);\r\n\r\n    const submitQuizDetails = () => {\r\n        //Validate info\r\n        if (quizTitle === \"\") {\r\n            setQuizDetailError(\"Vui lòng nhập tiêu đề Quiz.\");\r\n            return;\r\n        }\r\n        if (quizMode === 1 && quizCode === \"\") {\r\n            setQuizDetailError(\"Vui lòng nhập mật khẩu Quiz.\");\r\n            return;\r\n        }\r\n        if (useQuizTime && isNaN(parseInt(quizTime))) {\r\n            setQuizDetailError(\"Thời gian quiz không hợp lệ.\");\r\n            return;\r\n        }\r\n\r\n        //Pass validation\r\n        setSubmittedQuizDetails(true);\r\n    }\r\n\r\n    const editQuestion = (index) => {\r\n        console.log(index);\r\n        let getQuest = questionList[index];\r\n        console.log(getQuest);\r\n        getQuest[\"questIndex\"] = index;\r\n        setQuestionEditGet(getQuest);\r\n    }\r\n\r\n    const deleteQuestion = (index) => {\r\n        let getQuest = [];\r\n        for (let i = 0; i < index; i++) {\r\n            getQuest.push(questionList[i]);\r\n        }\r\n        for (let i = index + 1; i < questionList.length; i++) {\r\n            getQuest.push(questionList[i]);\r\n        }\r\n        setQuestionList(getQuest);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setEditQuestionModalShow(true);\r\n    }, [questionEditGet])\r\n\r\n    useEffect(() => {\r\n        console.log(questionList);\r\n    }, [questionList])\r\n\r\n    const addQuiz = async() => {\r\n        const newQuiz = {\r\n            quiz_title: quizTitle, \r\n            quiz_mode: quizMode,\r\n            quiz_creator: user.id,\r\n            raw_order: rawOrder\r\n        }\r\n\r\n        let cloneQuestionList = [...questionList];\r\n        for (let i = 0; i < cloneQuestionList.length; i++) {\r\n            cloneQuestionList[i][\"questIndex\"] = i;\r\n        }\r\n\r\n        //Quiz code\r\n        if (quizCode !== \"\")\r\n            newQuiz[\"quiz_code\"] = quizCode;\r\n\r\n        //Quiz time\r\n        if (useQuizTime)\r\n        {\r\n            newQuiz[\"quiz_time\"] = timeUnit == 0? quizTime * 60 : quizTime;\r\n        }\r\n\r\n        newQuiz[\"questions\"] = cloneQuestionList;\r\n\r\n        //https://online-quiz-system-server.herokuapp.com/api/quiz/create\r\n        axios.post(\"https://online-quiz-system-server.herokuapp.com/api/quiz/create\", newQuiz)\r\n        .then(res => {\r\n            //Do nothing\r\n            setRedirect(true);\r\n        })\r\n        .catch(err => {\r\n            if (err.response.status === 403) {\r\n                setError(\"Mã trận đã tồn tại. Vui lòng sử dụng mã khác\");\r\n                setErrorModalShowing(true);\r\n            } else if (err.response.status === 500) {\r\n                setError(\"Đã có lỗi xảy ra. Vui lòng thử lại sau\");\r\n                setErrorModalShowing(true);\r\n            }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Container className=\"p-4\">\r\n                <h2 className=\"text-center\">Tạo Quiz</h2>\r\n\r\n                <Row>\r\n                    <Col md={8} sm={12} className=\"offset-md-2 offset-sm-0\">\r\n                        <Form id=\"quizDetailForm\">\r\n                            <fieldset disabled={submittedQuizDetails? \"disabled\" : \"\"}>\r\n                                <Form.Group className=\"mb-2\" controlId=\"formBasicEmail\">\r\n                                    <Form.Label>Tiêu đề</Form.Label>\r\n                                    <Form.Control type=\"text\" required validate=\"Quiz name is not valid!\"\r\n                                    onChange={(e) => setQuizTitle(e.target.value)}/>\r\n                                </Form.Group>\r\n                                <fieldset>\r\n                                    <Form.Group as={Row} className=\"mb-2\">\r\n                                    <Form.Label as=\"legend\" column sm={12}>\r\n                                        Chế độ:\r\n                                    </Form.Label>\r\n                                    <Col sm={12}>\r\n                                        <Form.Check\r\n                                            type=\"radio\"\r\n                                            label=\"Công khai\"\r\n                                            name=\"quiz-mode\"\r\n                                            checked={quizMode === 0}\r\n                                            onChange={() => onQuizModeChange(0)}\r\n                                        />\r\n                                        <Form.Check\r\n                                            type=\"radio\"\r\n                                            label=\"Riêng tư\"\r\n                                            name=\"quiz-mode\"\r\n                                            checked={quizMode === 1}\r\n                                            onChange={() => onQuizModeChange(1)}\r\n                                        />\r\n                                    </Col>\r\n                                    </Form.Group>\r\n                                </fieldset>\r\n                                <Form.Group className=\"mb-2\" controlId=\"formBasicEmail\">\r\n                                    <Form.Label>Mật khẩu</Form.Label>\r\n                                    <Form.Control \r\n                                        type=\"text\"\r\n                                        validate=\"Quiz password is not valid!\" \r\n                                        minLength={6} maxLength={10}\r\n                                        disabled = {quizMode === 0 && \"disabled\"}\r\n                                        onChange = {(e) => setQuizCode(e.target.value)}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group className=\"mb-2\" controlId=\"formBasicEmail\">\r\n                                    <Form.Check \r\n                                        label=\"Thời gian\" \r\n                                        onChange = {() => setUseQuizTime(!useQuizTime)} \r\n                                    />\r\n                                    <Form.Text muted>\r\n                                        Lựa chọn và nhập thời gian làm bài cho toàn bộ quiz hoặc không lựa chọn và đặt thời gian riêng lẻ cho từng câu hỏi.\r\n                                    </Form.Text>\r\n                                    <Row>\r\n                                        <Col sm={9}>\r\n                                            <Form.Control \r\n                                                type=\"number\"\r\n                                                min = {1}\r\n                                                validate=\"Quiz password is not valid!\" \r\n                                                disabled = {!useQuizTime && \"disabled\"}\r\n                                                onChange = {(e) => {setQuizTime(e.target.value)}}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col sm={3} className=\"d-flex align-items-center\">\r\n                                            <Form.Check \r\n                                                type=\"radio\"\r\n                                                inline\r\n                                                label=\"phút\" \r\n                                                name=\"time-mode\"\r\n                                                disabled = {!useQuizTime && \"disabled\"}\r\n                                                checked = {useQuizTime && timeUnit === 0}\r\n                                                onChange = {() => setTimeUnit(0)}\r\n                                            />\r\n                                            <Form.Check \r\n                                                type=\"radio\"\r\n                                                inline\r\n                                                label=\"giây\" \r\n                                                name=\"time-mode\"\r\n                                                disabled = {!useQuizTime && \"disabled\"}\r\n                                                checked = {useQuizTime && timeUnit === 1}\r\n                                                onChange = {() => setTimeUnit(1)}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Form.Group>\r\n                                <Form.Group>\r\n                                    <Form.Check \r\n                                        label=\"Giữ thứ tự câu hỏi\" \r\n                                        checked={rawOrder}\r\n                                        onChange={() => setRawOrder(!rawOrder)}\r\n                                    />\r\n                                    <Form.Text muted>\r\n                                        Nếu không chọn, câu hỏi sẽ được sắp xếp ngẫu nhiên.\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n                                {!submittedQuizDetails && (<div className=\"text-center mt-3\">\r\n                                    <p className=\"error\">{quizDetailError}</p>\r\n                                    <Button className=\"btn-rounded\" variant=\"success\" onClick={() => submitQuizDetails()}>\r\n                                        Xác nhận thông tin Quiz\r\n                                    </Button>\r\n                                </div>)}\r\n                            </fieldset>\r\n                        </Form>\r\n                        {submittedQuizDetails && (<Row className=\"mt-2\">\r\n                            <h4 className=\"text-center\">Câu hỏi</h4>\r\n                            <div className=\"text-center\">\r\n                                <Button className=\"btn-rounded\" variant=\"info\" style={{paddingLeft: 15, paddingRight: 15}} onClick={() => setAddQuestionModalShow(true)}>\r\n                                    <Add fontSize=\"small\" style={{ color: \"white\"}}></Add>\r\n                                </Button>\r\n                            </div>\r\n                            <p className=\"mt-2 text-center\" >Số lượng câu hỏi: {numberOfQuest}</p>\r\n                            {\r\n                                questionList.map((quest, index) => {\r\n                                    return ( \r\n                                        <div className=\"mt-2 mb-2 questionBox\" key={quest[\"question\"]}>\r\n                                            <p className=\"quest-title\"><b>Câu {index + 1}: </b>{quest[\"question\"]}</p>\r\n                                            {quest[\"time\"] !== 0 && <p className=\"quest-title\">Thời gian: {quest[\"time\"]} giây</p> }\r\n                                            <p className=\"quest-title\">Điểm số: {quest[\"point\"]}</p>\r\n                                            {quest[\"image\"] !== \"\" &&\r\n                                                <img className=\"question-image\" alt=\"\" src={quest[\"image\"]}></img>\r\n                                            }\r\n                                            <div className=\"quest-content\">\r\n                                                {quest[\"questionType\"] === 1 && (\r\n                                                    <>\r\n                                                        <p className=\"mb-1\">Đáp án:</p>\r\n                                                        <Paper component=\"ul\">\r\n                                                            {quest[\"keys\"][0].split(\"~|\").map((choice, index) => {\r\n                                                                return (\r\n                                                                    <li key={index}>\r\n                                                                        <Chip\r\n                                                                            label={choice}\r\n                                                                        />\r\n                                                                    </li>\r\n                                                                )\r\n                                                            })}\r\n                                                        </Paper>\r\n                                                    </>\r\n                                                )}\r\n                                                {quest[\"questionType\"] === 0 && (\r\n                                                    quest[\"keys\"].map((key, index1) => {\r\n                                                        return (\r\n                                                        <>\r\n                                                        <p className={quest[\"keyCorrects\"][index1]? \"correct-key\" : \"incorrect-key\"}>\r\n                                                            Phương án {index1 + 1}: {key}\r\n                                                        </p>\r\n                                                        {quest[\"keyImages\"][index1] && quest[\"keyImages\"][index1] !== \"\" &&\r\n                                                            <div className=\"text-center\">\r\n                                                                <img className=\"key-image\" alt=\"\" src={quest[\"keyImages\"][index1]}></img>\r\n                                                            </div>\r\n                                                        }\r\n                                                        </>)\r\n                                                    })\r\n                                                )}\r\n                                                {quest[\"explain\"] !== \"\" && (\r\n                                                    <p>Giải thích: {quest[\"explain\"]}</p>\r\n                                                )}\r\n                                            </div>\r\n                                            <Button className=\"btn-rounded mt-1\" style={{marginRight: \"3px\"}} variant=\"danger\" onClick={() => deleteQuestion(index)}>Xoá</Button>\r\n                                            <Button className=\"btn-rounded mt-1 ml-1\" variant=\"warning\" onClick={() => editQuestion(index)}>Chỉnh sửa</Button>\r\n                                        </div>\r\n                                     )\r\n                                })\r\n                            }\r\n                        </Row>)}\r\n                        {submittedQuizDetails && (\r\n                            <div className=\"text-center\">\r\n                                <Button className=\"btn-rounded\" variant=\"success\" onClick={() => addQuiz()}>Xác nhận</Button>\r\n                            </div>\r\n                        )}\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n\r\n            <QuestionAddModal\r\n                show={addQuestionModalShow}\r\n                onHide={() => setAddQuestionModalShow(false)}\r\n                numberOfQuest={numberOfQuest}\r\n                onAddQuestionSubmit={onAddQuestionSubmit}\r\n                useQuizTime={useQuizTime}\r\n            >\r\n\r\n            </QuestionAddModal>\r\n\r\n            {\r\n                questionEditGet && <QuestionEditModal\r\n                    show={editQuestionModalShow}\r\n                    onHide={() => setEditQuestionModalShow(false)}\r\n                    onEditQuestionSubmit={onEditQuestionSubmit}\r\n                    useQuizTime={useQuizTime}\r\n                    questionEditGet={questionEditGet}\r\n                >\r\n\r\n                </QuestionEditModal>\r\n            }\r\n\r\n            {\r\n                errorModalShowing && (<Modal\r\n                    size=\"lg\"\r\n                    aria-labelledby=\"contained-modal-title-vcenter\"\r\n                    centered\r\n                    show={errorModalShowing}\r\n                    >\r\n                    <Modal.Header>  \r\n                        Lỗi\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        {error}\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button onClick={() => setErrorModalShowing(false)}>Đóng</Button>\r\n                    </Modal.Footer>\r\n                </Modal>)\r\n            }\r\n\r\n            {\r\n                redirect && <Redirect to=\"/home\"></Redirect>\r\n            }\r\n        </div>\r\n    )\r\n}","import Auth from \"./pages/auth/Auth\";\nimport Home from \"./pages/home/Home\";\nimport QuizMain from \"./pages/quiz-main/QuizMain\";\nimport QuizAttempts from \"./pages/quiz-attempts/QuizAttempts\";\nimport MyAttempts from \"./pages/my-attempts/MyAttempts\";\nimport Headbar from \"./components/headbar/Headbar\";\nimport QuizCreate from \"./pages/quiz-create/QuizCreate\";\nimport \"./assets/css/index.css\";\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Redirect\n} from \"react-router-dom\";\nimport { useContext, useEffect } from \"react\";\nimport { AuthContext } from \"./context/AuthContext\";\n\nfunction App() {\n    const {user} = useContext(AuthContext);\n\n    useEffect(() => {\n        switch (window.location.pathname) {\n            case \"/\":\n                document.title = \"Online Quiz System\";\n                break;\n            case \"/home\":\n                document.title = \"Online Quiz System | Home\";\n                break;\n            case \"/attempts\":\n                document.title = \"Online Quiz System | My Records\";\n                break;\n            case \"/join\":\n                document.title = \"Online Quiz System | Quiz\";\n                break;\n            case \"/create\":\n                document.title = \"Online Quiz System | Create\";\n                break;\n            case \"/dashboard\":\n                document.title = \"Online Quiz System | Quiz Records\";\n                break;\n        }\n    }, [window.location.pathname])\n\n    return (\n        <div>\n            {/* {window.location.pathname !== \"/join\" && user && <Headbar></Headbar>} */}\n\n\n            <Router>\n                <Switch>\n                \n                <Route exact path=\"/\">\n                    {user? <Redirect to=\"/home\"></Redirect> : <Auth></Auth>}\n                </Route>\n                {\n                    user && \n                    <Route exact path=\"/join\" \n                        render={(props) => <QuizMain {...props}/>}\n                    />\n                }\n                {\n                    !user && \n                    <Route exact path=\"/join\" \n                    ><Redirect to=\"/\"></Redirect></Route>\n                }\n                <div>\n                    {window.location.pathname !== \"/join\" && user && <Headbar></Headbar>}\n                    <Route exact path=\"/home\">\n                        {user? <Home></Home> : <Redirect to=\"/\"></Redirect>}\n                    </Route>\n                    <Route exact path=\"/create\">\n                        {user && user.role === 1? <QuizCreate></QuizCreate> : <Redirect to=\"/\"></Redirect>}\n                    </Route>\n                    {\n                        user && \n                        <>\n                        <Route exact path=\"/join\" \n                            render={(props) => <QuizMain {...props}/>}\n                        />\n                        <Route exact path=\"/dashboard\" \n                            render={(props) => <QuizAttempts {...props}></QuizAttempts>}\n                        />\n                        <Route exact path=\"/attempts\" \n                            render={(props) => <MyAttempts {...props}></MyAttempts>}\n                        />\n                        </>\n                    }\n                    {\n                        !user && \n                        <>\n                        <Route exact path=\"/join\" \n                        ><Redirect to=\"/\"></Redirect></Route>\n                        <Route exact path=\"/dashboard\" \n                        ><Redirect to=\"/\"></Redirect></Route>\n                        <Route exact path=\"/attempts\" \n                        ><Redirect to=\"/\"></Redirect></Route>\n                        </>\n                    }\n                </div>  \n                </Switch>\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {AuthContextProvider} from \"./context/AuthContext\"\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport {BrowserRouter} from 'react-router-dom';\n\nconst render = Component => {\n  ReactDOM.render(\n    <AuthContextProvider>\n      <App />\n    </AuthContextProvider>,\n    document.getElementById('root')\n  );  \n}\n\nrender(App)","const AuthReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case \"LOGIN_START\":\r\n            return {\r\n                user: null,\r\n                isFetching: true,\r\n                error: false\r\n            }\r\n        case \"LOGIN_SUCCESS\":\r\n            return {\r\n                user: action.payload,\r\n                isFetching: false,\r\n                error: false\r\n            }\r\n        case \"LOGIN_FAILURE\":\r\n            return {\r\n                user: null,\r\n                isFetching: false,\r\n                error: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default AuthReducer;","import { createContext, useReducer, useEffect } from \"react\";\r\nimport AuthReducer from \"./AuthReducer\";\r\n\r\nconst INITIAL_STATE = {\r\n    user: null,\r\n    isFetching: false,\r\n    error: false\r\n}\r\n\r\nexport const AuthContext = createContext(INITIAL_STATE);\r\nexport const AuthContextProvider = ({children}) => {\r\n    const [state, dispatch] = useReducer(AuthReducer, [], () => {\r\n        const localData = localStorage.getItem(\"auth_state\");\r\n        return localData? JSON.parse(localData) : []\r\n    });\r\n    useEffect(() => {\r\n        localStorage.setItem(\"auth_state\", JSON.stringify(state));\r\n    }, [state])\r\n    return (\r\n        <AuthContext.Provider value = {{\r\n            user: state.user, \r\n            isFetching: state.isFetching, \r\n            error: state.error,\r\n            dispatch,\r\n        }}>\r\n        {children}\r\n        </AuthContext.Provider>\r\n    )\r\n}","import \"./quiz-review.css\";\r\nimport {React, useState, useEffect, useRef} from 'react'\r\nimport {Container, Row, Col, Form} from \"react-bootstrap\";\r\nimport {Chip, Paper} from '@material-ui/core';\r\n\r\nfunction QuizReview(props) {\r\n    const [markContent, setMarkContent] = useState([]);\r\n    const [questions, setQuestions] = useState([]);\r\n    const [quizInfo, setQuizInfo] = useState([]);\r\n    const [loaded, setLoaded] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setMarkContent(props.reviewContent);\r\n        setQuestions(props.questions);\r\n        setQuizInfo(props.quizInfo);\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (questions.length > 0) {\r\n            setLoaded(true);\r\n        }\r\n    }, [markContent])\r\n\r\n    return (\r\n        <>\r\n            {loaded && <Container className=\"mt-3 mb-3\">\r\n                <h2 className=\"text-center\">{quizInfo.quiz_title}</h2>\r\n                <p className=\"text-center m-1\">Tạo bởi: {quizInfo.creator}</p>\r\n                {props.name && <h5 className=\"text-center\">{props.name}</h5>}\r\n                {questions.map((question, i) => {\r\n                    return (\r\n                    <div key={i} class=\"mt-3 mb-3 question-review-box\">\r\n                        <h5 style={{color: markContent[i].point === question.question_point? \"green\" : \"red\"}}>Câu {i + 1} - {markContent[i].point}/{question.question_point}</h5>\r\n                        <div className=\"question-box d-flex justify-content-center align-items-center\">\r\n                            <h5 className=\"txt-quest\">{question.question_content}</h5>\r\n                        </div>\r\n                        {question.media != \"\" && <div className=\"text-center mt-2\">\r\n                            <img className=\"img-quest\" src={question.media}></img>\r\n                        </div>}\r\n                        {question.question_type == 1 && \r\n                        <div>\r\n                            <Form.Control value={markContent[i].answer} disabled=\"true\" type=\"text\" className=\"mt-2\" placeholder=\"Câu trả lời\">\r\n                            </Form.Control>\r\n                            <div className=\"text-center mt-1\">\r\n                                {\r\n                                    <>\r\n                                    <h5>Đáp án:</h5>\r\n                                    <Paper component=\"ul\" className=\"paper\">\r\n                                        {Buffer(question.answers[0].answer_content, \"base64\").toString(\"utf-8\").split(\"~|\")\r\n                                        .map((choice, index) => {\r\n                                            return (\r\n                                                <li key={index}>\r\n                                                    <Chip\r\n                                                        label={choice}\r\n                                                    />\r\n                                                </li>\r\n                                            )\r\n                                        })}\r\n                                    </Paper>\r\n                                    </>\r\n                                }\r\n                                <p style={{fontStyle: \"italic\"}}>Giải thích: {Buffer(question.explanation, \"base64\").toString(\"utf-8\")}</p>\r\n                            </div>\r\n                        </div>}\r\n                        {question.question_type == 0 && \r\n                            <>\r\n                            <Row className=\"mt-2\">\r\n                                {\r\n                                    question.answers.map((answer, j) => {\r\n                                        let chosen = \"\";\r\n                                        if (answer.id !== markContent[i].answer) {\r\n                                            if (answer.is_correct === 1) {\r\n                                                chosen = \"answer-content text-center correct\";\r\n                                            } else {\r\n                                                chosen = \"answer-content text-center\";\r\n                                            }\r\n                                        } else {\r\n                                            if (answer.is_correct === 1) {\r\n                                                chosen = \"answer-content text-center correct\";\r\n                                            } else {\r\n                                                chosen = \"answer-content text-center wrong\";\r\n                                            }\r\n                                        }\r\n                                        return (\r\n                                            <Col lg={6} md={6} sm={12} className=\"p-1 answer\">\r\n                                                <div className={chosen}>\r\n                                                    {answer.media != \"\" && <div><img className=\"img-answer\" src={answer.media}></img></div>}\r\n                                                    <p className=\"mt-1 mb-0\">{Buffer(answer.answer_content, \"base64\").toString(\"utf-8\")}</p>\r\n                                                </div>\r\n                                            </Col>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </Row>\r\n                            <p style={{fontStyle: \"italic\"}} className=\"text-center\">Giải thích: {Buffer(question.explanation, \"base64\").toString(\"utf-8\")}</p>\r\n                            </>\r\n                        }\r\n                    </div>)\r\n                })\r\n                }\r\n            </Container>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default QuizReview\r\n\r\n/*\r\n                        \r\n*/"],"sourceRoot":""}